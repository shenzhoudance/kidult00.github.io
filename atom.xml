<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[00's Adventure]]></title>
  <subtitle><![CDATA[Why join the navy if you can be a pirate]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://uegeek.com/"/>
  <updated>2017-12-09T01:27:46.511Z</updated>
  <id>http://uegeek.com/</id>
  
  <author>
    <name><![CDATA[kidult00]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[DL笔记：机器学习和深度学习的区别]]></title>
    <link href="http://uegeek.com/171206DLNote1-ML-DL-Basic.html"/>
    <id>http://uegeek.com/171206DLNote1-ML-DL-Basic.html</id>
    <published>2017-12-06T01:24:46.000Z</published>
    <updated>2017-12-09T01:27:46.511Z</updated>
    <content type="html"><![CDATA[<p><img src="https://blogs.nvidia.com/wp-content/uploads/2016/07/Deep_Learning_Icons_R5_PNG.jpg.png" alt=""><br>via <a href="https://blogs.nvidia.com/blog/2016/07/29/whats-difference-artificial-intelligence-machine-learning-deep-learning-ai/" target="_blank" rel="external">The Difference Between AI, Machine Learning, and Deep Learning? | NVIDIA Blog</a></p>
<a id="more"></a> 
<p>Nvidia 博客上的这张图很好表示了 AI, Machine Learning, Deep Learning 三者的关系。人工智能是一类非常广泛的问题，机器学习是其中一个重要领域和手段，<strong>深度学习则是机器学习的一个分支</strong>。在很多人工智能问题上，深度学习的方法突破了传统机器学习的瓶颈，因而影响力迅速扩大。</p>
<h3 id="u4EC0_u4E48_u662F_u673A_u5668_u5B66_u4E60_uFF1F"><a href="#u4EC0_u4E48_u662F_u673A_u5668_u5B66_u4E60_uFF1F" class="headerlink" title="什么是机器学习？"></a>什么是机器学习？</h3><p><img src="https://uploads.toptal.io/blog/image/443/toptal-blog-image-1407508081138.png" alt=""></p>
<p>00 试着翻出一些机器学习相对权威的定义，看看它们有什么共同点：</p>
<table>
<thead>
<tr>
<th>Definition</th>
<th>Translation</th>
<th>Source</th>
<th>Key words</th>
</tr>
</thead>
<tbody>
<tr>
<td>The field of machine learning is concerned with the question of how to construct computer programs that automatically improve with experience.</td>
<td>机器学习聚焦于一个问题：如何构建随着经验而自动改进的计算机程序。</td>
<td>Tom Mitchell in  <a href="http://www.amazon.com/dp/0070428077?tag=inspiredalgor-20" target="_blank" rel="external">Machine Learning</a></td>
<td>会自我改进的程序</td>
</tr>
<tr>
<td>Vast amounts of data are being generated in many fields, and the statisticians’s job is to make sense of it all: to extract important patterns and trends, and to understand “what the data says”. We call this learning from data.</td>
<td>从数据中提取重要的模式和规律/趋势</td>
<td><a href="http://www.amazon.com/dp/0387848576?tag=inspiredalgor-20" target="_blank" rel="external">The Elements of Statistical Learning: Data Mining, Inference, and Prediction</a></td>
<td>模式提取</td>
</tr>
<tr>
<td>Pattern recognition has its origins in engineering, whereas machine learning grew out of computer science. However, these activities can be viewed as two facets of the same field…</td>
<td>模式识别和机器学习是一体两面</td>
<td>Bishop in <a href="http://www.amazon.com/dp/0387310738?tag=inspiredalgor-20" target="_blank" rel="external">Pattern Recognition and Machine Learning</a></td>
<td>模式识别</td>
</tr>
<tr>
<td>Machine Learning is the training of a model from data that generalizes a decision against a performance measure.</td>
<td>机器学习是通过用于决策的数据去训练模型，并达到某些运行标准</td>
<td><a href="http://machinelearningmastery.com/author/jasonb/" target="_blank" rel="external">Jason Brownlee</a> in <a href="http://machinelearningmastery.com/what-is-machine-learning/" target="_blank" rel="external">What is Machine Learning: A Tour of Authoritative Definitions and a Handy One-Liner You Can Use</a></td>
<td>通过数据训练模型</td>
</tr>
</tbody>
</table>
<p>简单来说，就是机器通过一系列「任务」从「经验」（数据）中学习，并且评估「效果」如何：</p>
<p><img src="http://7xjpra.com1.z0.glb.clouddn.com/Col.DL.ETP.png" alt=""></p>
<p>为什么叫做「学习」呢？一般编程语言的做法，是定义每一步指令，逐一执行并最终达到目标。而机器学习则相反，先定义好输出，然后程序自动「学习」出达到目标的「步骤」。</p>
<p>机器学习可以分为：</p>
<ul>
<li>监督学习：给出定义好的标签，程序「学习」标签和数据之间的映射关系</li>
<li>非监督学习：没有标签的数据集</li>
<li>强化学习：达到目标会有正向反馈</li>
</ul>
<p><img src="https://i1.wp.com/cybrml.com/wp-content/uploads/2017/01/MachineLearningDiagram.png?resize=770%2C551" alt=""></p>
<h3 id="u673A_u5668_u5B66_u4E60_u64C5_u957F_u505A_u4EC0_u4E48_uFF1F"><a href="#u673A_u5668_u5B66_u4E60_u64C5_u957F_u505A_u4EC0_u4E48_uFF1F" class="headerlink" title="机器学习擅长做什么？"></a>机器学习擅长做什么？</h3><p>当然是替代重复的人工劳动，用机器自动从大量数据中识别模式——也就是「套路」啦。知道「套路」后，我们可以干嘛呢？</p>
<ul>
<li>Classification 分类，如垃圾邮件识别(detection, ranking)</li>
<li>Regression 回归，例如股市预测</li>
<li>Clustering 聚类，如 iPhoto 按人分组</li>
<li>Rule Extraction 规则提取，如数据挖掘</li>
</ul>
<p>比如垃圾邮件识别的问题，做法是先从每一封邮件中抽取出对识别结果可能有影响的因素（称为特征 feature），比如发件地址、邮件标题、收件人数量等等。然后使用算法去训练数据中每个特征和预测结果的相关度，最终得到可以预测结果的特征。</p>
<p>算法再强大，如果无法从数据中「学习到」更好的特征表达，也是徒劳。同样的数据，使用不同的表达方法，可能会极大影响问题的难度。一旦解决了数据表达和特征提取问题，很多人工智能任务也就迎刃而解。</p>
<h3 id="u4E3A_u4EC0_u4E48_u9700_u8981_u6DF1_u5EA6_u5B66_u4E60_uFF1F"><a href="#u4E3A_u4EC0_u4E48_u9700_u8981_u6DF1_u5EA6_u5B66_u4E60_uFF1F" class="headerlink" title="为什么需要深度学习？"></a>为什么需要深度学习？</h3><p>但是对机器学习来说，特征提取并不简单。特征工程往往需要人工投入大量时间去研究和调整，就好像原本应该机器解决的问题，却需要人一直在旁边搀扶。</p>
<p>深度学习便是解决特征提取问题的一个机器学习分支。它可以自动学习特征和任务之间的关联，还能从简单特征中提取复杂的特征。</p>
<p><img src="http://7xjpra.com1.z0.glb.clouddn.com/Col.DL.ML_vs_DL.png" alt=""></p>
<h3 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h3><ul>
<li><a href="http://machinelearningmastery.com/what-is-machine-learning/" target="_blank" rel="external">What is Machine Learning: A Tour of Authoritative Definitions and a Handy One-Liner You Can Use - Machine Learning Mastery</a></li>
<li><a href="https://book.douban.com/subject/26708119/" target="_blank" rel="external">机器学习 (豆瓣)</a></li>
<li><a href="https://book.douban.com/subject/26976457/" target="_blank" rel="external">Tensorflow：实战Google深度学习框架 (豆瓣)</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="https://blogs.nvidia.com/wp-content/uploads/2016/07/Deep_Learning_Icons_R5_PNG.jpg.png" alt=""><br>via <a href="https://blogs.nvidia.com/blog/2016/07/29/whats-difference-artificial-intelligence-machine-learning-deep-learning-ai/">The Difference Between AI, Machine Learning, and Deep Learning? | NVIDIA Blog</a></p>]]>
    
    </summary>
    
      <category term="AI" scheme="http://uegeek.com/tags/AI/"/>
    
      <category term="ArtxCode" scheme="http://uegeek.com/tags/ArtxCode/"/>
    
      <category term="Coding" scheme="http://uegeek.com/tags/Coding/"/>
    
      <category term="DeepLearning" scheme="http://uegeek.com/tags/DeepLearning/"/>
    
      <category term="Python" scheme="http://uegeek.com/tags/Python/"/>
    
      <category term="深度学习" scheme="http://uegeek.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="动手" scheme="http://uegeek.com/categories/%E5%8A%A8%E6%89%8B/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[大哉问02 - 如何爱自己？拟一份爱的宣言]]></title>
    <link href="http://uegeek.com/171204HowToLoveYourself.html"/>
    <id>http://uegeek.com/171204HowToLoveYourself.html</id>
    <published>2017-12-04T01:16:18.000Z</published>
    <updated>2017-12-09T01:23:32.778Z</updated>
    <content type="html"><![CDATA[<p><img src="http://7xjpra.com1.z0.glb.clouddn.com/love_yourself.jpg" alt=""></p>
<a id="more"></a>  
<p>这是一个困扰我已久的问题。</p>
<p>以前，朋友会跟我说「你不够爱自己」。除了愕然，好像多少有些认同，可是再进一步也不知道该做些什么。最近这大半年近距离接触了心理咨询，每次看到「爱己才能爱人」这个几乎是所有情感问题解药中的配方出现，也就时不时会想起这个问题。</p>
<p>可是，「爱自己」这简单的三个字，到底要怎么做？</p>
<h2 id="u70E6_u607C_u4E4B_u6E90"><a href="#u70E6_u607C_u4E4B_u6E90" class="headerlink" title="烦恼之源"></a>烦恼之源</h2><p>阿德勒说，所有的烦恼都来自于人际关系。我想，他说的人际关系，既包含与他人的关系，但首先是与自己的关系。在所有人际关系问题的表象之下，根源也许都是我们与自己的关系出现了紧张。</p>
<p>我们容易焦虑。且不说在焦虑的时候，「自己」在不在场，有没有提供应有的安慰。更棘手的是，这些焦虑的来源，往往就是我们自己。</p>
<p>所以我们感到痛苦，想要逃避，不断寻求一种来自外部的肯定，确认自己是有价值的、好的、受欢迎的、值得被爱的。在困顿无助的时候，因为自己给不出，所以时时想伸手向外寻求安抚。</p>
<p>我们甚至不知道自己要什么，不与自己耐心对话，而是下意识地、急不可耐地抓过一些能彰显某种身份的标识装扮在身上，尝试告诉自己和世界，我是一个怎样的人，你们应该怎样对待我。</p>
<p>阿德勒给出的解药是：人只有在觉得自己有价值的时候，才会有勇气。而价值不由「做了什么」来提供，那是有条件的价值。如果我们能以「存在」的视角来看待自己，认可存在本身就是价值，就能使自我的关系更加和谐。</p>
<p>跟别人的关系，再亲密也好，也有可能或主动或被动终结。但是自己跟自己相处一辈子，无法欺瞒，无法离弃。处理好跟自己的关系，真真是人生必修第一课。</p>
<p>如果用一种比喻形容你和自己的关系，会是什么？</p>
<p>对「如何爱自己」这个问题，这会是一个好的开始。</p>
<h2 id="u4ECE_u7231_u4ED6_u4EBA_u5B66_u7740_u7231_u81EA_u5DF1"><a href="#u4ECE_u7231_u4ED6_u4EBA_u5B66_u7740_u7231_u81EA_u5DF1" class="headerlink" title="从爱他人学着爱自己"></a>从爱他人学着爱自己</h2><p>「爱自己，就给自己买 xxx」</p>
<p>这大概是时下最流行的广告语。如果爱自己只是愿意花钱，只是时时放过自己，那未免也太容易了，我怎么一直没学会呢？</p>
<p>可能因为，<strong>爱是一种需要付出艰辛努力和持续练习才能获得的能力。</strong></p>
<p>如果一个问题我没法理解，就会用「类比和迁移」的办法。比如，先去想想我是怎么喜爱某个兴趣的，怎么把这种喜爱转换到自己身上。</p>
<p>但是行不通。因为「爱」是一个关系和相处问题，不能缺少人这个因素，无法只靠逻辑去求解。</p>
<p>似乎只能选择与你关系最亲密的人作为对象，把经验迁移过来：</p>
<blockquote>
<p>你如何去爱一个人？</p>
</blockquote>
<p>当你有要爱的人，就会变得勇敢和愿意付出。想想你会如何把最好的事物和感情交付给所爱的人？尤其当这个人需要你保护和付出时，比如你已经为人父母，选择小孩为对象来类比和迁移经验，就再适合不过了。</p>
<p>有时候问题就是这么吊诡——当我们不会爱别人，我们可能就不会爱自己；当我们不爱自己，就没法很好地爱别人。到底从哪一端开始？就从现在所处的位置开始吧，以一个新的角度看待与自己的关系。</p>
<h2 id="u7231_u662F_u4E00_u79CD_u7EC3_u4E60"><a href="#u7231_u662F_u4E00_u79CD_u7EC3_u4E60" class="headerlink" title="爱是一种练习"></a>爱是一种练习</h2><p>什么是爱？<strong>弗洛姆说：爱是一种能自觉地为被爱者的发展和幸福而付出一切努力的代称。</strong></p>
<p>让我们暂时把这句话作为「爱自己」的总纲领吧。</p>
<p>可是只有纲领还不够，我们还要细细去追问，我们可以如何爱人，我们应该如何爱自己。以下的铺陈，不是已经掌握的能力，而是「爱他人和爱自己」的详细理解，是行动纲领，是愿景，是坚持不懈的练习目标。</p>
<h3 id="u5FE0_u4E8E_u81EA_u5DF1"><a href="#u5FE0_u4E8E_u81EA_u5DF1" class="headerlink" title="忠于自己"></a>忠于自己</h3><p>世间有千万种勇气，最不能丧失的一种，叫做「直面自己」。这是对爱情也不能让步的。</p>
<p>每个人都需要面对自己过去生命里的困顿、失落、挫折。有时候这些负担太沉重，不希望它们如影随形，所以我们选择打造一个面具，或者任由「超我」去规划和引导一条偏离原本轨迹的人生航线。越是掩埋过去，离真实的自己好像就越遥远。失去真实，力量就会耗费在与自己的斗争中，无暇照顾其他。</p>
<p><strong>接受对方的一切，只要那是真实的。——这大概是爱他人和爱自己的第一原则</strong></p>
<p>台湾作家陈雪有一段话说得好：</p>
<blockquote>
<p>爱是即使在孤独中依然可以付出力量，爱是：我珍爱你的脆弱孤独，你的别扭，你的生硬，你的艰难，爱是正因为我知道我可以穿透那些硬壳看见最脆弱的你，那无意间暴露在我眼前的，使我想要细心爱怜。</p>
</blockquote>
<p>使人相爱的最终是安全和信任，而不应该是幻想成分居多的期望。</p>
<p>因为爱你，所以信任你，希望你在我身边可以做自己，像草木一样自如。因为爱你，所以想要陪你去细细区分，哪些是内心真正认同的；哪些是过去的伤害所结的伤疤，不想去触碰；哪些习性反应是即使伤口早已愈合，却还是习得性回避的东西。</p>
<p>因为爱自己，所以给自己安全和信任，而不是持续地声明种种期望。时时留心公平地对待本我/自我/超我，不过分关注超我，因为那样反而滋长它。接受本我，不去对抗一些出厂设置。让自我积极探索，回答「我是谁」的问题。</p>
<p>来自底层、最为无条件的信任，只能自己供给。<strong>接受任何面貌的自己，不推诿，不辩解，不自我攻击。</strong>在主动成长之前，不要求，不期待，然后才会放胆去探索。<strong>放弃要求并不意味着放任自流，因为你相信自己会选择合适的道路，会对自己负责，会匹配得起生命本身应有的重量。</strong></p>
<h3 id="u5C0A_u91CD"><a href="#u5C0A_u91CD" class="headerlink" title="尊重"></a>尊重</h3><p>因为爱你，所以视你为一个独立而完整的人。相信你有能力解决属于你的问题，探索出一条未知但属于你的道路。我作为一个旅伴，不去动那些想改变你的念头，即便觉得那些改变可能对你比较好——因为只有你能决定哪些是真正的好，哪些改变你愿意发生。你是自己的主导者，别人不能代替你成为自己，谁也不行。如果你愿意，如果你向我表达，我很乐意陪你一起探索。</p>
<p>因为爱自己，我视自己为一个独立而完整的人。别人不能代替我成为自己，谁也不行。</p>
<p><strong>对自己负起全部的责任。</strong></p>
<p>我对自己说。</p>
<h3 id="u7406_u89E3"><a href="#u7406_u89E3" class="headerlink" title="理解"></a>理解</h3><p>开始喜欢一个人时，最直观的疯狂和努力大概就是「了解」。</p>
<p>了解对方的喜好，看什么书和电影，喜欢吃什么，去过的地方，值得骄傲的经历，以后的打算……日常再琐碎的细节，都会被仔仔细细、反反复复地探究。我们期望通过这些探究，建立起关于对方的庞大数据库，以便加快关于这人的一切信息的处理速度，识别出各自模式，生成与对方的相处模式——了解慢慢变成了理解。而人又是变化的，所以理解这个工程并没有停歇的一天。</p>
<p>因为爱你，想用一辈子的时间去理解你，成为关于「你」的专家。我想，当我真正理解你，这段关系的任何走向、任何形式和任何结果，我应该都能接受。因为我会明白你怎么一步一步走到这一天。理解最终带来的是自由吧。</p>
<p>但是理解很难。</p>
<p>我们常常用「想象」、「推测」代替理解。<strong>理解需要通过真实场景下真实发生的言语行为，以及隐藏在表象之下的弦外之音、模糊的线索去深入同理、思考、判断、修正。</strong></p>
<p>因为爱自己，面对自己时选择慢下来，不逃避，有耐心。</p>
<p>人最擅长自欺欺人，所以真正的理解总是多少伴随着恐惧、失落、争执、误解、孤独。就是因为得来不易，所以这样的心意才显得可贵。比起一时的眉目传情、心意相通，尝试去理解的努力会让人更接近爱，那是一种练习，一种付出，一种耕耘。</p>
<p>在成为他人的专家之前，祝我们都成为自己的「专家」。</p>
<h3 id="u521D_u5FC3"><a href="#u521D_u5FC3" class="headerlink" title="初心"></a>初心</h3><p>爱上一个人，总是有初心的，不论自己能不能说得清楚（大部分情况都说不清楚）。</p>
<p>那份初心，大概都会来自某种与众不同。</p>
<p>喜欢你，是因为你敢于坚持某些东西，敢于跟普世保持距离，敢于在某些大家可能忽视的方面做个异类。喜欢你，是因为你拥有独特的生命力，呈现出独特的生命状态。</p>
<p>因为爱你，所以珍视这些与众不同。希望你能继续保护好那些你不曾妥协、拼命守护的东西，那些在经历起伏后，会感慨好在自己守住了的美好而脆弱的东西。</p>
<p>因为爱自己，我也要慢慢找出自己一直在努力守护的东西。我们有那么多东西可以妥协，也不得不妥协，偏偏就是这些如此弱小的东西，我们花费了几乎所有要来保护。感谢自己守护住了一些纯粹和好奇，面对新的处境时不后退，努力学习和适应，才有了今天写这篇文章的自己。</p>
<p>因为爱自己，我会继续打磨三观，让初心跳动到每一个当下，让自己可以时时为它代言。</p>
<h3 id="u76F8_u5904"><a href="#u76F8_u5904" class="headerlink" title="相处"></a>相处</h3><p>比爱更难的是理解，比理解更难的是相处。安心、长久的陪伴，前提是双方不会想逃离。如果一味严肃、苛责、不会表达、不愿交流，谁都会被吓跑的。</p>
<p>因为爱你，我愿意倾听，尽力去感受你的情绪和需要，理解发生了什么，你需要面对的是什么，给予温和但有力量的回应，然后才是一起分析和解决问题。不应该指责你做得不够好，因为已经看到了那么努力的尝试。你已经足够努力了，我也不会做得比你好，不过如果你愿意，我们可以一起再试试看。</p>
<p>因为爱自己，所以事事应该先安慰和鼓励自己——情绪平复以后，问题我会自己解决好的。我不是一个生性敏感而丰富的人，倾听/沟通/共情都需要大量练习。对别人对自己都是，要保持练习。</p>
<p>因为爱你，应该尽量在相处中让你时时都感到「放松」。首先放下自己的期盼和要求，相信你不是不重视我，只是需要空间先处理好自己的各种事物，先跟自己好好相处。</p>
<p>所以，跟自己的相处之道，大概也是尽量让自己「放松」。「放松」不是一种命令，甚至无法成为目标，因为它是一种悖论式的存在。<strong>真正的包容，也包容不包容；不要求放松，可能就能放松下来。一旦放松，有趣也就会发生。</strong></p>
<h3 id="u8FC7_u7A0B"><a href="#u8FC7_u7A0B" class="headerlink" title="过程"></a>过程</h3><p>天长地久还是曾经拥有？</p>
<p><strong>死亡这个事实一早就劝诫我们，生命的过程远远比结果重要。</strong></p>
<p>爱可能始于一个激动人心的确认和开始，有可能终结于一个无法释怀的离别。但那些都不是爱的主体。爱的主体是两人的关系，建立在经年累月的相处和理解之上的关系，即使不在身边内心也会留有对方位置的关系。<strong>爱既不是最终的结果，也不是开篇的承诺。爱其实存在于关系建立和变化的全程。</strong>所以它一定不如预想的跌宕起伏，因为生活的大多数时光总是平淡的。但爱就是在一起，或身或心。</p>
<p>喜欢你，是因为你身上有达成某些结果的能力，而不是因为你口袋里装着这些结果。所以，有自我疗愈和成长的能力，比成熟更重要；有对美的理解和坚持，比颜值更重要；是否能鉴别有趣的问题并愿意费心思索，比聪明重要；看待财富的观念和赚钱能力，比有多少钱重要……</p>
<p>既然爱是过程，何必计较结果。向死而生的人类，在生命流逝的过程中，暂时无视死亡的结果，转而积极地探索可能性，才创造出了种种奇迹。</p>
<p>因为爱你，所以我选择 being in the present，尽可能心无旁骛地陪伴，让有你的时光加倍值得回味。</p>
<p><strong>因为爱自己，所以时时跟自己在一起，明白此刻正在经历什么，全身心地投入，未来不迎，当时不杂，既过不恋。</strong></p>
<p>因为爱自己，所以明白并不是我不好，也不是世界充满险恶无情，而是还没有修炼到很快找到或切换到一个最适合的角度去看待当下。当熟练之后，更多的时间精力就能从警惕、自我保护、应激中节省出来，去好好欣赏路途的景致，结识同样寂寞但心怀好奇的旅伴，去感受这样的旅途带给我什么样独特的感受。</p>
<h2 id="u5F53_u6211_u771F_u6B63_u5F00_u59CB_u7231_u81EA_u5DF1"><a href="#u5F53_u6211_u771F_u6B63_u5F00_u59CB_u7231_u81EA_u5DF1" class="headerlink" title="当我真正开始爱自己"></a>当我真正开始爱自己</h2><p>感谢今年出现在我生命里我喜爱的人。让我知道自己还有能力去爱，让我有动力成为更好的自己。</p>
<p>感谢今年出现在我生命里我避之不及的人。让我懂得珍惜自己身上那些弥足珍贵的东西。让我懂得人生有限，应该把最美好的自己，留给合适的人和事。</p>
<p>爱真的不是放肆，也不是克制，而是深思熟虑、身体力行的努力，可能称不出重量的努力。</p>
<p><strong>爱不应允幸福，爱是原原本本回到自己身上。问问自己，在这个人/自己身边，能否有勇气清楚看待自己，不屈从，不顺应，不自欺，但也不畏惧改变。</strong></p>
<p>最后，用卓别林给自己的诗来正式开启爱自己的旅途吧：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#24403;&#25105;&#30495;&#27491;&#24320;&#22987;&#29233;&#33258;&#24049;&#65292;&#10;&#25105;&#25165;&#35748;&#35782;&#21040;&#65292;&#25152;&#26377;&#30340;&#30171;&#33510;&#21644;&#24773;&#24863;&#30340;&#25240;&#30952;&#65292;&#10;&#37117;&#21482;&#26159;&#25552;&#37266;&#25105;&#65306;&#27963;&#30528;&#65292;&#19981;&#35201;&#36829;&#32972;&#33258;&#24049;&#30340;&#26412;&#24515;&#12290;&#10;&#20170;&#22825;&#25105;&#26126;&#30333;&#20102;&#65292;&#36825;&#21483;&#20570;&#12300;&#30495;&#23454;&#12301;&#12290;&#10;&#10;&#24403;&#25105;&#30495;&#27491;&#24320;&#22987;&#29233;&#33258;&#24049;&#65292;&#10;&#25105;&#25165;&#25026;&#24471;&#65292;&#25226;&#33258;&#24049;&#30340;&#24895;&#26395;&#24378;&#21152;&#20110;&#20154;&#65292;&#10;&#26159;&#22810;&#20040;&#30340;&#26080;&#31036;&#65292;&#23601;&#31639;&#25105;&#30693;&#36947;&#65292;&#26102;&#26426;&#24182;&#19981;&#25104;&#29087;&#65292;&#10;&#37027;&#20154;&#20063;&#36824;&#27809;&#26377;&#20570;&#22909;&#20934;&#22791;&#65292;&#10;&#23601;&#31639;&#37027;&#20010;&#20154;&#23601;&#26159;&#25105;&#33258;&#24049;&#65292;&#10;&#20170;&#22825;&#25105;&#26126;&#30333;&#20102;&#65292;&#36825;&#21483;&#20570;&#12300;&#23562;&#37325;&#12301;&#12290;&#10;&#10;&#24403;&#25105;&#24320;&#22987;&#29233;&#33258;&#24049;&#65292;&#10;&#25105;&#19981;&#20877;&#28212;&#27714;&#19981;&#21516;&#30340;&#20154;&#29983;&#65292;&#10;&#25105;&#30693;&#36947;&#20219;&#20309;&#21457;&#29983;&#22312;&#25105;&#36523;&#36793;&#30340;&#20107;&#24773;&#65292;&#10;&#37117;&#26159;&#23545;&#25105;&#25104;&#38271;&#30340;&#36992;&#35831;&#12290;&#10;&#22914;&#20170;&#65292;&#25105;&#31216;&#20043;&#20026;&#12300;&#25104;&#29087;&#12301;&#12290;&#10;&#10;&#24403;&#25105;&#24320;&#22987;&#30495;&#27491;&#29233;&#33258;&#24049;&#65292;&#10;&#25105;&#25165;&#26126;&#30333;&#65292;&#25105;&#20854;&#23454;&#19968;&#30452;&#37117;&#22312;&#27491;&#30830;&#30340;&#26102;&#38388;&#65292;&#10;&#27491;&#30830;&#30340;&#22320;&#26041;&#65292;&#21457;&#29983;&#30340;&#19968;&#20999;&#37117;&#24688;&#22914;&#20854;&#20998;&#12290;&#10;&#30001;&#27492;&#25105;&#24471;&#20197;&#24179;&#38745;&#12290;&#10;&#20170;&#22825;&#25105;&#26126;&#30333;&#20102;&#65292;&#36825;&#21483;&#20570;&#12300;&#33258;&#20449;&#12301;&#12290;&#10;&#10;&#24403;&#25105;&#24320;&#22987;&#30495;&#27491;&#29233;&#33258;&#24049;&#65292;&#10;&#25105;&#19981;&#20877;&#29306;&#29298;&#33258;&#24049;&#30340;&#33258;&#30001;&#26102;&#38388;&#65292;&#10;&#19981;&#20877;&#21435;&#21246;&#30011;&#20160;&#20040;&#23439;&#20255;&#30340;&#26126;&#22825;&#12290;&#10;&#20170;&#22825;&#25105;&#21482;&#20570;&#26377;&#36259;&#21644;&#24555;&#20048;&#30340;&#20107;&#65292;&#10;&#20570;&#33258;&#24049;&#28909;&#29233;&#65292;&#35753;&#24515;&#27426;&#21916;&#30340;&#20107;&#65292;&#10;&#29992;&#25105;&#30340;&#26041;&#24335;&#65292;&#20197;&#25105;&#30340;&#38901;&#24459;&#12290;&#10;&#20170;&#22825;&#25105;&#26126;&#30333;&#20102;&#65292;&#36825;&#21483;&#20570;&#12300;&#21333;&#32431;&#12301;&#12290;&#10;&#10;&#24403;&#25105;&#24320;&#22987;&#30495;&#27491;&#29233;&#33258;&#24049;&#65292;&#10;&#25105;&#24320;&#22987;&#36828;&#31163;&#19968;&#20999;&#19981;&#20581;&#24247;&#30340;&#19996;&#35199;&#12290;&#10;&#19981;&#35770;&#26159;&#39278;&#39135;&#21644;&#20154;&#29289;&#65292;&#36824;&#26159;&#20107;&#24773;&#21644;&#29615;&#22659;&#65292;&#10;&#25105;&#36828;&#31163;&#19968;&#20999;&#35753;&#25105;&#36828;&#31163;&#26412;&#30495;&#30340;&#19996;&#35199;&#12290;&#10;&#20174;&#21069;&#25105;&#25226;&#36825;&#21483;&#20570;&#12300;&#36861;&#27714;&#20581;&#24247;&#30340;&#33258;&#31169;&#33258;&#21033;&#12301;&#65292;&#10;&#20294;&#20170;&#22825;&#25105;&#26126;&#30333;&#20102;&#65292;&#36825;&#26159;&#12300;&#33258;&#29233;&#12301;&#12290;&#10;&#10;&#24403;&#25105;&#24320;&#22987;&#30495;&#27491;&#29233;&#33258;&#24049;&#65292;&#10;&#25105;&#19981;&#20877;&#24635;&#24819;&#30528;&#35201;&#27704;&#36828;&#27491;&#30830;&#65292;&#19981;&#29359;&#38169;&#35823;&#12290;&#10;&#25105;&#20170;&#22825;&#26126;&#30333;&#20102;&#65292;&#36825;&#21483;&#20570;&#12300;&#35878;&#36874;&#12301;&#12290;&#10;&#10;&#25105;&#24403;&#24320;&#22987;&#30495;&#27491;&#29233;&#33258;&#24049;&#65292;&#10;&#25105;&#19981;&#20877;&#32487;&#32493;&#27785;&#28346;&#20110;&#36807;&#21435;&#65292;&#10;&#20063;&#19981;&#20877;&#20026;&#26126;&#22825;&#32780;&#24551;&#34385;&#65292;&#10;&#29616;&#22312;&#25105;&#21482;&#27963;&#22312;&#19968;&#20999;&#27491;&#22312;&#21457;&#29983;&#30340;&#24403;&#19979;&#65292;&#10;&#20170;&#22825;&#65292;&#25105;&#27963;&#22312;&#27492;&#26102;&#27492;&#22320;&#65292;&#10;&#22914;&#27492;&#26085;&#22797;&#19968;&#26085;&#12290;&#36825;&#23601;&#21483;&#12300;&#23436;&#32654;&#12301;&#12290;&#10;&#10;&#24403;&#25105;&#24320;&#22987;&#30495;&#27491;&#29233;&#33258;&#24049;&#65292;&#10;&#25105;&#26126;&#30333;&#65292;&#25105;&#30340;&#24605;&#34385;&#35753;&#25105;&#21464;&#24471;&#36139;&#20047;&#21644;&#30149;&#24577;&#65292;&#10;&#20294;&#24403;&#25105;&#21796;&#36215;&#20102;&#24515;&#28789;&#30340;&#21147;&#37327;&#65292;&#10;&#29702;&#26234;&#23601;&#21464;&#25104;&#20102;&#19968;&#20010;&#37325;&#35201;&#30340;&#20249;&#20276;&#65292;&#10;&#36825;&#31181;&#32452;&#21512;&#25105;&#31216;&#20043;&#20026;&#65292;&#12300;&#24515;&#30340;&#26234;&#24935;&#12301;&#12290;&#10;&#10;&#25105;&#20204;&#26080;&#39035;&#20877;&#23475;&#24597;&#33258;&#24049;&#21644;&#20182;&#20154;&#30340;&#20998;&#27495;&#65292;&#10;&#30683;&#30462;&#21644;&#38382;&#39064;&#65292;&#10;&#22240;&#20026;&#21363;&#20351;&#26143;&#26143;&#26377;&#26102;&#20063;&#20250;&#30896;&#22312;&#19968;&#36215;&#65292;&#10;&#24418;&#25104;&#26032;&#30340;&#19990;&#30028;&#65292;&#10;&#20170;&#22825;&#25105;&#26126;&#30333;&#65292;&#10;&#36825;&#23601;&#26159;&#12300;&#29983;&#21629;&#12301;&#12290;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://7xjpra.com1.z0.glb.clouddn.com/love_yourself.jpg" alt=""></p>]]>
    
    </summary>
    
      <category term="CriticalThinking" scheme="http://uegeek.com/tags/CriticalThinking/"/>
    
      <category term="HackYourself" scheme="http://uegeek.com/tags/HackYourself/"/>
    
      <category term="Love" scheme="http://uegeek.com/tags/Love/"/>
    
      <category term="大哉问" scheme="http://uegeek.com/tags/%E5%A4%A7%E5%93%89%E9%97%AE/"/>
    
      <category term="叽歪" scheme="http://uegeek.com/categories/%E5%8F%BD%E6%AD%AA/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[大哉问01 - 什么样的时间观值得拥有？]]></title>
    <link href="http://uegeek.com/171126TimePerspective.html"/>
    <id>http://uegeek.com/171126TimePerspective.html</id>
    <published>2017-11-26T01:12:43.000Z</published>
    <updated>2017-12-09T01:14:57.022Z</updated>
    <content type="html"><![CDATA[<p><img src="http://7xjpra.com1.z0.glb.clouddn.com/dbproductivity.jpg" alt=""></p>
<a id="more"></a>  
<blockquote>
<p>我们自己虚构了一些问题,然后又炮制了一些答案。        </p>
<p>——西蒙娜·德·波伏娃</p>
</blockquote>
<p><a href="http://www.uegeek.com/171112-HowToAskGoodQuestion.html" target="_blank" rel="external">HackYourself 大哉问系列</a>第一篇，我们来讨论「时间」。</p>
<p>为什么要选择这么虚无的话题呢？我在想，人大概有三大限制：时间，空间，认知资源。从这三个角度重新思考我们这种脆弱又作死的物种，大概会挺有意思。</p>
<p>虽然一直身处于奔流的时间长河中，但是我们对时间的汹涌却（常常）浑然不觉。面对时间这种无人可以掌控的东西，不禁想问：</p>
<blockquote>
<p>我们应该持有什么样的时间观？</p>
</blockquote>
<p>时间观是关于时间的观念，关于时间和自己的关系，如何理解时间，如果依据时间做出种种决策，如何对待时间…… 这里讨论的不是时间管理。毕竟，如果对时间本身都还没有自己的理解，凭什么说人家已经是「朋友」，又怎么去管理它呢？</p>
<p>心理学家津巴多对「时间」做了三十多年的研究，他呼吁我们认真对待自己所持有的时间观念：</p>
<blockquote>
<p>一个健康的时间观，能让你以人生的长度来决定如何做最优化的决策。一个平衡的时间观，是高度的积极的过去观，中等偏高的积极的未来观，以及温和的选择性地享乐但不冲动反应的现在观。换言之，拥有一个平衡的时间观，就是为自己的过去骄傲，有自信；对未来有高期望但并不好高骛远，对于当下的自己，适当地享受生活，但既不冲动也不是随叫随到的无计划性。 ——津巴多</p>
</blockquote>
<p><img src="https://cdn.dribbble.com/users/89889/screenshots/3658659/toolittletime-dribbble.gif" alt=""></p>
<h2 id="u7ED9_u65F6_u95F4_u91CD_u65B0_u627E_u4E00_u4E2A_u6BD4_u55BB"><a href="#u7ED9_u65F6_u95F4_u91CD_u65B0_u627E_u4E00_u4E2A_u6BD4_u55BB" class="headerlink" title="给时间重新找一个比喻"></a>给时间重新找一个比喻</h2><p>对我而言，时间是什么？</p>
<p>除了从小被教育的「时间就是金钱」，除了日渐步入「Time famine」的深渊，我对时间最大的印象大概就是「无情」了，像器物一般的无情。</p>
<h3 id="u610F_u4E49/_u884C_u52A8_u6807_u5C3A"><a href="#u610F_u4E49/_u884C_u52A8_u6807_u5C3A" class="headerlink" title="意义/行动标尺"></a>意义/行动标尺</h3><p>与无限的时间相比，人太弱小太可怜，不得不沿着单向、不可逆的时间轴往前奔走。如果不是因为生命的时间有限，谁会在意生存、变化、权力、美、爱、有没有后代？印刻在出厂设置中的生命长度，让（有自我意识的）生命体开始珍视自己，有了尽力让生命存在、焕发的意念，也就滋长了种种欲望。<strong>所有的欲望，都是「生命有限」这个事实的形容词。</strong></p>
<p>因为生命短促，人才会孜孜不倦地追求目标和意义，好让这短暂的时间之旅的残存能够消散得慢一点。</p>
<p>看起来好像是时间定义了生命，其实，是生命所的持续时间让人有必要以人的尺度来定义时间：一万年对人来说不重要，一豪秒对人来说也不重要。</p>
<p>我们太习惯以人活着能够经常体验到的时间单位去观察万事万物，也太习惯以满足当下的需要为理由来消耗时间。这同时也提醒我们，只需要稍微转动一下时间标尺的角度，我们观察世界的框架可能就会大有不同：</p>
<blockquote>
<p>如果有一辈子的时间来做某件事会怎样？</p>
<p>如果某件事只会持续 1 秒，我对它的态度会有什么不同？</p>
<p>如果我与某个人共有 +∞ 的时间（一直相处）会怎样？如果共有时间为 0 （没有交集）会怎样？</p>
</blockquote>
<h3 id="u53EF_u80FD_u6027_u7684_u57F9_u517B_u76BF"><a href="#u53EF_u80FD_u6027_u7684_u57F9_u517B_u76BF" class="headerlink" title="可能性的培养皿"></a>可能性的培养皿</h3><p>时间可能是全能的神 最大/唯一武器。</p>
<p>因为无限，所以造物主根本不需要呕心沥血去「设计」生命的所有细节，而是将一切都交给时间，给定初始值，无限演化下去。不论过程中出现了什么，生命轮回也好，沧海桑田也罢，生机勃勃也好，万籁俱寂也罢，都没有所谓，都只是演化过程的一个片段。</p>
<p>没有秘诀。</p>
<p>上帝甚至不需要全知全能——只要交给无限的时间就好。只要时间足够长，可能性就不会穷尽。</p>
<p>我们常常说：「我没有时间了」、「时间不够」、「你有空吗？」……</p>
<p>有趣的是，<strong>时间本身不包含任何东西</strong>。时间只是度量单位，只是「容器」。我们问「你有时间吗？」，是不是好像在问：「你有厘米吗？」、「你有分贝吗？」。里面什么都没有。</p>
<p>真正的内容，是时间单位内我们投入的注意力、能量、情感、行动等等。我们不拥有时间，我们只拥有注意力、能量、情感……时间只是培养皿，想要培养出有机体，需要加培养液，不是吗？</p>
<h2 id="u6709_u610F_u4E49_u7684_u65F6_u95F4_u89C2"><a href="#u6709_u610F_u4E49_u7684_u65F6_u95F4_u89C2" class="headerlink" title="有意义的时间观"></a>有意义的时间观</h2><blockquote>
<p>什么样的时间观能带来更大收益？</p>
</blockquote>
<p>这是一个倾向性很明显的问题。我们似乎得先考虑：</p>
<ul>
<li>什么是「收益」？它一定是「结果」吗？（结果可能只是资源，不是目标本身）</li>
<li>要在多大时间尺度/周期内考虑？</li>
</ul>
<p>时间被如此定义，是因为生命体的有限。那生命又是个什么东西？</p>
<blockquote>
<p>生命似乎是物质的有序和有规律的行为，它不是完全基于从有序走向无序的倾向，而是部分基于得到保持的现存秩序。……生命有机体如何避免衰退为惰性「平衡」状态呢？通过新陈代谢。……新陈代谢的本质是使有机体成功消除了它活着时不得不产生的所有熵。 —— 薛定谔，「生命是什么」</p>
</blockquote>
<p>生命体的伟大之处，在于（一定时间内）抵御了混沌无序的倾向，制造出（或者说吸收了）「负熵」。</p>
<p>如果回归到这一层含义，对人有意义的「收益」，是不是也可以理解为「有意义的秩序」？</p>
<p>暂时抛开时间周期的问题，来想想那些时间感消散的时刻。比如说，专注地处于心流状态的时候，在类似做梦这种意识混沌的时候，我们感受不到时间的流逝。身处这些时刻，是不是反而能更真实、直接地触摸到生命本身？</p>
<p>回到上面的问题：怎样才算最理想的时间收益？对我而言大概是：</p>
<blockquote>
<p>在有意识的所有时刻里，都生机勃勃：投入、沉浸、痛并快乐、见过去所未见，体验一个生命可能抵达的深度。更重要的是——最终塑造出自己，并且留下能延续一段时间、传递某种深度的载体。</p>
</blockquote>
<p>那么，可以如何去调控时间以及对时间的感觉？如何放大时间的价值？</p>
<p>似乎有两种办法：<strong>融于当下，或者穿越时间</strong>。</p>
<p><strong>融于当下</strong>，是指让时间感消失——沉浸到时间里面，<strong>让更多的时间处于聚焦/有序而不是耗散状态</strong>。也就是说，吃饭时就心无旁骛，与伴侣共处时就交心会意，思考时就清理杂乱的欲望，悲伤时就不要阻止眼泪……努力让真正重要的事情的「过程价值」大于「结果价值」。毕竟，我们全身心经历的是每一分每一秒，应该更多地为全程的福祉考虑，而不只是获得结果的那一刹那的高峰体验。</p>
<p><strong>穿越时间</strong>，是指留下能够抵御时间侵袭的「晶体」，可以是文字、记录、作品、人生信条等等，它是你拼尽全力，从混沌无序中凝练出来的「恰好」和「最好」，它们是（哪怕只有一丢丢）有意义的秩序，可以穿越（哪怕只有一丢丢）时间长河而不被冲刷得面目全非。</p>
<h2 id="u4FEE_u70BC_u751F_u547D_u529B"><a href="#u4FEE_u70BC_u751F_u547D_u529B" class="headerlink" title="修炼生命力"></a>修炼生命力</h2><p>于是，时间似乎是焕发生命力的养料和工具套件。</p>
<p><strong>让我们把时间当做意义过滤器</strong>。哪些事情哪怕只有 1 秒，我们也会珍惜？哪些信息，出现在时间的源头？哪些内容，能真正穿越时间的洗礼？什么目标，值得用大时间周期去追逐？</p>
<p><strong>让我们把时间当做培养皿</strong>。在时间这个容器中，我们到底需要倾注些什么？希望锻造出什么？投入产出是否匹配？怎样把其他资源转化为时间资源？如果花的每一分钱，都值时间价值；如果花的每一分钟，都超出经济价值，那大概就是世界上最好的投资。</p>
<p><strong>让我们把时间当做生命过程本身</strong>。在时间流逝中，尽可能去抵御熵增，提炼有意义的秩序，印证我们的存在和延续——不只是基因和生命体的延续，还是探索精神、思考深度的延续，是对自然和美的敬畏的延续。</p>
<p>这么看来，其实重要的不是时间能送我们到达哪里，真正应该珍惜的，是时间给了我们修炼的机会——<strong>修炼一种在任何情境下都让自己避免熵增、有所获益的能力</strong>，这种神奇能力，大概就是生命力。</p>
<p>生命那只随机的大手会把我们降落在哪里，没有人知晓。但不论跌落在哪里，都要生生不息，甚至能留下穿越时间的智慧晶体。</p>
<p>这是生命的责任。</p>
<h3 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h3><ul>
<li><a href="https://book.douban.com/subject/5246820/" target="_blank" rel="external">津巴多时间心理学</a></li>
<li><a href="https://book.douban.com/subject/26309060/" target="_blank" rel="external">生命是什么</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://7xjpra.com1.z0.glb.clouddn.com/dbproductivity.jpg" alt=""></p>]]>
    
    </summary>
    
      <category term="CriticalThinking" scheme="http://uegeek.com/tags/CriticalThinking/"/>
    
      <category term="HackYourself" scheme="http://uegeek.com/tags/HackYourself/"/>
    
      <category term="大哉问" scheme="http://uegeek.com/tags/%E5%A4%A7%E5%93%89%E9%97%AE/"/>
    
      <category term="时间" scheme="http://uegeek.com/tags/%E6%97%B6%E9%97%B4/"/>
    
      <category term="叽歪" scheme="http://uegeek.com/categories/%E5%8F%BD%E6%AD%AA/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[用问题对话虚无 —— HackYourself 大哉问系列]]></title>
    <link href="http://uegeek.com/171112-HowToAskGoodQuestion.html"/>
    <id>http://uegeek.com/171112-HowToAskGoodQuestion.html</id>
    <published>2017-11-12T02:52:24.000Z</published>
    <updated>2017-11-14T02:56:15.542Z</updated>
    <content type="html"><![CDATA[<p><img src="http://7xjpra.com1.z0.glb.clouddn.com/question-title.jpg" alt=""></p>
<a id="more"></a>  
<blockquote>
<p>我们自己虚构了一些问题,然后又炮制了一些答案。        </p>
<p>——西蒙娜·德·波伏娃 「人都是要死的」</p>
</blockquote>
<p>经过低产的一年，HackYourself 准备恢复（双）周更的频率。</p>
<p>欢迎围观 00  的新坑：大哉问系列。</p>
<p>什么是「大哉问」？</p>
<blockquote>
<p>林放问礼之本。子曰：“大哉问！礼，与其奢也，宁俭；丧，与其易也，宁戚。” ——论语 八佾篇第三</p>
</blockquote>
<p>大哉问（据说）出自论语，意思是「这是一个非常棒的问题」、「你的问题意义重大啊」。</p>
<p>这会是一个自问自答的系列。正如「学什么」比「怎么学」更重要，「问什么问题」比「如何回答」更重要。在之前的读书会尝试过「以问题驱动」的读书法，效果不错。加上之前有过「问题作为人生地图」的思考，所以有了大哉问系列的想法。</p>
<p>人生的种种困惑、迷茫、无力、混沌，只会随着复杂度指数上升的世界而加重。用问题作为线索，与趋于无序、混乱的环境展开对话，也许是一条通幽的小径吧。</p>
<h2 id="u4E3A_u4EC0_u4E48_u8981_u591A_u95EE_u597D_u95EE_u9898_uFF1F"><a href="#u4E3A_u4EC0_u4E48_u8981_u591A_u95EE_u597D_u95EE_u9898_uFF1F" class="headerlink" title="为什么要多问好问题？"></a>为什么要多问好问题？</h2><blockquote>
<p>为什么与问人类如何作出好决策相比，我们更不愿意问人类如何找到好目标？——马奇</p>
</blockquote>
<p>人生好像总是有无穷的问题等待解决。</p>
<p>问题永远解决不完，这其实不是困扰。真正会造成困扰的，是我们没有意识到：<strong>要解答哪些问题，在某种程度上可以自主选择</strong>。用主动的姿态去探索问题，更是一种选择。</p>
<p>管理大师马奇的发问提醒我们，好问题多么可贵 —— 跟解决方案（决策）相比，更稀缺的是问对的问题（目标）。</p>
<h3 id="u6700_u5927_u5316_u8D44_u6E90_u914D_u7F6E"><a href="#u6700_u5927_u5316_u8D44_u6E90_u914D_u7F6E" class="headerlink" title="最大化资源配置"></a>最大化资源配置</h3><p>先用一个功利的视角来解读。</p>
<p>多问好问题的隐含前提是：<strong>人的寿命太短，精力太宝贵</strong>。</p>
<p>每一个问题都可能是时间和精力的黑洞，如果我们自己不选择要面对、要解答的问题，马上就会被一大堆问题塞满——<strong>它们可能来自雇佣你、跟你做时间交易的 boss，来自无数生命力顽强的模因（Meme），来自无孔不入想让你做出购买决策的广告，来自不停侵犯个人边界的重要或不重要的他人，来自其实与你完全无关但是能逗乐大脑的垃圾信息</strong>……</p>
<p>如果把精力和注意力比作可以调动的资源，在滔天的信息洪流之中，我们脑子里工作记忆这一丁点儿资源，实在太过贫乏，必需得像个守财奴一样死死守护它。</p>
<p>资源配置的目的，无非是更好地转化为产出、达成目标。在这里，「目标」是一个大坑。每个人看似都在为生活奔忙，可是每当夜深人静扪心自问：我每天到底都在干嘛？</p>
<p>嗯，我到底在干嘛 —— 也是一个问题。</p>
<p>如果能经常自己给自己设定问题，作为「产出/目的」的重要记录和反馈，并且<strong>有意识地、主动</strong>尝试着寻找答案，「精力」这笔账是不是就没那么糊涂？</p>
<h3 id="u6784_u7B51_u610F_u4E49_uFF0C_u62B5_u6297_u65E0_u5E8F_u548C_u865A_u65E0"><a href="#u6784_u7B51_u610F_u4E49_uFF0C_u62B5_u6297_u65E0_u5E8F_u548C_u865A_u65E0" class="headerlink" title="构筑意义，抵抗无序和虚无"></a>构筑意义，抵抗无序和虚无</h3><p>再来切换一个不那么功利的视角。</p>
<p>人生本无意义。不停追问意义，这大概是人的生理缺陷。</p>
<p>意义无法按图索骥找到，也不能靠机缘偶遇，而是一点一点提炼和构筑出来的。</p>
<p>让好问题成为人生线索，通过经常追问各种各样的问题，我们会更清楚自己是什么样的人、看重什么、被什么打动、受什么困扰。这也是打磨三观，寻找意义和自我的过程。</p>
<blockquote>
<p>What Do I Stand For?</p>
</blockquote>
<p>我为谁（什么）代言？？<strong>这是绝对不能交给他人来回答的问题。</strong></p>
<p>面对这种终极问题，谁不想回避呢？学校也从来不教该如何解答这些问题。可是它们就是阴魂不散啊，似乎每一次逃避，都往虚无多走了一步。到底有没对错？应该坚持什么？每天的所作所为何以为继？</p>
<p>万事万物都有一个宿命般的终点：无序。要用有限的生命和稀缺的注意力对抗无序，可能真的没有太多办法，我会试着<strong>用问题编制「有序」的骨架，用沉浸和心流附着成为「有序」的血肉</strong>。</p>
<p>在问题的牵引之下，希望我们都能迭代出令自己满意的答案，交出人生答卷。当然，给自己设计人生问卷，更为重要。</p>
<h3 id="u7559_u4E0B_u4E00_u4E9B_u6709_u8DA3_u7684_u75D5_u8FF9"><a href="#u7559_u4E0B_u4E00_u4E9B_u6709_u8DA3_u7684_u75D5_u8FF9" class="headerlink" title="留下一些有趣的痕迹"></a>留下一些有趣的痕迹</h3><p>既然问出了问题，总是会试着去思考、试验、回答。有趣的问题，会激发行动，聚集同好。</p>
<p>如果一直只是做一个思想和内容消费者，似乎也不太有意思，为什么不留下一些痕迹呢？</p>
<p>如果能把这些问题的思考、迭代过程记录下来，大概也是对自己一个很好的交待吧？</p>
<h2 id="u4EC0_u4E48_u662F_u597D_u95EE_u9898_uFF1F"><a href="#u4EC0_u4E48_u662F_u597D_u95EE_u9898_uFF1F" class="headerlink" title="什么是好问题？"></a>什么是好问题？</h2><p>这本身就是个需要迭代思考的好问题。</p>
<p>如果只是为了装 x，很容易问出一些「终极问题」，比如「美是什么？」</p>
<p>在维特根斯坦看来，这些问题本身不成为问题。因为定义和解释是语言的范畴，只是一种语言的单向逻辑，它解决不了语言之外的问题。意义是终极解释，而「美」不存在语言上的终极解释。那些过于倚重范畴的问题、容易变成文字游戏的「终极」问题，我实在驾驭不来，还是少碰为好。</p>
<p>怎样识别好问题呢？一个思路是用归纳法，去搜集各种各样的问题，选出好的，然后总结出特征。</p>
<h3 id="u597D_u95EE_u9898_u7684_u7279_u5F81"><a href="#u597D_u95EE_u9898_u7684_u7279_u5F81" class="headerlink" title="好问题的特征"></a>好问题的特征</h3><p>00 先凭自己的经验和直觉，尝试总结好问题的特征：</p>
<ul>
<li>描述清晰</li>
<li>不容易回答，值得 go deep，能激发更高、更抽象层级的思考</li>
<li>指向有潜力的探索方向，牵引出有价值的回答，激发行动和带来改变</li>
<li>开放式，没有唯一答案，不同背景经历的人可能会有迥异的答案</li>
<li>或者是时代的大问题，或者是超越时空的普适性问题</li>
<li>可能不会单独出现，而是一组相关问题</li>
</ul>
<h3 id="u597D_u95EE_u9898_u7684_u6817_u5B50"><a href="#u597D_u95EE_u9898_u7684_u6817_u5B50" class="headerlink" title="好问题的栗子"></a>好问题的栗子</h3><p><a href="http://edge.org" target="_blank" rel="external">Edge</a> 网站每年都会提出一个 Big question，激发知识界的集体思维碰撞，今年已经是第 19 年。作为好问题的参考再合适不过：</p>
<table>
<thead>
<tr>
<th>YEAR</th>
<th>ANNUAL QUESTION</th>
</tr>
</thead>
<tbody>
<tr>
<td>2017</td>
<td>What Scientific Term or Concept Ought To Be More Widely Known?</td>
</tr>
<tr>
<td>2016</td>
<td>What Do You Consider The Most Interesting Recent [Scientific] News? What Makes It Important? </td>
</tr>
<tr>
<td>2015</td>
<td>What Do You Think about Machines That Think? </td>
</tr>
<tr>
<td>2014</td>
<td>What Scientific Idea Is Ready for Retirement? </td>
</tr>
<tr>
<td>2013</td>
<td>What <em>Should</em> We Be Worried about? </td>
</tr>
<tr>
<td>2012</td>
<td>What Is Your Favorite Deep, Elegant, or Beautiful Explanation? </td>
</tr>
<tr>
<td>2011</td>
<td>What Scientific Concept Would Improve Everybody’s Cognitive Toolkit? </td>
</tr>
<tr>
<td>2010</td>
<td>How Is the Internet Changing the Way You Think? </td>
</tr>
<tr>
<td>2009</td>
<td>What Will Change Everything? </td>
</tr>
<tr>
<td>2008</td>
<td>What Have You Changed Your Mind about? Why? </td>
</tr>
<tr>
<td>2007</td>
<td>What Are You Optimistic About? </td>
</tr>
<tr>
<td>2006</td>
<td>What Is Your Dangerous Idea? </td>
</tr>
<tr>
<td>2005</td>
<td>What Do You Believe Is True Even Though You Cannot Prove It? </td>
</tr>
<tr>
<td>2004</td>
<td>What’s Your Law? </td>
</tr>
<tr>
<td>2003</td>
<td>What Are the Pressing Scientific Issues for the Nation and the World, and What Is Your Advice on How I Can Begin to Deal With Them? </td>
</tr>
<tr>
<td>2002</td>
<td>What Is Your Question? … Why? </td>
</tr>
<tr>
<td>2001</td>
<td>What Questions Have Disappeared? What Now? </td>
</tr>
<tr>
<td>2000</td>
<td>What Is Today’s Most Important Unreported Story? </td>
</tr>
<tr>
<td>1999</td>
<td>What Is the Most Important Invention in the Past Two Thousand Years </td>
</tr>
<tr>
<td>1998</td>
<td>What Questions Are You Asking Yourself?</td>
</tr>
</tbody>
</table>
<p>在「为未知而教，为未来而学」一书中，作者提出了很多关于教育的好问题。他倡导多提出「有生命力的问题」。</p>
<p><img src="https://img3.doubanio.com/lpic/s28356404.jpg" alt=""></p>
<p>哲学家威廉·詹姆斯在「The Will to Believe」一文中，区分了「有生命力的假设」与「无生命力的假设」。有生命力的假设，指一个人在对自己而言具有真实性的问题中所发现的、值得尝试的各种可能性。</p>
<p>「有生命力的问题」与之类似，<strong>指能够为对话提供焦点和重要意义的一些探究性主题</strong>。教育者可以通过多种方式来引导：</p>
<ul>
<li>提供中心线索，包含一系列广泛的探究主题，学习者可以对此进行长时间的探究。</li>
<li>围绕着大概念而非答案来组织教学。比如：植物不同于动物，它们没有感觉系统，植物的各个部分怎么「知道」应该往哪里生长呢？</li>
<li><p>提出增殖性问题，让学习者积累一定经验后继续提出相应问题。比如：</p>
<ul>
<li>New Middle East 有可能实现吗？（地理）</li>
<li>人类基因组计划：是福是祸？（生物）</li>
<li>参与第一次世界大战那一代人为何在 20 年内又发动了第二次世界大战？（历史）</li>
<li>人为什么要结婚？（社会学和人类学）</li>
<li>什么是爱？（社会学、生物学、心理学和历史学）</li>
<li>奥运会是否改善了我们的价值观？（跨学科）</li>
</ul>
</li>
<li><p>找到问题的焦点。从提供一个问题的焦点开始：提供一个主题、题目或者对象，具有真实性和启发性。</p>
</li>
</ul>
<p>解决问题天生伴随着「提出问题」或「发现问题」。这一步教育的缺失，还是得靠自己来弥补。</p>
<p>关于什么是好问题，你有什么想跟大家分享的吗？欢迎留言。</p>
<h2 id="u5982_u4F55_u8BA9_u597D_u95EE_u9898_u6210_u4E3A_u6307_u5F15"><a href="#u5982_u4F55_u8BA9_u597D_u95EE_u9898_u6210_u4E3A_u6307_u5F15" class="headerlink" title="如何让好问题成为指引"></a>如何让好问题成为指引</h2><p>普利策奖得主、诺贝尔物理学奖获得者 Isidor Rabi 说，大部分目前在孩子放学回家后都会问一句：「你今天学到什么了吗？」但他的妈妈当年问的是：</p>
<blockquote>
<p>你今天有没有提出一个好问题？</p>
</blockquote>
<p>提问大概跟学习任何技能都一样，需要大量练习。如果能提出 100 个问题，总能选出最好的 10 个吧？多提问，常常反思是否提出了好的问题，提问这门「手艺」也会精湛起来。</p>
<p>提出问题仅仅是第一步，我们的目的是让问题真正起到穿针引线的作用。</p>
<h3 id="u7B5B_u9009_u95EE_u9898"><a href="#u7B5B_u9009_u95EE_u9898" class="headerlink" title="筛选问题"></a>筛选问题</h3><p>当我们试着列出一些问题，很快就会发现，这些问题的层次差别很大。</p>
<p>有的思考几分钟就能有大概的思路，有的可能穷极一生也给不出满意的答案。00 暂时以输出为目标，用问题思考周期粗暴地替代问题的复杂度/深度，将问题分成用 周/月/年 时间来思考的不同类型。</p>
<p>比如「编程思维有什么特点？可以如何改善生活？」可能需要至少一个月来思考和实践。</p>
<p>那么可以把平时收集的问题列表，标记上「周」或者「月」（如果可以作为年度主题就另外考虑了），如果以月为单位，看看能不能拆分为几个以周为单位的小问题，排出优先级，一周一个。</p>
<p>大哉问系列打算聚焦在这样的问题：</p>
<ul>
<li>思考和实践周期在 一周 ~ 五年 的问题</li>
<li>对知识体系、立场、思考本身有迭代作用</li>
<li>个人已有相关困惑和经验积累，待梳理总结</li>
<li>可以启发近期的行动</li>
</ul>
<h3 id="u7422_u78E8"><a href="#u7422_u78E8" class="headerlink" title="琢磨"></a>琢磨</h3><p>筛选好问题之后才是关键的一步。除了大块的工作时间之外，把问题作为最高优先级的事项：频繁加载问题到脑子中，让注意力尽量聚焦，围绕问题去收集信息、展开思路、建立连接、形成观点，等等。</p>
<p>怎样做到频繁加载问题呢？现在注意力实在太涣散了。我们可以尝试设定一些 Triggers：</p>
<table>
<thead>
<tr>
<th>IF</th>
<th>THEN</th>
</tr>
</thead>
<tbody>
<tr>
<td>周日午/晚饭后</td>
<td>挑选下周的问题，写在卡片上</td>
</tr>
<tr>
<td>出门/通勤</td>
<td>带上问题卡片，写下思路</td>
</tr>
<tr>
<td>跑步/散步</td>
<td>热身时加载问题，变跑边整理思路，回来写下笔记</td>
</tr>
<tr>
<td>周六</td>
<td>整理成文</td>
</tr>
</tbody>
</table>
<p>（注：跑步和散步对我特别有效，可能不适合大部分人）</p>
<h3 id="u8F93_u51FA"><a href="#u8F93_u51FA" class="headerlink" title="输出"></a>输出</h3><p>如果没有输出，等于没有思考过。</p>
<p>思考得再深入，也需要反馈。于是必需将思考做阶段性整理和输出，用来评估自己对问题的理解程度，收集大家的反馈，如果能有观点的碰撞就更好了。</p>
<p>用于收集反馈和评估的问题：</p>
<ul>
<li>这个问题是否激发了比较深度的思考？</li>
<li>思考、实践过程中我有哪些新收获？</li>
<li>如何转化为观念和行动上的改变？</li>
<li>发现了哪些待探索和深入的领域？</li>
<li>输出过程中遇到哪些问题？</li>
<li>这到底是不是一个好问题？</li>
<li>其他人有什么思路？</li>
</ul>
<h2 id="u6700_u540E"><a href="#u6700_u540E" class="headerlink" title="最后"></a>最后</h2><blockquote>
<p>Judge a man by his questions rather than by his answers. ― Voltaire 伏尔泰</p>
</blockquote>
<p>HackYourself 大哉问系列启动，欢迎提出你的好问题~</p>
<h3 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h3><ul>
<li><a href="https://www.edge.org/annual-questions" target="_blank" rel="external">Edge.org</a></li>
<li><a href="https://book.douban.com/subject/26586892/" target="_blank" rel="external">为未知而教,为未来而学</a></li>
<li><a href="http://blog.lifeway.com/explorethebible/blog/5-characteristics-of-a-good-question/" target="_blank" rel="external">5 Characteristics of a Good Question</a></li>
<li><a href="https://www.zhihu.com/question/21706038" target="_blank" rel="external">美是什么？是否存在客观的美？ 以及如何问出一个美的问题？ - 知乎</a></li>
<li><a href="https://www.zhihu.com/question/22810030" target="_blank" rel="external">知乎上的好问题有哪些？</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://7xjpra.com1.z0.glb.clouddn.com/question-title.jpg" alt=""></p>]]>
    
    </summary>
    
      <category term="CriticalThinking" scheme="http://uegeek.com/tags/CriticalThinking/"/>
    
      <category term="HackYourself" scheme="http://uegeek.com/tags/HackYourself/"/>
    
      <category term="大哉问" scheme="http://uegeek.com/tags/%E5%A4%A7%E5%93%89%E9%97%AE/"/>
    
      <category term="叽歪" scheme="http://uegeek.com/categories/%E5%8F%BD%E6%AD%AA/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[DeepLearning-3：如何在 Docker 里切换 Python 版本]]></title>
    <link href="http://uegeek.com/171021-DL3-How2UsePy3InDocker.html"/>
    <id>http://uegeek.com/171021-DL3-How2UsePy3InDocker.html</id>
    <published>2017-10-21T02:48:57.000Z</published>
    <updated>2017-11-14T02:51:30.908Z</updated>
    <content type="html"><![CDATA[<p><img src="http://7xjpra.com1.z0.glb.clouddn.com/dl-week0-title.png" alt=""></p>
<a id="more"></a> 
<p>​在 <a href="http://www.uegeek.com/170304-deeplearning-week0.html" target="_blank" rel="external">DeepLearning-1：神经网络和 Docker 入门</a> 一文中，我们介绍了 Docker 环境的安装和使用。</p>
<p>然后，00 遇到了 Python 的经典问题：Python 2 还是 Python 3？TensorFlow image 默认安装的是 Python2，如果想在 Jupyter Notebook 里使用 Python3，怎么办呢？</p>
<p>在 <a href="https://github.com/tensorflow/tensorflow/issues/10179" target="_blank" rel="external">TensorFlow 的 这个 Issue</a> 可以看到，2017年5月已经支持<a href="https://hub.docker.com/r/tensorflow/tensorflow/tags/" target="_blank" rel="external">用 tag 提供不同的 image</a>。比如 <code>tensorflow/tensorflow:latest-py3</code> 就可以（安装并）打开 Python3 环境。</p>
<p>结合目录映射的需要，输入命令完成映射并在 python3 环境下打开：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -p <span class="number">8888</span>:<span class="number">8888</span> -v ~/WorkStation/DeepLearning101-<span class="number">002</span>/:/WorkStation/DeepLearning101-<span class="number">002</span> -w /WorkStation/DeepLearning101-<span class="number">002</span> tensorflow/tensorflow:latest-py3</span><br></pre></td></tr></table></figure>
<p>然后用<code>docker ps -a</code>查看所有 image，然后使用命令 <code>docker rename CONTAINER ID XXX</code>，将默认的 Python2 的 image 重命名为 dl，将 Python3 的 image 重命名为 dlpy3：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CONTAINER ID        IMAGE                              COMMAND                  CREATED             STATUS                      PORTS               NAMES</span><br><span class="line">f46533729239        tensorflow/tensorflow:latest-py3   <span class="string">"/run_jupyter.sh -..."</span>   <span class="number">11</span> minutes ago      Exited (<span class="number">0</span>) <span class="number">6</span> minutes ago                        dlpy3</span><br><span class="line">f7178713446b        tensorflow/tensorflow              <span class="string">"/run_jupyter.sh -..."</span>   <span class="number">42</span> minutes ago      Exited (<span class="number">0</span>) <span class="number">15</span> minutes ago                       dl</span><br></pre></td></tr></table></figure>
<p>以后就可以根据需要，打开不同 Python 环境的 image。</p>
<p><code>docker start -i dl</code> 打开 Python2 环境：</p>
<p><img src="http://7xjpra.com1.z0.glb.clouddn.com/docker_py2.png" alt=""></p>
<p><code>docker start -i dlpy3</code> 打开 Python3 环境：</p>
<p><img src="http://7xjpra.com1.z0.glb.clouddn.com/docker_py3.png" alt=""></p>
<p>参考</p>
<ul>
<li><a href="https://github.com/tensorflow/tensorflow/issues/3467" target="_blank" rel="external">Docker Image with Python 3? · Issue #3467 · tensorflow/tensorflow</a></li>
<li><a href="https://github.com/tensorflow/tensorflow/issues/10179" target="_blank" rel="external">Support python3 on Docker image tensorflow/tensorflow:latest · Issue #10179 · tensorflow/tensorflow</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://7xjpra.com1.z0.glb.clouddn.com/dl-week0-title.png" alt=""></p>]]>
    
    </summary>
    
      <category term="AI" scheme="http://uegeek.com/tags/AI/"/>
    
      <category term="Deep learning" scheme="http://uegeek.com/tags/Deep-learning/"/>
    
      <category term="Docker" scheme="http://uegeek.com/tags/Docker/"/>
    
      <category term="深度学习" scheme="http://uegeek.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="动手" scheme="http://uegeek.com/categories/%E5%8A%A8%E6%89%8B/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[菜鸟数据科学入门03 - NumPy 数组基础和基本操作]]></title>
    <link href="http://uegeek.com/170929-DSNote3-NumPy-basic.html"/>
    <id>http://uegeek.com/170929-DSNote3-NumPy-basic.html</id>
    <published>2017-09-29T02:36:45.000Z</published>
    <updated>2017-11-14T02:44:37.635Z</updated>
    <content type="html"><![CDATA[<p><img src="http://7xjpra.com1.z0.glb.clouddn.com/data_science-title.jpg" alt=""></p>
<a id="more"></a> 
<h3 id="u4E3A_u4EC0_u4E48_u7528_NumPy_uFF1F"><a href="#u4E3A_u4EC0_u4E48_u7528_NumPy_uFF1F" class="headerlink" title="为什么用 NumPy？"></a>为什么用 NumPy？</h3><p><a href="http://www.numpy.org/" target="_blank" rel="external">NumPy</a> 是一个用于科学计算的基础 Python 库（<a href="http://www.scipy.org/scipylib/download.html" target="_blank" rel="external">安装说明</a>）。它可以让你在 Python 中使用向量和数学矩阵，以及许多用 C 语言实现的底层函数。</p>
<ul>
<li><p>简洁优雅</p>
<p>  当下大部分数据的组织结构是向量、矩阵或多维数组，NumPy 最重要的一个特点是 N 维数组对象（ndarray）。</p>
</li>
<li><p>效率高</p>
<p>  方便地计算一组数值，而不用写复杂的循环。</p>
</li>
<li><p>灵活兼容</p>
<p>  除了擅长科学计算，NumPy 还可以用作通用数据多维容器，可无缝对接各种各样的数据库。</p>
</li>
<li><p>敲门砖</p>
<p>  在数据科学中，有效的存储和操作数据是基础能力。如果想通过 Python 学习数据科学或者机器学习，就必须学习 NumPy。</p>
</li>
</ul>
<p>在 Notebook 中导入 NumPy：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br></pre></td></tr></table></figure>
<h3 id="u4EC0_u4E48_u662F_u6570_u7EC4"><a href="#u4EC0_u4E48_u662F_u6570_u7EC4" class="headerlink" title="什么是数组"></a>什么是数组</h3><p>数组是将数据组织成若干个维度的数据块。</p>
<blockquote>
<p>Array : data about relationships</p>
</blockquote>
<ul>
<li>一维数组是向量(Vectors)，由一个整数索引有序元素序列。</li>
<li>二维数组是矩阵(Matrics)，用一对整数（行索引和列索引）索引元素。</li>
<li>N 维数组(Arrays)是一组由 n 个整数的元组进行索引的、<strong>具有相同数据类型</strong>的元素集合。</li>
</ul>
<p><img src="http://image.slidesharecdn.com/2013-11-14-20enterthematrix-131207071455-phpapp02/95/enter-the-matrix-10-638.jpg?cb=1386400624" alt=""></p>
<h3 id="u521B_u5EFA_u6570_u7EC4"><a href="#u521B_u5EFA_u6570_u7EC4" class="headerlink" title="创建数组"></a>创建数组</h3><p>NumPy 的核心是数组（arrays）。</p>
<p>用 <code>array</code> 创建数组</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">In[]: np.array([<span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">3</span>])</span><br><span class="line"></span><br><span class="line">Out[]: array([<span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">3</span>])</span><br></pre></td></tr></table></figure>
<p>在 NumPy 数组中，数据类型需要一致，否则，会尝试「向上兼容」，比如生成一个包含浮点数的数组，输出时每个元素都变成了浮点型：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">In[]: np.array([<span class="number">3.14</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"></span><br><span class="line">Out[]: array([ <span class="number">3.14</span>,  <span class="number">4.</span>  ,  <span class="number">2.</span>  ,  <span class="number">3.</span>  ])</span><br></pre></td></tr></table></figure>
<p>NumPy 还可以用循环生成数组：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In[]: np.array([range(i, i + <span class="number">3</span>) <span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>]])</span><br><span class="line"></span><br><span class="line">Out[]: array([[<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line">    	      [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>],</span><br><span class="line">       		  [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]])</span><br></pre></td></tr></table></figure>
<p>用 <code>full</code> 生成一个 3 行 5 列的数组：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In[]: np.full((<span class="number">3</span>, <span class="number">5</span>), <span class="number">3.14</span>)</span><br><span class="line"></span><br><span class="line">Out[]: array([[ <span class="number">3.14</span>,  <span class="number">3.14</span>,  <span class="number">3.14</span>,  <span class="number">3.14</span>,  <span class="number">3.14</span>],</span><br><span class="line">  		      [ <span class="number">3.14</span>,  <span class="number">3.14</span>,  <span class="number">3.14</span>,  <span class="number">3.14</span>,  <span class="number">3.14</span>],</span><br><span class="line">       		  [ <span class="number">3.14</span>,  <span class="number">3.14</span>,  <span class="number">3.14</span>,  <span class="number">3.14</span>,  <span class="number">3.14</span>]])</span><br></pre></td></tr></table></figure>
<p>用 <code>arange</code> 等距填充数组：</p>
<p>（arange 是 Python 内置函数 range 的数组版，返回的是一个 ndarray 而不是 list）</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Starting at 0, ending at 20, stepping by 2</span></span><br><span class="line"></span><br><span class="line">In[]: np.arange(<span class="number">0</span>, <span class="number">20</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">Out[]: array([ <span class="number">0</span>,  <span class="number">2</span>,  <span class="number">4</span>,  <span class="number">6</span>,  <span class="number">8</span>, <span class="number">10</span>, <span class="number">12</span>, <span class="number">14</span>, <span class="number">16</span>, <span class="number">18</span>])</span><br></pre></td></tr></table></figure>
<p>用 <code>linspace</code> 线性填充数组：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Create an array of five values evenly spaced between 0 and 1</span></span><br><span class="line"></span><br><span class="line">In[]: np.linspace(<span class="number">0</span>, <span class="number">1</span>, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">Out[]: array([ <span class="number">0.</span>  ,  <span class="number">0.25</span>,  <span class="number">0.5</span> ,  <span class="number">0.75</span>,  <span class="number">1.</span>  ])</span><br></pre></td></tr></table></figure>
<p>用 <code>random</code> 生成随机数组：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Create a 3x3 array of random integers in the interval [0, 10)</span></span><br><span class="line"></span><br><span class="line">In[]: np.random.randint(<span class="number">0</span>, <span class="number">10</span>, (<span class="number">3</span>, <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">Out[]: array([[<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line">	          [<span class="number">5</span>, <span class="number">7</span>, <span class="number">8</span>],</span><br><span class="line">              [<span class="number">0</span>, <span class="number">5</span>, <span class="number">0</span>]])</span><br></pre></td></tr></table></figure>
<p>btw 数组索引从 0 开始</p>
<p><img src="https://www.safaribooksonline.com/library/view/python-for-data/9781449323592/httpatomoreillycomsourceoreillyimages1346880.png" alt=""></p>
<h3 id="u6570_u7EC4_u5207_u7247"><a href="#u6570_u7EC4_u5207_u7247" class="headerlink" title="数组切片"></a>数组切片</h3><p>NumPy 中的切片语法：<code>x[start:stop:step]</code>，如果没有赋值，默认值 start=0, stop=size of dimension, step=1。</p>
<p><img src="https://www.safaribooksonline.com/library/view/python-for-data/9781449323592/httpatomoreillycomsourceoreillyimages1346882.png" alt=""></p>
<p>(上图最后一个图形，arr[1, :2]   应该是  (1,2) 一行二列矩阵？？）</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>])</span><br><span class="line"></span><br><span class="line">In[]: x[::<span class="number">2</span>]  <span class="comment"># every other element</span></span><br><span class="line"></span><br><span class="line">Out[]:array([<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>])</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">array([[<span class="number">12</span>,  <span class="number">5</span>,  <span class="number">2</span>,  <span class="number">4</span>],</span><br><span class="line">       [ <span class="number">7</span>,  <span class="number">6</span>,  <span class="number">8</span>,  <span class="number">8</span>],</span><br><span class="line">       [ <span class="number">1</span>,  <span class="number">6</span>,  <span class="number">7</span>,  <span class="number">7</span>]])</span><br><span class="line">       </span><br><span class="line">In[]: x2[:<span class="number">3</span>, ::<span class="number">2</span>]  <span class="comment"># all rows, every other column</span></span><br><span class="line"></span><br><span class="line">Out[]:array([[<span class="number">12</span>,  <span class="number">2</span>],</span><br><span class="line">	       [ <span class="number">7</span>,  <span class="number">8</span>],</span><br><span class="line">	       [ <span class="number">1</span>,  <span class="number">7</span>]])</span><br></pre></td></tr></table></figure>
<p>复制数组切片</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">x2 = array([[<span class="number">99</span>  <span class="number">5</span>  <span class="number">2</span>  <span class="number">4</span>]</span><br><span class="line">		    [ <span class="number">7</span>  <span class="number">6</span>  <span class="number">8</span>  <span class="number">8</span>]</span><br><span class="line">		    [ <span class="number">1</span>  <span class="number">6</span>  <span class="number">7</span>  <span class="number">7</span>])</span><br><span class="line">       </span><br><span class="line">In[]: x2_sub_copy = x2[:<span class="number">2</span>, :<span class="number">2</span>].copy()</span><br><span class="line">	  print(x2_sub_copy)</span><br><span class="line"></span><br><span class="line">Out[]:[[<span class="number">99</span>  <span class="number">5</span>]</span><br><span class="line">	   [ <span class="number">7</span>  <span class="number">6</span>]]</span><br></pre></td></tr></table></figure>
<h3 id="u6570_u7EC4_u8F6C_u7F6E_u548C_u8F74_u5BF9_u6362"><a href="#u6570_u7EC4_u8F6C_u7F6E_u548C_u8F74_u5BF9_u6362" class="headerlink" title="数组转置和轴对换"></a>数组转置和轴对换</h3><p>reshape:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In[]: arr = np.arange(<span class="number">15</span>).reshape((<span class="number">3</span>,<span class="number">5</span>))</span><br><span class="line">	  arr</span><br><span class="line">	  </span><br><span class="line">Out[]: array([[ <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">2</span>,  <span class="number">3</span>,  <span class="number">4</span>],</span><br><span class="line">        	  [ <span class="number">5</span>,  <span class="number">6</span>,  <span class="number">7</span>,  <span class="number">8</span>,  <span class="number">9</span>],</span><br><span class="line">	          [<span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>]])</span><br></pre></td></tr></table></figure>
<p>转置（transpose）是重塑（reshape）的一种特殊形式，返回源数据的视图而不进行复制。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In[]: arr.T</span><br><span class="line"></span><br><span class="line">Out[]: array([[ <span class="number">0</span>,  <span class="number">5</span>, <span class="number">10</span>],</span><br><span class="line">		       [ <span class="number">1</span>,  <span class="number">6</span>, <span class="number">11</span>],</span><br><span class="line">		       [ <span class="number">2</span>,  <span class="number">7</span>, <span class="number">12</span>],</span><br><span class="line">		       [ <span class="number">3</span>,  <span class="number">8</span>, <span class="number">13</span>],</span><br><span class="line">		       [ <span class="number">4</span>,  <span class="number">9</span>, <span class="number">14</span>]])</span><br></pre></td></tr></table></figure>
<h3 id="u8FDE_u63A5_u548C_u62C6_u5206_u6570_u7EC4"><a href="#u8FDE_u63A5_u548C_u62C6_u5206_u6570_u7EC4" class="headerlink" title="连接和拆分数组"></a>连接和拆分数组</h3><p>用<code>concatenate</code>连接数组：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In[]: grid = np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line"> 	                   [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]])</span><br><span class="line">	  np.concatenate([grid, grid])</span><br><span class="line"></span><br><span class="line">Out[]: array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">       		  [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>],</span><br><span class="line">	          [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">	          [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]])</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># concatenate along the second axis (zero-indexed)</span></span><br><span class="line"></span><br><span class="line">In[]: np.concatenate([grid, grid], axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">Out[]: array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">       		   [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]])</span><br></pre></td></tr></table></figure>
<p>用  <code>vstack</code>合并到数据行， <code>hstack</code> 合并到数据列</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">In[]: x = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">	  grid = np.array([[<span class="number">9</span>, <span class="number">8</span>, <span class="number">7</span>],</span><br><span class="line">      		           [<span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>]])</span><br><span class="line"></span><br><span class="line">	<span class="comment"># vertically stack the arrays</span></span><br><span class="line">	  np.vstack([x, grid])</span><br><span class="line"></span><br><span class="line">Out[]:array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">       		[<span class="number">9</span>, <span class="number">8</span>, <span class="number">7</span>],</span><br><span class="line">	        [<span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>]])</span><br></pre></td></tr></table></figure>
<p>拆分数组的函数包括： <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.split.html" target="_blank" rel="external">np.split</a>, np.hsplit, np.vsplit</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In[]: x = np.arange(<span class="number">8.0</span>)</span><br><span class="line">	  np.split(x, [<span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">10</span>])</span><br><span class="line"></span><br><span class="line">Out[]:  [array([ <span class="number">0.</span>,  <span class="number">1.</span>,  <span class="number">2.</span>]),</span><br><span class="line">		 array([ <span class="number">3.</span>,  <span class="number">4.</span>]),</span><br><span class="line">		 array([ <span class="number">5.</span>]),</span><br><span class="line">		 array([ <span class="number">6.</span>,  <span class="number">7.</span>]),</span><br><span class="line">		 array([], dtype=float64)]</span><br></pre></td></tr></table></figure>
<h3 id="u4F7F_u7528_mask__u5FEB_u901F_u622A_u53D6_u6570_u636E"><a href="#u4F7F_u7528_mask__u5FEB_u901F_u622A_u53D6_u6570_u636E" class="headerlink" title="使用 mask 快速截取数据"></a>使用 <code>mask</code> 快速截取数据</h3><p>传递给数组一个与它有关的条件式，然后它就会返回给定条件下为真的值。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In[]: norm10 = np.random.normal(<span class="number">10</span>,<span class="number">3</span>,<span class="number">5</span>)</span><br><span class="line">	  mask = norm10 &gt; <span class="number">9</span></span><br><span class="line">	  mask</span><br><span class="line"></span><br><span class="line">Out[]:array([<span class="keyword">False</span>,  <span class="keyword">True</span>, <span class="keyword">False</span>,  <span class="keyword">True</span>, <span class="keyword">False</span>], dtype=bool)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">In[]: print(<span class="string">'Values above 9:'</span>, norm10[mask])</span><br><span class="line"></span><br><span class="line">Out[]: (<span class="string">'Values above 9:'</span>, array([ <span class="number">13.69383139</span>,  <span class="number">13.49584954</span>]))</span><br></pre></td></tr></table></figure>
<p>在生成图形时也非常好用：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">a = np.linspace(<span class="number">0</span>, <span class="number">2</span> * np.pi, <span class="number">50</span>)</span><br><span class="line">b = np.sin(a)</span><br><span class="line">plt.plot(a,b)</span><br><span class="line">mask = b &gt;= <span class="number">0</span></span><br><span class="line">plt.plot(a[mask], b[mask], <span class="string">'bo'</span>)</span><br><span class="line">mask = (b &gt;= <span class="number">0</span>) &amp; (a &lt;= np.pi / <span class="number">2</span>)</span><br><span class="line">plt.plot(a[mask], b[mask], <span class="string">'go'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p><img src="http://7xjpra.com1.z0.glb.clouddn.com/wHm77PYlbWAFAAAAABJRU5ErkJggg==.png" alt=""></p>
<p>在程序中用条件式选择了图中不同的点。蓝色的点（也包含图中的绿点，只是绿点覆盖了蓝点），显示的是值大于零的点。绿点显示的是值大于 0 小于 Pi / 2 的点。</p>
<h3 id="u5E7F_u64AD_Broadcasting"><a href="#u5E7F_u64AD_Broadcasting" class="headerlink" title="广播 Broadcasting"></a>广播 Broadcasting</h3><p>当不同 shape 的数组进行运算(按位加/按位减的运算，而不是矩阵乘法的运算)时，(某个维度上)小的数组就会沿着（同一维度上）大的数组自动填充。广播虽然是一个不错的偷懒办法，但是效率不高、降低运算速度通常也为人诟病。</p>
<blockquote>
<p>The term broadcasting describes how numpy treats arrays with different shapes during arithmetic operations. Subject to certain constraints, the smaller array is “broadcast” across the larger array so that they have compatible shapes.<br>via <a href="https://docs.scipy.org/doc/numpy-1.13.0/user/basics.broadcasting.html#module-numpy.doc.broadcasting" target="_blank" rel="external">Broadcasting — NumPy v1.13 Manual</a></p>
</blockquote>
<p>广播的原理（via <a href="http://www.astroml.org/book_figures/appendix/fig_broadcast_visual.html" target="_blank" rel="external">Broadcast Visualization</a>）：</p>
<p><img src="http://www.astroml.org/_images/fig_broadcast_visual_1.png" alt=""></p>
<h3 id="u53C2_u8003_u8D44_u6599"><a href="#u53C2_u8003_u8D44_u6599" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><a href="http://www.numpy.org/" target="_blank" rel="external">NumPy.org</a></li>
<li><a href="http://nbviewer.jupyter.org/github/jakevdp/PythonDataScienceHandbook/blob/master/notebooks/Index.ipynb" target="_blank" rel="external">Python Data Science Handbook</a></li>
<li><a href="https://book.douban.com/subject/25779298/" target="_blank" rel="external">利用Python进行数据分析</a></li>
<li><a href="http://www.scipy-lectures.org/index.html" target="_blank" rel="external">Scipy lecture notes</a></li>
<li><a href="http://www.slideshare.net/mikeranderson/2013-1114-enter-thematrix" target="_blank" rel="external">Enter The Matrix</a></li>
<li><a href="http://codingpy.com/article/an-introduction-to-numpy/" target="_blank" rel="external">使用 Python 进行科学计算：NumPy入门</a></li>
<li><a href="https://docs.scipy.org/doc/numpy-1.13.0/user/basics.broadcasting.html#module-numpy.doc.broadcasting" target="_blank" rel="external">Broadcasting — NumPy v1.13 Manual</a></li>
<li><a href="http://scipy.github.io/old-wiki/pages/EricsBroadcastingDoc" target="_blank" rel="external">EricsBroadcastingDoc - SciPy wiki dump</a></li>
<li><a href="http://www.astroml.org/book_figures/appendix/fig_broadcast_visual.html" target="_blank" rel="external">Broadcast Visualization — astroML 0.2 documentation</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://7xjpra.com1.z0.glb.clouddn.com/data_science-title.jpg" alt=""></p>]]>
    
    </summary>
    
      <category term="Data Science" scheme="http://uegeek.com/tags/Data-Science/"/>
    
      <category term="NumPy" scheme="http://uegeek.com/tags/NumPy/"/>
    
      <category term="Python" scheme="http://uegeek.com/tags/Python/"/>
    
      <category term="动手" scheme="http://uegeek.com/categories/%E5%8A%A8%E6%89%8B/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[识别自动思维 —— HackYourself 避税手册之二]]></title>
    <link href="http://uegeek.com/170910-hackyourself-cbt2.html"/>
    <id>http://uegeek.com/170910-hackyourself-cbt2.html</id>
    <published>2017-09-10T09:47:59.000Z</published>
    <updated>2017-09-10T09:51:01.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://7xjpra.com1.z0.glb.clouddn.com/2-title.jpg" alt=""></p>
<a id="more"></a> 
<p>好久不见。</p>
<p><a href="http://www.uegeek.com/170624-hackyourself-cbt1.html" target="_blank" rel="external">HackYourself 避税手册第一篇</a>中，提出了「信念税」这个话题。怎样更好地「避税」呢？今天我们来聊聊如何识别自动思维。</p>
<p>当你在读这篇文章时，一部分注意力会集中在阅读文字并且理解、整合信息上面。同时，你可能会产生一些快速的评价，这些思维可以称为「自动思维」。它们似乎是立即自动涌现的，通常迅速而简短，一闪而过。我们往往很难觉察到这些想法的存在，更不要说进行理性、客观的评估，所以大都会顺着它们做出惯常的情绪和行为反应——就像飞行器进入「自动导航」模式一样。</p>
<p><img src="http://7xjpra.com1.z0.glb.clouddn.com/2-1autopilot.png" alt=""></p>
<p>「自动思维」的形成，大都不经过意识的「审查」，一旦形成却又根深蒂固，潜移默化地影响着我们的判断、选择、行为。</p>
<p>请想象一下，现在有一个小球，要滚过沙坑。</p>
<p><img src="https://ak2.picdn.net/shutterstock/videos/23753233/thumb/1.jpg" alt=""></p>
<p>第一次，沙坑上没有任何痕迹，小球可能可以沿很多路径滚过。</p>
<p>第二次让小球滚入沙坑，很有可能会顺着上一次的轨迹，并且进一步加深轨迹的深度。</p>
<p>反复几次，小球已经不太可能脱离轨迹滚动，而且一次比一次速度要快。</p>
<p>这就是路径依赖。</p>
<p><img src="http://amr.aom.org/content/34/4/689/F1.large.jpg" alt=""></p>
<p>自动思维的「路径」一旦形成，大脑就会沿着阻力最小的路径「思考」，完全跳过原本可能需要的觉察、思考、审视阶段，直接作出习性反应。</p>
<h3 id="u56DE_u5230_u81EA_u52A8_u601D_u7EF4_u8D77_u70B9_uFF0C_u91CD_u65B0_u9009_u62E9_u89E3_u91CA_u98CE_u683C"><a href="#u56DE_u5230_u81EA_u52A8_u601D_u7EF4_u8D77_u70B9_uFF0C_u91CD_u65B0_u9009_u62E9_u89E3_u91CA_u98CE_u683C" class="headerlink" title="回到自动思维起点，重新选择解释风格"></a>回到自动思维起点，重新选择解释风格</h3><p>自动思维都是一些不再经过意识「审查」的想法。想要改变那些已经形成固定路径的想法「小球」的运动轨迹，必须先回到原点，在小球启动的时候，重新获得对它有意识的控制。</p>
<p>试想一个我们经常会遇到的情景：工作上有一件事情没有做好。</p>
<p>面对这个结果时，我们可能会产生很多想法。这时候「小球」其实有很多不同的路径可以选择：</p>
<table>
<thead>
<tr>
<th>解释风格</th>
<th>归因</th>
<th>态度/行为导向</th>
</tr>
</thead>
<tbody>
<tr>
<td>具体的</td>
<td>我第一次做，经验不足，目标设定也有些过高，超出了我掌握的技能</td>
<td>继续学习和练习</td>
</tr>
<tr>
<td>笼统的</td>
<td>我没有能力做好</td>
<td>我真是个差劲的人</td>
</tr>
<tr>
<td>短暂的</td>
<td>最近身体不好影响了状态</td>
<td>恢复身体迎头赶上</td>
</tr>
<tr>
<td>长期的</td>
<td>我不是那种有信心、什么都能做好的人，一直都是这样</td>
<td>以后不要尝试算了</td>
</tr>
<tr>
<td>个人的</td>
<td>这个项目虽然不成功，我还是锻炼了 xxx 能力</td>
<td>想想这次的经验怎么复用</td>
</tr>
<tr>
<td>普遍的</td>
<td>这件事没有什么意义，一开始我就不看好</td>
<td>真是浪费时间浪费表情</td>
</tr>
</tbody>
</table>
<p>从上表可以看到，如果对负面结果选择具体、短暂、普遍的解释风格，而不是笼统、长期的和个人的方式来解释，可以减少挫折和无助。</p>
<p><strong>乐观的人一般会用长期的、笼统的、个人的方式解释成功，而用短暂的、具体的、普遍的方式解释失败。</strong>如果事事要求只做最好，就会抑郁：无法达到的预期，加上为失败承担个人责任的倾向，形成了致命的组合。</p>
<h3 id="u5982_u4F55_u8BC6_u522B_u4E0D_u6070_u5F53_u7684_u81EA_u52A8_u601D_u7EF4"><a href="#u5982_u4F55_u8BC6_u522B_u4E0D_u6070_u5F53_u7684_u81EA_u52A8_u601D_u7EF4" class="headerlink" title="如何识别不恰当的自动思维"></a>如何识别不恰当的自动思维</h3><p>我们每天会产生数量难以估算的自动思维，几乎每时每刻都有自动思维在进行，不可能也没有必要全部识别出来。那么，哪些自动思维值得识别？如何判断是否「恰当」？</p>
<p>让我们先聚焦在那些引起较明显情绪反应、生理变化、行为变化的时刻，以及可能做出重要决策的时刻，这些时刻的自动思维较容易识别，也比较可能带来较大的影响。</p>
<p>情绪是一个非常好的线索，它提醒我们「此刻也许该暂停」。</p>
<p><img src="https://cdn.dribbble.com/users/552894/screenshots/3716113/y3ll.jpg" alt=""></p>
<p>当情绪上涌时，不妨试着做三件事情：</p>
<h4 id="1-_u6682_u505C"><a href="#1-_u6682_u505C" class="headerlink" title="1.暂停"></a>1.暂停</h4><p>比如说，Boss 刚刚布置了一项很有挑战的任务，让你在 3 天内完成。这时身体会不自觉地开始有一些反应，比如头皮发麻，脑子一片空白，内心有一群草原动物奔驰而过……</p>
<p>在这样一个情绪节点，请尽可能先按下暂停键，把时空「冻结」住。</p>
<p><img src="https://cdn.dribbble.com/users/408943/screenshots/2941267/play-pause.gif" alt=""></p>
<h4 id="2-__u8BC6_u522B_u60C5_u7EEA"><a href="#2-__u8BC6_u522B_u60C5_u7EEA" class="headerlink" title="2. 识别情绪"></a>2. 识别情绪</h4><p>观察一下自己的第一反应：</p>
<blockquote>
<p>刚才我产生了什么反应和情绪？</p>
</blockquote>
<p>身体有什么反应？是胸口发紧、太阳穴微微发热、眉头开始皱起？情绪有什么变化？是焦虑——觉得时间太紧不知道该从何入手，是不满——这么难的事情给到自己不公平有一点愤怒，还是恐惧——害怕把事情搞砸，别人会对自己有负面评价？</p>
<h4 id="3-__u8BC6_u522B_u81EA_u52A8_u601D_u7EF4"><a href="#3-__u8BC6_u522B_u81EA_u52A8_u601D_u7EF4" class="headerlink" title="3. 识别自动思维"></a>3. 识别自动思维</h4><p>顺着情绪反应，我们也许可以抓出引起这些情绪的「自动思维」：</p>
<blockquote>
<p>刚才我脑子里闪过什么念头？</p>
</blockquote>
<p>比如</p>
<ul>
<li>这太难了</li>
<li>我可能没办法做到</li>
<li>如果我试了但是没有用怎么办？</li>
<li>我很想拒绝但是担心拒绝会带来严重后果</li>
</ul>
<p>当暂停成功后，识别出当下的想法，就容易产生 second thought。如果可以产生更多的想法，而且别急着站队，就可以让想法之间相互 pk，那些不那么合理的想法就会现出原形，让我们更容易做出恰当的评估。</p>
<p><img src="https://cdn.dribbble.com/users/86429/screenshots/416545/thoughtbender_sounas.png" alt=""></p>
<p>比如说「这件事情太难，我做不了」，在这个节点，我们通过「冻结」时空，重新获得挑选解释的主动权。以前，我们可能会下意识地选择逃避，但是如果转念一想，意识到「这个项目是锻炼组织能力的好机会」，我们就可能更愿意接受挑战；如果想到「这个项目我一个人不行，但是如果 xx 能加入，我会更有信心」，我们就可能会开始考虑如何申请资源……</p>
<h3 id="u8BC6_u522B_u7EC3_u4E60"><a href="#u8BC6_u522B_u7EC3_u4E60" class="headerlink" title="识别练习"></a>识别练习</h3><p>当然，整个过程需要反复练习，毕竟我们对抗的是已经千百次滚过沙坑的「自动导航」思维小球。</p>
<p>怎样更好地练习呢？</p>
<h4 id="1-_u63D0_u9AD8_u60C5_u7EEA_u7684_u5206_u8FA8_u7387"><a href="#1-_u63D0_u9AD8_u60C5_u7EEA_u7684_u5206_u8FA8_u7387" class="headerlink" title="1.提高情绪的分辨率"></a>1.提高情绪的分辨率</h4><p>如果我们只能区分出「好」和「坏」情绪，情绪感知的分辨率过低，也就很难通过情绪觉察自己的状态，从而追溯出产生情绪的自动思维。</p>
<p>语言会限制思维。提高情绪分辨率的第一步，可以尝试扩充关于情绪的词汇和定义。</p>
<p><img src="https://img3.doubanio.com/lpic/s28948495.jpg" alt=""></p>
<p><a href="https://book.douban.com/subject/26849228/" target="_blank" rel="external">「心情词典」</a>一书中介绍了 154 种情绪，例如：</p>
<table>
<thead>
<tr>
<th>A</th>
<th>B</th>
<th>C</th>
</tr>
</thead>
<tbody>
<tr>
<td>ABHIMAN 由爱生恨</td>
<td>BAFFLEMENT 不知所措</td>
<td>CALM 冷静</td>
</tr>
<tr>
<td>ACEDIA 倦怠</td>
<td>BASOREXIA 亲吻渴望</td>
<td>CAREFREE 无忧无虑</td>
</tr>
<tr>
<td>AMAE 撒娇依赖</td>
<td>BEFUDOLEMENT 茫然</td>
<td>CHEERFULNESS 欢快</td>
</tr>
<tr>
<td>AMBIGUPHOBIA 非解释清楚不可</td>
<td>BEWILDERMENT 困惑</td>
<td>CHEESED 气恼</td>
</tr>
<tr>
<td>ANGER 愤怒</td>
<td>BOREDOM 厌倦</td>
<td>CLAUSTROPHOBIA 幽闭恐惧</td>
</tr>
<tr>
<td>ANTICIPATION 期待</td>
<td>BRABANT 作死</td>
<td>COLLYWOBBLES 肠胃焦虑</td>
</tr>
<tr>
<td>ANXIETY 焦虑</td>
<td>BROODINESS 求子心切</td>
<td>COMFORT 安慰</td>
</tr>
<tr>
<td>APATHY 冷漠</td>
<td></td>
<td>COMPASSION 同情</td>
</tr>
<tr>
<td>L’APPEL DU VIDE 虚空的呼唤</td>
<td></td>
<td>COMPERSION 多元之爱</td>
</tr>
<tr>
<td>AWUMBUK 人去心空</td>
<td></td>
<td>CONFIDENCE 自信</td>
</tr>
</tbody>
</table>
<p>具体的情绪解读，可以翻一翻这本书。</p>
<p>当我们掌握更多细致描述情绪的词汇，对情绪的感知和识别能力也会得到提升。</p>
<h4 id="2-_u5C06_u81EA_u52A8_u601D_u7EF4_u5F62_u8C61_u5316"><a href="#2-_u5C06_u81EA_u52A8_u601D_u7EF4_u5F62_u8C61_u5316" class="headerlink" title="2.将自动思维形象化"></a>2.将自动思维形象化</h4><p>尝试给想要调整的自动思维塑造一个生动的形象，比如，纸老虎、聒噪的青蛙、严厉的老师、无脸人之类的，<strong>诀窍是选择那种看起来很强大，实际上容易怂的形象</strong>，嘿嘿嘿。。。每次识觉察到自动思维又在默默推动小球滚过沙池，我们就可以尝试跟这个形象开始对话。</p>
<p>经过一些练习，你也许会发现这个形象越来越具体，也就越容易被识别出来，自己就不容易受它所代表的自动思维所控制。</p>
<h4 id="3-_u5199_u60C5_u7EEA_u65E5_u8BB0"><a href="#3-_u5199_u60C5_u7EEA_u65E5_u8BB0" class="headerlink" title="3.写情绪日记"></a>3.写情绪日记</h4><p>很多时候，自动思维的惯性太大，不一定能够在发生的当下即时识别。于是有必要定期做一些回顾和反思。比如尝试写情绪日记。每天晚上花 5 分钟，想想过去的一天，自己经历了哪些情绪强烈的时刻？当时涌现了什么样的自动思维？下次再出现，如何更快识别出来？识别后如何应对？需要什么帮助和工具吗？……</p>
<p>我们也可以尝试将自己经常会出现的（负面）自动思维列一个清单，作为「信念税单」，每天检查一下，今天有没有为这些信念「交税」。</p>
<p><img src="https://cdn.dribbble.com/users/153946/screenshots/1089494/clipboard.png" alt=""></p>
<p>现在就开始切换自动导航模式的练习吧！</p>
<p>你有哪些常见的「自动导航思维」？识别它们的过程中，有什么感想和心得想跟大家分享？欢迎留言！</p>
<p>祝各位避税顺利！</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://7xjpra.com1.z0.glb.clouddn.com/2-title.jpg" alt=""></p>]]>
    
    </summary>
    
      <category term="HackYourself" scheme="http://uegeek.com/tags/HackYourself/"/>
    
      <category term="Mind" scheme="http://uegeek.com/tags/Mind/"/>
    
      <category term="Psychology" scheme="http://uegeek.com/tags/Psychology/"/>
    
      <category term="叽歪" scheme="http://uegeek.com/categories/%E5%8F%BD%E6%AD%AA/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Time will tell]]></title>
    <link href="http://uegeek.com/170723-time-will-tell-md.html"/>
    <id>http://uegeek.com/170723-time-will-tell-md.html</id>
    <published>2017-07-23T09:45:33.000Z</published>
    <updated>2017-09-10T09:48:44.000Z</updated>
    <content type="html"><![CDATA[<p><img src="https://cdn.dribbble.com/users/89889/screenshots/3658659/toolittletime-dribbble.gif" alt=""></p>
<a id="more"></a> 
<p>昨天，跟咨询师一起整理了个人的近况和困扰，收获颇多。</p>
<p>很多时候，我们会因为一时失去焦点，模糊了初心、价值观和评判标准，而走入一座霾雾缭绕的迷宫中。什么是对的？什么应该坚持？哪些需要改变？虽然表象看起来纷繁复杂，但只要不失初心，气沉丹田，前路自然会显出轮廓。</p>
<p>今天继续反思最近的工作和生活，再次意识到，做生意和过生活的好多问题和解法，是一样一样的。</p>
<h3 id="u5546_u4E1A_u7684_u672C_u8D28_u548C_u521D_u5FC3"><a href="#u5546_u4E1A_u7684_u672C_u8D28_u548C_u521D_u5FC3" class="headerlink" title="商业的本质和初心"></a>商业的本质和初心</h3><p>怎样判断一个公司是好公司？大概，遵循商业规律，能持续满足市场需求，就是一家好公司。那么，什么样的公司是值得尊敬的公司？</p>
<p>之前跟朋友讨论过，创业成功的标准是什么？我认为是：</p>
<blockquote>
<p>「 人 心 所 向 」</p>
</blockquote>
<p>不仅仅要让客户满意，而且让几乎所有的利益相关者比如员工、同行、行业上下游，甚至包括竞争对手，都愿意支持你、拥护你，这就是战无不胜的「人心所向」。所以，马云在阿里巴巴一直强调：客户第一，员工第二，股东第三。因为，商业运作的基本逻辑，就是生产出巨大的价值（价值一定是面向某些主体的），然后从这些价值中获取其中的一小部分作为企业利益和发展资源。</p>
<p>于是，从外部来看，我们知道一个公司的目标是「造势」：通过组织资源、提供价值，做到「人心所向，大势所趋」。</p>
<p>那么，从内部看，怎样判断一个公司运作良好？</p>
<p>我认为是看熵增还是熵减。</p>
<blockquote>
<p>一个生命有机体在不断地产生熵，并逐渐趋近于最大熵的危险状态，即死亡。要摆脱死亡，要活着，唯一的办法就是从环境不断汲取负熵。一个生命有机体具有推迟趋向热力学平衡（死亡）的奇妙能力，就像是活有机体吸引一串负熵去抵消它在生活中产生的熵总量，从而使它自身维持在一个稳定而又低熵的水平上。 —— 薛定谔 「生命是什么」</p>
</blockquote>
<p>类比生命有机体，一个创业公司如果还有活力，那么它应该会有明确的创业动机或愿景，还在不断的运动拓展，同时有强烈的不死意愿。</p>
<p>存活的目的是进一步生长。生长是熵减的过程。对公司而言，首先需要一个稳定而有序的团队结构，然后需要找到能够复制和 scale 的业务模式。如果想长期拥有竞争力，还必须有一套有序犯错的多元化基因库。初创公司能够在竞争激励的商业环境中存活，靠的是差异化生存。而差异来自包容和创新。</p>
<p>简单来说，就是看一个公司有没有向着更有序的趋势发展。</p>
<p>不过，也有例外——公司发展最迅速的阶段，往往最混乱。那句话说得好（原谅我忘记出处了）：</p>
<blockquote>
<p>什么是健康？健康就是要病不病的边缘状态。</p>
</blockquote>
<p>当公司飞速发展的时候，可能内部看起来无比混乱，但是却使外部产生熵减，比如市场份额快速扩大、口碑扩散、替代传统技术和方式等等。也就是说，为了在外部快速获得熵减的「势」，可以一定程度容忍内部的熵增。当然，不要以为所有的混乱无序，都反映了业务快速增长，它可能只是生命体衰竭的先兆。</p>
<p><strong>外部人心所向，内部有序熵减</strong>，可以作为判断一个公司健康状况的标准，也是一个公司应该努力的目标——而不是仅仅盯着财务数据（虽然能更直接反映短期健康状况）。</p>
<p>于是又冒出另一个问题：我们要在多长的时间周期内，做好创业这件事？做一家 2 年内的风口网红公司，跟做一家 20 年后依然存活而且受人尊敬的公司，策略完全不一样。把事情放在更大的时间周期内来考虑，格局自然大不同。而评估标准就更简单了：较大的时间周期内，目标利益群体会不会用脚投票（比如客户来买单、人才来加入、同行来合作）。</p>
<p>于是再冒出另外一个问题：做一家能存活的公司，做一家好公司，做一家受人尊敬的公司，它们之间有先后次序吗？按常理来看，应该先生存，后发展。但是换个角度想，一开始就做受人尊敬的事，兢兢业业地为客户提供更大的价值，这些事难道不会带来商业利益吗？</p>
<p>创业和工作，还是要回到初心。</p>
<p>凡是真正值得做的事情，就值得慢慢做。因为啊，慢慢来，比较快。</p>
<h3 id="u4E2A_u4EBA_u7684_u671F_u8BB8_u4E0E_u65B9_u5411"><a href="#u4E2A_u4EBA_u7684_u671F_u8BB8_u4E0E_u65B9_u5411" class="headerlink" title="个人的期许与方向"></a>个人的期许与方向</h3><p>回到每一个个体，迷茫时怎么判断自己是不是走在所谓「正确」的道路上？上面的逻辑依然好用：</p>
<ul>
<li>外部人心所向：我是否获得持有类似价值观的群体的认可？</li>
<li>内部有序熵减：我是否获得可以增值的能力，比如洞察力，学习能力，分析和解决问题的能力，创造和表达能力，等等</li>
</ul>
<p>对公司而言，跟目标利益群体保持长久持续的关系，可以作为评估标准。商业逻辑，天下大同。但是个体却千人千面。对个人而言，可参考的标准是什么？</p>
<p>好像只能基于每个人自己的价值观和偏好，来寻找这个所谓的「标准」。</p>
<p>对我而言，应该是能创作出或美好或有趣的作品吧。然后，用自己的作品去吸引那些价值观近似的人，与他们产生紧密的连接。</p>
<p>我讨厌认知负荷——所以做设计真的很容易开心。洁癖这个词太简单粗暴，他们大概是一个对「秩序」很敏感的人群。认知负荷也是一种熵增，思维混乱是熵增，作息不规律是熵增，做事毫无目的性是熵增……</p>
<p>「有序和无序」大概是我这辈子的人生课题。我希望那些没有什么美感的东西能尽量简单，甚至成为 API 接口，好让我们节省精力，用在更需要创造力的地方——用于创造那些或有序或无序的美的过程中。</p>
<p>对我而言，判断一个人是不是同路人，看看 ta 有多喜欢美好的事物、有没有创造出尽可能美好的事物就知道了 —— 美好的事物，都是通过艰辛努力获得的熵减的成果。</p>
<p>什么东西足够「美好」呢？要我说啊，那些不符合最小化生存成本、自身脆弱却又能抵御时间侵袭的东西，大抵都会是相当美好的东西。</p>
<p>时间是最好的判官，虽然有的公司能借着风口起飞，但是百年老店才是影响几代人的生意。</p>
<p>时间是最好的判官，在个体能够感受的范围内，最长也最公正的尺度是一生。一辈子里面，真正给自己留下记忆，给别人带来益处的事情，都会有哪些。当然，有的人还能影响和帮助往后数千年的人，这种价值无法估量，弥足珍贵。</p>
<p>当我们纠结、焦虑的时候，不妨试着抽出三条时间线：</p>
<p>第一条，叫做「生命长河」。</p>
<p>在我们自己的生命之河中，眼前都只是一个切片。一天的事放在一个月的周期来看，大概就不算什么。一时的事放在十年的周期来看，并没有我们想象得那么重要。真正重要的，是做这件事的姿势，该不该保持十年，值不值得用十年或更长的时间去保持。</p>
<p>第二条，叫做「迈尔斯通」（Milestone -.-）。</p>
<p>如果只看到长河的终点，可能容易因为路途遥远而丧失了勇气。马拉松的冠军们，大都不以终点为目标，而是会不停地设置看得见的标识物为目标：下一个路口、下一个补给站、下一个拐弯、下一个树荫……所谓日拱一卒，不期速成。棋盘才摆开，不要想着终局，先把下一个要吃掉的小兵盯好。</p>
<p>最后一条，叫做「刹那永恒」。</p>
<p>过去和未来都不可期，只有当下最真实。当下的一心一念，会影响一言一行，也会影响那个昵称可能叫做「薛定谔」的未来的模样。</p>
<p>让我们面对生命长河，聚焦在看得见的下一个界碑，全神贯注地走好现在这一步。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="https://cdn.dribbble.com/users/89889/screenshots/3658659/toolittletime-dribbble.gif" alt=""></p>]]>
    
    </summary>
    
      <category term="HackYourself" scheme="http://uegeek.com/tags/HackYourself/"/>
    
      <category term="Psychology" scheme="http://uegeek.com/tags/Psychology/"/>
    
      <category term="创业" scheme="http://uegeek.com/tags/%E5%88%9B%E4%B8%9A/"/>
    
      <category term="叽歪" scheme="http://uegeek.com/categories/%E5%8F%BD%E6%AD%AA/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[算法作曲历险记01-简史]]></title>
    <link href="http://uegeek.com/170713-algorithmic-composition-1.html"/>
    <id>http://uegeek.com/170713-algorithmic-composition-1.html</id>
    <published>2017-07-13T01:03:19.000Z</published>
    <updated>2017-07-15T01:25:43.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://7xjpra.com1.z0.glb.clouddn.com/technocombat_ilu_800x600.jpg" alt=""></p>
<a id="more"></a> 
<h3 id="AC__u548C_AC"><a href="#AC__u548C_AC" class="headerlink" title="AC 和 AC"></a>AC 和 AC</h3><p>Art &amp; Code （AC）是 00 新开的坑，记录对一个陌生但好玩的领域的学习历程。算法作曲(Algorithmic Composition) 是 AC 中的 1 号 AC 坑……欢迎围观我在大雾中摸索、游荡。也欢迎老司机帮我带带路~</p>
<p><img src="http://7xjpra.com1.z0.glb.clouddn.com/ACACAC-illustrate.jpg" alt=""></p>
<p>算法作曲 顾名思义，不是由人来作曲，而是经由设定好的算法，通过机器自动生成乐曲。</p>
<p>先别震惊，也别反感。我并不觉得机器会威胁人在音乐、艺术创造领域的优势。之所以研究算法作曲，纯粹出于对这两个领域的兴趣 —— 尤其是两个看似矛盾、对立的领域，碰撞在一起，一定有很嗨的火花吧！</p>
<blockquote>
<p>音乐虽然在表象上是流动音响的时间艺术，然而，从其基础理论设计与数学逻辑同构并进行符号化组织的角度来看，似乎没有任何一门艺术，天生能比音乐拥有更强的可计算性。 ​​​​<br>——黄雷基 <a href="https://mp.weixin.qq.com/s?__biz=MzA3Mjk0MTcyNg==&amp;mid=2649683495&amp;idx=1&amp;sn=18d9af0062b25b6f090bd291d2b4ffc7&amp;mpshare=1&amp;scene=1&amp;srcid=0624qKxE2leEZXU59q4k3vku&amp;key=51ed750aa8560dbf88c430bde4d013799282dbe39aca0f765f6ea94e75f43f04e7f3d2939f531de5d7e753b15c619173871930a2d3ce47bcf41660187643f6b1fe9b8aff79371fd8a771f3d1fa3693dd&amp;ascene=0&amp;uin=MTMyNjgw&amp;devicetype=iMac+MacBook8%2C1+OSX+OSX+10.12.5+build(16F73" target="_blank" rel="external">算法作曲的前世、今生和未来——回溯</a>)</p>
</blockquote>
<p><img src="http://7xjpra.com1.z0.glb.clouddn.com/robot_rock_dribbble.jpg" alt=""></p>
<p>站在坑口大概往里看了一眼，真是深不见底啊！基础乐理得学吧，作曲知识得学吧， DSP 得略懂一些吧，算法大概得了解吧，机器学习/深度学习得看看吧，工具和软件得试着用吧，前沿的项目得研究下吧……</p>
<p>一把年纪了怎么这么想不开？大概是年纪大了，更加觉得应该多花些时间在（起码看起来）好玩的事情上面呢！</p>
<p>系列第一篇，一起来回顾一下算法作曲并不长的历史。</p>
<h3 id="u7B97_u6CD5_u4F5C_u66F2_u7B80_u53F2"><a href="#u7B97_u6CD5_u4F5C_u66F2_u7B80_u53F2" class="headerlink" title="算法作曲简史"></a>算法作曲简史</h3><p>1952 年，28 岁的列哈伦•希勒（Lejaren Hiller􏶃）告别了杜邦公司，怀揣一大笔奖金重返校园。在美国伊利诺伊大学，这位 23 岁就拿到博士学位的化学家，开始了对合成橡胶的研究。</p>
<p><img src="http://www.musicainformatica.it/wp-content/uploads/2013/06/Lejaren_Arthur_Hiller_composer_holding_score.jpg" alt=""></p>
<p>也正是在同一年，第一台完全由美国大学研发的冯•诺伊曼式计算机 Illiac 正式亮相伊利诺伊大学。</p>
<p><img src="http://2.bp.blogspot.com/-a8PLqfvNuLQ/UKHtOgivzRI/AAAAAAAAAE4/PYUGVS7mV68/s1600/illiac1.png" alt=""></p>
<p>得天独厚的希勒得以接触到电子计算机，并用它来计算统计意义上理想聚合分子的大小。他无意中发现，如果将控制变量由几何数变为音符，同样的计算机代码可以用于对位法谱曲。一向对音乐颇有兴趣的希勒开始不务正业，试着利用计算机来谱曲，他不仅在闲暇时间开始攻读音乐硕士学位，还把自己的助手——化学师里奥纳德•艾撒克逊（􏹴􏹵􏰉􏻺􏹛Leonard Isaacson）一同拉下了水。</p>
<p><img src="http://s7.computerhistory.org/is/image/CHM/500004127-03-01?$re-medium$" alt=""></p>
<p>1956年，在美国计算机协会（ACM）的一次会议上，希勒做了一场关于计算机创作音乐的报告。听众的反应不一，有趣的是，计算机专家们大多对此持非常开放的态度，音乐家们则显得更为谨慎，而很多其他领域的学者们却认为他完全是在胡说八道。</p>
<p>不管怎样，希勒的第一个作品在 1957 年诞生。</p>
<p>为了纪念用来作曲的计算机 Illiac，他为这支弦乐四重奏取名「依利亚克组曲」（Illiac Suite），这也是历史上第一支完全由计算机生成的音乐作品。他们基于产生——测试的方法创作，首先使用 Markov 链模型来产生有限控制的随机音符，之后利用和声与复调的规则测试这些音符，最后选择符合规则的材料，修改、组合成传统音乐记谱的弦乐四重奏。</p>
<p><img src="http://blogs.diariovasco.com/bigbang/files/IlliacSuiteexperimento1br.jpg" alt=""></p>
<p>【找乐曲】</p>
<p><a href="http://www.musicainformatica.org/topics/illiac-suite.php" target="_blank" rel="external">该作品分为四个乐章</a>：</p>
<ul>
<li>第一乐章：计算机生成的不同长度的固定主题旋律</li>
<li>第二乐章：使用变奏的规则生成的四声部音乐</li>
<li>第三乐章：通过计算机对节奏、动态和演奏法的不同处理生成的音乐</li>
<li>第四乐章：通过衍生算法和马尔科夫链的不同模型及概率生成的音乐</li>
</ul>
<p>希勒从此彻底投入计算机音乐创作的怀抱，他转入音乐系任教，成立实验性的音乐工作室。</p>
<p>随后希勒又开拓了他的很多个「第一次」，如最先进行乐谱打印，最早使用物理模型合成技术等，创作了「算法」系列，「计算机康塔塔」，「HPSCHD」等一系列计算机作曲的音乐作品。</p>
<p>从此之后，在计算机快速发展的黄金年代，算法作曲也在世界各地的领域先驱们推动下快速发展。</p>
<p>1960 年，俄罗斯研究者 R.Kh.Zaripov 发行了全世界第一篇关于用「Ural-1」计算机进行算法音乐作曲的论文 <a href="http://adsabs.harvard.edu/abs/1960SPhD....5..479Z" target="_blank" rel="external">An Algorithmic Description of a Process of Musical Composition</a>。</p>
<p>1960 年，法国工程师、作曲家 Pierre Barbaud 成为欧洲第一个使用计算机作曲的作曲家。</p>
<p><img src="http://www.associationpierrebarbaud.fr/barbaud_portrait_AClaass.jpg" alt=""></p>
<p>他创作了「7!」，在有限状态机 (Finite State Automata) 和随机矩阵 (Stochastic Matrices) 的帮助下，将一系列规则运用到 12 音体系中，以此为调性和序列音乐风格建模。</p>
<p>1965年，发明家 Ray Kurzweil 首次公演了一首用计算机来创作的钢琴作品，这台计算机能够对各种不同的乐曲进行模式识别，并且可以分析和使用这些模式去创造新的旋律。</p>
<p>1974年，第一次国际计算机音乐会议召开（ICMC）。</p>
<p>随着计算机相关技术的发展和普及，越来越多的人关注到这个科技与艺术奇妙结合的领域，于是在那个新生流派争奇斗艳的先锋实验年代，各式各样的作曲算法涌现出来。</p>
<p>然而直到美国作曲家大卫·科普(David  Cope) 开发的「音乐智能实验」系统(Experiments in Musical Intelligence，简称 EMI，1981 年开始研究) ，1987 年在国际计算机音乐年会上第一次公开展示初期成果那时起，计算机音乐与传统音乐之间的桥梁才逐渐架设起来。</p>
<p><img src="http://50years.ucsc.edu/css/assets/images/posts/fourth-decade/1995-david-cope.jpg" alt=""></p>
<p><img src="http://www.computerhistory.org/atchm/wp-content/uploads/2015/04/MI0000985908-BachByDesign.jpg" alt=""></p>
<p>Cope 最初只想编写一个能够描述自己作曲风格的计算机程序，并用来记录自己作品的发展轨迹，不过很快他将目标转向了那些已故大师们，希望能用软件创造出带有不同大师风格的音乐作品。该系统所采取的方法涉及音乐文法和建立风格数据库等， Cope 将这样的工作称为 recombinancy —— 在现存的音乐上加入新的、符合原有逻辑的演绎，从而创造出新的作品。</p>
<p>比如 David Cope 用 EMI 创作的维瓦尔第风格的十二首管弦乐作品：「星座」。下面将要听到的这首是 「金牛座」（视频也是用算法自动生成的）</p>
<div class="video-container"><iframe src="//www.youtube.com/embed/2kuY3BrmTfQ" frameborder="0" allowfullscreen></iframe></div>
<p>1993年，美国科学家 John Al Biles 运用交互式遗传算法，设计了名为 GenJam 的交互式创作演奏系统。该系统能在现场演奏者的 4 或 8 小节演奏后单独生成一个类似风格的新旋律，也能与演奏者进行合奏，在演奏者演奏的同时生成并演奏一个新旋律。</p>
<p><img src="http://2.bp.blogspot.com/-naDY6-Sc_hU/Upgx1HgAJMI/AAAAAAAAAHg/ihtsVmHgkp0/s1600/genjam.png" alt=""></p>
<p>随着计算机制谱、乐器数字接口、信号处理、声音分析等技术的研究和应用逐渐兴起和深入，计算机音乐已经成为一个跨学科、跨媒介、跨文化的艺术形式和科学领域。</p>
<p>这么好玩的坑，要入吗？</p>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul>
<li>倪朝晖. (2015). 算法作曲理论与实践. 西南师范大学出版社</li>
<li><a href="https://mp.weixin.qq.com/s?__biz=MzA3Mjk0MTcyNg==&amp;mid=2649683495&amp;idx=1&amp;sn=18d9af0062b25b6f090bd291d2b4ffc7&amp;mpshare=1&amp;scene=1&amp;srcid=0624qKxE2leEZXU59q4k3vku&amp;key=51ed750aa8560dbf88c430bde4d013799282dbe39aca0f765f6ea94e75f43f04e7f3d2939f531de5d7e753b15c619173871930a2d3ce47bcf41660187643f6b1fe9b8aff79371fd8a771f3d1fa3693dd&amp;ascene=0&amp;uin=MTMyNjgw&amp;devicetype=iMac+MacBook8%2C1+OSX+OSX+10.12.5+build(16F73" target="_blank" rel="external">算法作曲的前世、今生和未来——回溯</a>)</li>
<li><a href="http://www.musicainformatica.org/topics/illiac-suite.php" target="_blank" rel="external">Illiac Suite | musicainformatica.org</a></li>
<li>Hoffmann, P. (2009). Music Out of Nothing? A Rigorous Approach to Algorithmic Composition by Iannis Xenakis. <a href="https://doi.org/http://dx.doi.org/10.14279/depositonce-2292" target="_blank" rel="external">https://doi.org/http://dx.doi.org/10.14279/depositonce-2292</a></li>
<li><a href="https://ccrma.stanford.edu/~blackrse/algorithm.html" target="_blank" rel="external">The History of Algorithmic Composition</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://7xjpra.com1.z0.glb.clouddn.com/technocombat_ilu_800x600.jpg" alt=""></p>]]>
    
    </summary>
    
      <category term="AlgorithmicComposition" scheme="http://uegeek.com/tags/AlgorithmicComposition/"/>
    
      <category term="Art" scheme="http://uegeek.com/tags/Art/"/>
    
      <category term="Code" scheme="http://uegeek.com/tags/Code/"/>
    
      <category term="算法作曲" scheme="http://uegeek.com/tags/%E7%AE%97%E6%B3%95%E4%BD%9C%E6%9B%B2/"/>
    
      <category term="动手" scheme="http://uegeek.com/categories/%E5%8A%A8%E6%89%8B/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[警惕信念的苛捐杂税 —— HackYourself 避税指南之一]]></title>
    <link href="http://uegeek.com/170624-hackyourself-cbt1.html"/>
    <id>http://uegeek.com/170624-hackyourself-cbt1.html</id>
    <published>2017-06-24T01:03:19.000Z</published>
    <updated>2017-07-15T01:15:58.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://7xjpra.com1.z0.glb.clouddn.com/dailythoughts.png" alt=""></p>
<a id="more"></a> 
<p>人每天会产生多少想法？</p>
<p>别着急回答。</p>
<p>试着闭上眼睛 30 秒，什么都不干，「观察」一下脑子里会出现些什么念头。</p>
<p>准备好了，闭上眼睛。</p>
<p><img src="http://7xjpra.com1.z0.glb.clouddn.com/30secondscountdown.gif" alt=""></p>
<p>留意到自己的念头了吗？</p>
<p>大部分人会惊诧于这 30 秒内产生的念头竟然有那么多，而且杂乱无章。</p>
<p>没错，在醒着的大部分时间里，我们持续产生着各式各样的念头。据未确切考证的<a href="http://blogs.discovermagazine.com/neuroskeptic/2012/05/09/the-70000-thoughts-per-day-myth/#.WU2hihOGOHo" target="_blank" rel="external">说法</a> <sup>[1]</sup>，人一天中产生的念头多达六七万个。这些念头闪过，却基本不会觉察它们的存在。</p>
<p>想想看，假设你开了一家大公司，有六七万人给你打工，但是你根本不知道他们都从哪里来。幽灵一般的员工们快速地来回穿梭，看似在工作，实际上只是机械地做着动作，你搞不清他们在做什么、公司是如何运作的。</p>
<p><img src="http://7xjpra.com1.z0.glb.clouddn.com/assembly-800-x-600.gif" alt=""></p>
<p>够可怕吧？这恰恰就是我们的常态——每分每秒都在产生念头，看似我们在「制造」和「控制」它们，实际上却被它们「影响」然后「不自觉地行动」。而且，念头也有「阶级」之分。有些念头催生了其他念头，属于坐享权力和影响力的「源头信念」。</p>
<p>也许我们没有意识到，每天都在为一些念头（尤其是源头信念）付出巨大的代价。某些信念让我们反复做出类似的决策，导致类似的结果，甚至形成一再重复的模式，反复上演相似的历史。比如从来没法坚持做好一件事，比如每个月都刷爆信用卡，比如感情上一直遇到渣男……</p>
<p>如果总是把结果轻描淡写归结为「一时糊涂」、「运气不好」等等，可能没有想过、也不愿意承认，这些结果往往源于一些未经审视的信念。不会有任何提醒，也没有半张收据，就像税赋一样，吸血于无形之中，然而你每天每月每年都在交，甚至要交上一辈子。</p>
<p><img src="http://7xjpra.com1.z0.glb.clouddn.com/giveandtake.jpg" alt=""></p>
<p>时隔半年，HackYourself 回归的第一个系列，00 想跟大家聊聊信念的苛捐杂税——我们在为哪些念头付出沉重代价，如何合理避税以便早日实现「精神的财务自由」。</p>
<h3 id="u5C0F_u7A0E_u53EF_u9003_uFF0C_u5927_u7A0E_u96BE_u514D"><a href="#u5C0F_u7A0E_u53EF_u9003_uFF0C_u5927_u7A0E_u96BE_u514D" class="headerlink" title="小税可逃，大税难免"></a>小税可逃，大税难免</h3><p>想逃税也需要界定一个范围，毕竟小税可逃，大税难免。</p>
<p>什么是「大税」呢？比如属于时代的信念税——历史局限性，这可是连重构学科体系的大佬们都无法突破的的框架：</p>
<p><img src="https://image.slidesharecdn.com/earthyquotesrev-12824374135542-phpapp02/95/paradigms-14-728.jpg?cb=1282419576" alt=""></p>
<p>时代信念税，往往一交就交大发了，世界商业版图都从此改变：</p>
<p><img src="http://img.picturequotes.com/2/587/586733/i-think-there-is-a-world-market-for-maybe-five-computers-quote-1.jpg" alt=""></p>
<p>错过一个时代不说，还会被后人耻笑：</p>
<p><img src="https://lukasdaalder.files.wordpress.com/2014/02/screenshot-2014-02-11-06-33-04.png?w=440&amp;h=230&amp;crop=1" alt=""></p>
<p>如果说「大税」交的是历史周期的税，那么「小税」又包含什么呢？让我们从群体历史周期回到个体历史周期。</p>
<p>从童年开始，我们已经对自己、他人以及世界形成了一定的看法，其中一些最核心的信念被认为是绝对真实和正确的。这些影响个体价值观、判断和行为的观念，关于自我最核心的观念，是避税指南系列想要探讨的重点。</p>
<p>认知语言学家莱考夫在「我们赖以生存的隐喻」一书中，语重心长地指出，我们的概念体系基于隐喻构建，抽象思维很大程度上是隐喻的，我们通过隐喻派生的推论为基础来生活。这些隐喻如此根深蒂固，我们根本都察觉不出它们的深刻影响。比如，「争论是战争」这一隐喻，贯穿在日常对「争论/讨论/辩论」等概念的理解和行动中：</p>
<p><img src="http://7xjpra.com1.z0.glb.clouddn.com/goodargument.jpg" alt=""></p>
<blockquote>
<p>他<strong>攻击</strong>我观点中的每一个弱点</p>
<p>我<strong>粉碎</strong>了他的论点</p>
<p>和他争论，我从来没<strong>赢</strong>过</p>
<p>你不同意？好吧，<strong>反击</strong>啊！</p>
<p>他<strong>击破</strong>了我的所有观点</p>
<p>……</p>
</blockquote>
<p>我们对每一句话都习以为常，用起来自然得根本意识不到争论也许有其他的形式和比喻，比如像跳双人舞，比如像打乒乓球。</p>
<p>我的一位朋友在婚姻中被婆媳关系折磨得发疯，一家人的无数冲突，可能都源于婆婆一直灌输给她丈夫的「信念」：一定要制服媳妇，让她听话、服服帖帖，不会骑在自己头上。多么经典的战争和控制权争夺的隐喻啊！生活在这种隐喻构建的观念和场景中，亲密关系从何构建？</p>
<h3 id="u5E38_u89C1_u7684_u4E2A_u4EBA_u4FE1_u5FF5_u7A0E"><a href="#u5E38_u89C1_u7684_u4E2A_u4EBA_u4FE1_u5FF5_u7A0E" class="headerlink" title="常见的个人信念税"></a>常见的个人信念税</h3><p>我们倾向于认为，大多数人持有相对正面和现实的核心信念，比如「大多数事情我能够胜任」、「我是有价值的人」，负面的核心信念只在遭遇一些应激事件导致内心痛苦时才表现出来。但只要稍微认真审视一下，或多或少会发现，一些隐蔽的信念在持续发挥着影响。即便优秀富有成效的人，也可能是受类似「我不被接受」之类的负面核心信念所驱动。</p>
<p>认知疗法之父 Aaron Beck 将核心信念分为三类<sup>[2]</sup>：</p>
<ol>
<li><p>无能类核心信念（Helpless Core Beliefs）</p>
<blockquote>
<p>我不能胜任<br>我做事毫无效率<br>任何事我都做不好<br>我很无助<br>我易受伤害<br>我贫苦<br>我失控<br>我是有缺陷的人 （例如，我比不上其他人）<br>我不够好 （成就方面）<br>我是失败者<br>……</p>
</blockquote>
</li>
</ol>
<ol>
<li><p>不可爱类核心信念（Unlovable Core Beliefs）</p>
<blockquote>
<p>我不可爱/不讨人喜欢/不受欢迎/没有吸引力<br>我是多余的<br>我被人忽视<br>我与人不同<br>我真坏（所以其他人不爱我）<br>我不够好（所以其他人不爱我）<br>我必定被拒绝<br>我必定孤独<br>……</p>
</blockquote>
</li>
</ol>
<ol>
<li><p>无价值类核心信念（Worthless Core Beliefs）</p>
<blockquote>
<p>我毫无价值<br>我不被接受<br>我是废物<br>我不道德<br>我很危险<br>我有罪<br>……</p>
</blockquote>
</li>
</ol>
<p>一眼看上去，大部分的核心信念好像都跟我们关系不大。</p>
<p>真的是这样吗？</p>
<p>想想，你为什么会把工作上的一件小事做得比别人好？</p>
<p>是真正乐于其中吗？还是害怕做不好会有后果？还是别人的称赞会让自己觉得有价值？为什么别人的称赞如此重要？为什么别人实际上没有做出的称赞成为了动力？……继续追问下去，有没有出现上面提到的核心信念？</p>
<p>想想，你为什么会把工作上的一件小事做得不如别人？</p>
<p>是不知道该怎么做吗？是觉得无聊不想做吗？是做得比别人慢吗？……继续追问下去，有没有出现上面提到的核心信念？</p>
<p>再想想，你为什么会在意跟别人比较工作成果？</p>
<p>是因为薪水吗？是因为不想被批评吗？是因为能获得成就感吗？……继续追问下去，有没有出现上面提到的核心信念？</p>
<p><img src="http://7xjpra.com1.z0.glb.clouddn.com/beg-23.png" alt=""></p>
<p>也许我们从来没有追问过核心信念，所以也不知道它们会造成怎样的影响和损失。</p>
<p>比如，在「我不够好（成就方面）」这样一个核心信念下，会有怎样的想法和行动？可能会将某种成就作为人生准绳而忽视其他重要的东西，可能会容易迷信权威，可能不敢表达自己的观点，可能很功利，可能容易半途而废……</p>
<p>这些信念导致的损失，就像名目繁多的税费，看似不存在，实则难以估量，说不定就是贫富差距的罪魁祸首。</p>
<p>当然，还有数不清的非核心信念（假设）也在慢慢氧化我们，比如：</p>
<ul>
<li>读过的书越多，掌握的知识就越多</li>
<li>道理懂得越多，人的判断力越好</li>
<li>房子应该存够首期再买</li>
<li>东西越便宜越好/越贵越好</li>
<li>朋友多说明人缘好，人缘好说明人好</li>
<li>做完的东西越多越好代表效率越高</li>
<li>……</li>
</ul>
<p>真的真的是这样吗？我也不知道。</p>
<p>欢迎留言，分享你交过的信念税。</p>
<p>下一篇开始，我们探讨如何识别出潜在信念，找到合理避税的突破口。</p>
<h3 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h3><ul>
<li>[1]. <a href="https://book.douban.com/subject/26298597/" target="_blank" rel="external">我们赖以生存的隐喻</a></li>
<li>[2]. Beck, A. T., Freeman, A., &amp; Davis, D. D. (2015). Cognitive Therapy of Personality Disorders. Guilford Publications.</li>
<li>[3]. <a href="http://blogs.discovermagazine.com/neuroskeptic/2012/05/09/the-70000-thoughts-per-day-myth/#.WU2hihOGOHo" target="_blank" rel="external">The 70,000 Thoughts Per Day Myth? - Neuroskeptic</a></li>
<li>[4]. <a href="http://list25.com/25-famous-predictions-that-were-proven-to-be-horribly-wrong/" target="_blank" rel="external">25 Famous Predictions That Were Proven To Be Horribly Wrong</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://7xjpra.com1.z0.glb.clouddn.com/dailythoughts.png" alt=""></p>]]>
    
    </summary>
    
      <category term="HackYourself" scheme="http://uegeek.com/tags/HackYourself/"/>
    
      <category term="Mind" scheme="http://uegeek.com/tags/Mind/"/>
    
      <category term="Psychology" scheme="http://uegeek.com/tags/Psychology/"/>
    
      <category term="叽歪" scheme="http://uegeek.com/categories/%E5%8F%BD%E6%AD%AA/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[17° 读书会笔记[6] - 设计的准则]]></title>
    <link href="http://uegeek.com/170415-design-principle.html"/>
    <id>http://uegeek.com/170415-design-principle.html</id>
    <published>2017-04-15T01:03:19.000Z</published>
    <updated>2017-07-15T01:06:36.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://7xjpra.com1.z0.glb.clouddn.com/161218readingtitle.png" alt=""></p>
<a id="more"></a> 
<p>17° 读书会第 6 本书：<a href="https://book.douban.com/subject/26882272/" target="_blank" rel="external">设计的准则</a></p>
<p><img src="https://img3.doubanio.com/lpic/s29068132.jpg" alt=""></p>
<p>阅读时间：2017-03-19 ~ 2017-03-25</p>
<blockquote>
<p>这本小书不是要扼杀创造力，也不是要将其简化为一堆原则，它并非妨碍好设计发生的方程式，而是希望制止对设计专业复杂性缺乏了解的状况。大脑应该负责运用合适的方程式去实现预期的结果。</p>
</blockquote>
<h2 id="u8BFB_u524D_u95EE_u9898"><a href="#u8BFB_u524D_u95EE_u9898" class="headerlink" title="读前问题"></a>读前问题</h2><ul>
<li>设计中的「准则」起到什么作用？</li>
<li>作者认为无形因素和有形因素如何怎样影响设计？</li>
<li>设计的语义、句法和语用分别指什么？</li>
<li>哪些准则对我的启发最大？</li>
</ul>
<h2 id="u8BFB_u540E_u601D_u8003"><a href="#u8BFB_u540E_u601D_u8003" class="headerlink" title="读后思考"></a>读后思考</h2><p>马西莫·维涅里（Massimo Vignelli，1931—2014）是意大利国宝级设计师，现代主义设计的开拓中坚，二十世纪下半叶视觉传达发展进程中具有深远影响的人物之一。他的设计领域涵盖了包装、产品、家具、展示设计到公共标识。</p>
<p>1966年，维涅里同其他设计师共同创办了 Unimark International，这家设计所很快便成为了世界上最大的设计公司之一，并为众多世界知名企业设计了身份标识，如美国航空、美国布鲁明代尔百货公司、福特、IBM等。这一时期，维涅里最著名的设计作品是纽约地铁线路图。1971年，维涅里离开 Unimark，与妻子莱拉一起在纽约创办了维涅里设计事务所，被视为设计界的全能常青树。</p>
<p><img src="http://7xjpra.com1.z0.glb.clouddn.com/17032504bf6e7e140fe72a14841816405ec424.jpg" alt=""></p>
<p>这本书提供了对平面设计中「标准」的思考，有助于更好地理解版式设计的基本原理。</p>
<blockquote>
<p>设计是一种规则，是带有其自身规定法则的创造性的过程，围绕其目标，以最直接且最具有表现力的方式控制着结果的统一性。</p>
</blockquote>
<p>跟前面几本书一样，维涅里也提出了他对设计的定义。Paul Rand 认为设计是处理关系，原研哉认为设计是对生活意义的表达，Papanek 认为设计是为了达成有意义的秩序而进行的有意识而又富于直觉的努力。维涅里的定义更加带有「原教旨主义」的意味，认为设计是创造（严肃的）规则。</p>
<blockquote>
<p>规则是一组自我设定的准则，规范着我们的实践。混乱、复杂的设计揭露同样混乱、复杂的头脑。</p>
</blockquote>
<p>维涅里将设计作品中凝练的规律视为最高准绳，厌恶多余、粗鄙、杂质、混乱。他认为设计如果没有规则，将是混乱的，是一种没有责任心的活动，这就是「无规矩不成方圆」吧~</p>
<p>准则反应了设计师在长期的设计实践中，对「如何做出更好的设计」的种种试验和反思：哪些问题重复出现？哪些因素影响效果？哪些做法总是奏效？当设计师在「经验」和「理想的设计效果」中建立起强关联，就会将「经验」升级为「准则」。</p>
<p><img src="http://s3files.core77.com/blog/images/Massimo_Vignelli_Canon.jpg" alt=""></p>
<p>维涅里把设计的准则分成无形因素和有形因素。</p>
<table>
<thead>
<tr>
<th>无形因素</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>语义学</td>
<td>设计追寻意义。全方位多角度地理解设计主体，并且在设计主体与发送端和接收端之间，以对双方都有意义的方式建立联系。</td>
</tr>
<tr>
<td>句法学</td>
<td>在遣词造句和设计语言表达中控制语法的正确使用的准则。</td>
</tr>
<tr>
<td>语用学</td>
<td>设计所传达的意义应该被理解</td>
</tr>
<tr>
<td>规则</td>
<td>规则是一组自我设定的准则，规范着我们的实践。</td>
</tr>
<tr>
<td>适度性</td>
<td>在适当的范围内进行探索，指导我们选择正确的媒介、正确的材料、正确的比例、正确的表达方式和色彩与肌理</td>
</tr>
<tr>
<td>模糊性</td>
<td>多元，物体以不同方式真实存在的可能性</td>
</tr>
<tr>
<td>历史、理论与批评</td>
<td>从时代-运动-表现方式-设计师-设计作品中寻找「为什么」和洞察</td>
</tr>
<tr>
<td>现代主义</td>
<td>对于生产过程以及产品最终目的的认识，是一种意识形态的反应</td>
</tr>
<tr>
<td>设计为一</td>
<td>设计的规则是唯一的，可以被运用于许多不同的设计主题中，它高于并超越任何风格</td>
</tr>
<tr>
<td>视觉的力量</td>
<td>就一件设计作品而言，至关重要的是它应该充满了视觉张力，并以其独特的呈现来实现设计意图</td>
</tr>
<tr>
<td>智慧的优雅</td>
<td>引导我们走向一切创造性活动最佳解决方案的线索，是思维的终极目标</td>
</tr>
<tr>
<td>永恒性</td>
<td>探索客观价值，不追逐潮流，以恰当的方式反映内容</td>
</tr>
<tr>
<td>责任感</td>
<td>设计的结果应该能够独立存在，并且无需借口、解释、致歉</td>
</tr>
<tr>
<td>光</td>
<td>光塑造了一切「表现」</td>
</tr>
<tr>
<td>任意性</td>
<td>为了追求自由，以任意性抵制规则是错误的，而自由是有条件与界限的，反之则是混沌、任性、朝生暮死与肤浅的</td>
</tr>
<tr>
<td>语境</td>
<td>设计与被设计对象的终结目标之间的相互关系</td>
</tr>
<tr>
<td>影响</td>
<td>“影响”以深入且形成性的方式作用于思维，而“灵感”则偏向具有朝生暮死的本质</td>
</tr>
<tr>
<td>营销</td>
<td>获得市场成功需要愿景、勇气与决心，而不是市场调研与焦点族群的掣肘，好设计需要勇气</td>
</tr>
</tbody>
</table>
<p>在有形因素部分，维涅里仔细阐述了平面设计和版式设计中的一些黄金规则，包括书籍网格的使用、字体尺寸、色彩、装订等等。他极力主张简化设计元素的复杂性，通过少量的样式传达出意义、平衡、优雅。</p>
<blockquote>
<p>在人人喧嚣当中，沉默反而是会被关注的。空白空间提供了宁静——那就是我们版式设计的精髓。</p>
</blockquote>
<p>相比无形部分，有形部分的规则多少让人觉得枯燥而没有新意。正是这种近似刻板的准则，让我们感受到维涅里对设计的「混乱」充满担忧。他将「随意」导致的复杂和混乱作为设计的大敌，热爱那些大道至简的底层规律。</p>
<p><img src="http://monotypecom.s3.amazonaws.com/images/4ad38be7244043d8/MV_6.jpg" alt=""></p>
<p>对于「规则」，受限于历史、环境、载体、目的等，规则可能不再适用。但是对「什么是优雅的设计」规律的追求，所有设计师都应该永不停歇。</p>
<p>最后，用书中最后一段话作为结尾：</p>
<blockquote>
<p>我爱系统，而藐视偶然的巧合。</p>
<p>我爱模糊性，因为在我看来模糊性意味着多重的含义；我爱矛盾，因为它使事物保持发展，能避免预设某种僵化的含义，也避免停滞与压迫。</p>
<p>正如同我爱处于变化中的事物那样，我也乐于看它们存在于一个参照系之中——这种关照方式始终如一地保证了我自始至终是负责每一处细节的那个人。</p>
<p>我爱设计，这就是原因。</p>
</blockquote>
<p><img src="http://monotypecom.s3.amazonaws.com/images/972e2e2eb2dc5094/MV_1.jpg" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://7xjpra.com1.z0.glb.clouddn.com/161218readingtitle.png" alt=""></p>]]>
    
    </summary>
    
      <category term="Design" scheme="http://uegeek.com/tags/Design/"/>
    
      <category term="Note" scheme="http://uegeek.com/tags/Note/"/>
    
      <category term="设计" scheme="http://uegeek.com/tags/%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="设计" scheme="http://uegeek.com/categories/%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[DeepLearning-2 语言模型和 N-gram]]></title>
    <link href="http://uegeek.com/170312-deeplearning-week1.html"/>
    <id>http://uegeek.com/170312-deeplearning-week1.html</id>
    <published>2017-03-12T13:58:23.000Z</published>
    <updated>2017-07-15T01:21:09.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://7xjpra.com1.z0.glb.clouddn.com/dl-week0-title.png" alt=""></p>
<a id="more"></a> 
<p>语言模式是自然语言处理的一个基础概念。我们可以从语料中得到「语言模型」—— 即句子的概率，可用于：</p>
<ul>
<li>发现错别句子</li>
<li>发现新短语</li>
<li>生成句子（如<a href="https://github.com/phunterlau/wangfeng-rnn" target="_blank" rel="external">模仿汪峰写歌</a>）</li>
</ul>
<p>机器怎样理解自然语言呢？有两种思路：</p>
<ul>
<li>学习语法：词性、句子成分，但不能保证语义，如，火星追杀绿色的梦</li>
<li>概率统计：<a href="https://www.wikiwand.com/zh-cn/%E9%BD%8A%E5%A4%AB%E5%AE%9A%E5%BE%8B" target="_blank" rel="external">齐夫定律</a>（词频 $\propto \frac{1}{rank}$ ：频率最高的单词出现的频率大约是出现频率第二位的单词的2倍，而出现频率第二位的单词则是出现频率第四位的单词的2倍），香农的信息论</li>
</ul>
<h3 id="u6982_u7387_u8BBA_u57FA_u672C_u539F_u7406"><a href="#u6982_u7387_u8BBA_u57FA_u672C_u539F_u7406" class="headerlink" title="概率论基本原理"></a>概率论基本原理</h3><p>概率空间：所有可能的结果。概率中的原子结构是基本事件，不可分割，不重叠；分子结构是事件（基本事件的集合）。事件的概率，可以理解为所选取的基本事件在整个空间里占的面积比例。</p>
<ul>
<li>联合概率 P(A,B)：两个事件同时发生，比如掷两次筛子，可能有 $6^2$ 种结果。</li>
<li>条件概率 P(B|A)：A 条件下 B 发生的概率。从一个大的空间进入到一个子空间（切片），计算在子空间中的占比。$P(B|A) = \frac{P(A,B)}{P(A)}$</li>
</ul>
<h3 id="u6982_u7387_u8BED_u8A00_u6A21_u578B"><a href="#u6982_u7387_u8BED_u8A00_u6A21_u578B" class="headerlink" title="概率语言模型"></a>概率语言模型</h3><ul>
<li>计算句子的概率： $P(S) = P(w_1,w_2,w_3,…,w_n)$</li>
<li>用处：句子错误检查、输入法候选、生成有用的句子等等</li>
<li>统计：随着空间膨胀，数据变稀疏，样本有效性降低</li>
</ul>
<p>对句子做最简化的处理，先考虑只有两个词的句子，根据条件概率公式，它的概率等于第一个词的空间占比，乘以第一个词的概率空间中第二个词的占比：$P(w_1,w_2) = P(w_2|w_1)*P(w_1)$</p>
<p>最初级的语言模型（Unigram），可以人为地假设词之间是独立的： $P(w_2|w_1) \approx P(w_2)$，于是这个句子的概率约等于两个词的频率相乘： $P(w_2,w_1) \approx P(w_1)*P(w_2)$ </p>
<p>如果把两个词的句子扩展为三个词：$P(w_1,w_2,w_3) = p(w_1,w_2)<em>p(w_3|w_1,w_2) = p(w_1)</em>p(w_2|w_1)*p(w_3|w_1,w_2)$</p>
<p>以此类推：</p>
<p>$P(w_1,w_2,…w<em>n) = \prod</em>{i} P(w_i|w_1w<em>2…w</em>{i-1})$</p>
<p>这样做的话，对每个词要考虑它前面的所有词，这在实际中意义不大。可以做些简化吗？</p>
<p>我们可以基于马尔科夫假设来做简化。</p>
<blockquote>
<p>马尔科夫假设是指，每个词出现的概率只跟它前面的少数几个词有关。比如，二阶马尔科夫假设只考虑前面两个词，相应的语言模型是三元模型。引入了马尔科夫假设的语言模型，也可以叫做马尔科夫模型。</p>
<p>马尔可夫链（Markov chain）为狀態空間中经过从一个状态到另一个状态的转换的随机过程。该过程要求具备“无记忆”的性质：下一状态的概率分布只能由当前状态决定，在时间序列中它前面的事件均与之无关。</p>
</blockquote>
<p>比如对上面公式做一个 i-k 的简化：</p>
<p>$P(w_1,w_2,…w<em>n) \approx \prod</em>{i} P(w<em>i|w</em>{i-k}…w_{i-1})$</p>
<p>物理意义上说，上面的公式意味着每次看到 i 时，只要关注 i 前面的 k 个词，这就是 N-gram 模型的思路。</p>
<h3 id="u4F5C_u4E1A"><a href="#u4F5C_u4E1A" class="headerlink" title="作业"></a>作业</h3><p>作业 1：$P(w_1,w_2) = P(w_2|w_1)*P(w_1)$ 没有减少参数个数，为什么？</p>
<p>作业 2：在自己选取的数据集合上建立 Bigram 模型，并使用该建立好的模型生成句子。</p>
<h3 id="u5176_u4ED6"><a href="#u5176_u4ED6" class="headerlink" title="其他"></a>其他</h3><p>技巧：进入 docker 容器的 shell 环境</p>
<p><code>docker exec -it container_id /bin/bash</code></p>
<h3 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h3><ul>
<li><a href="https://www.wikiwand.com/zh-cn/%E9%BD%8A%E5%A4%AB%E5%AE%9A%E5%BE%8B" target="_blank" rel="external">齐夫定律</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2015/07/monte-carlo-method.html" target="_blank" rel="external">蒙特卡罗方法入门 - 阮一峰的网络日志</a></li>
<li><a href="http://www.cs.columbia.edu/~mcollins/lm-spring2013.pdf" target="_blank" rel="external">Language Modeling - Course notes for NLP by Michael Collins, Columbia University</a></li>
<li><a href="https://web.stanford.edu/~jurafsky/slp3/4.pdf" target="_blank" rel="external">Language Modeling with Ngrams</a></li>
<li><a href="https://www.youtube.com/watch?v=s3kKlUBa3b0" target="_blank" rel="external">4 - 1 - Introduction to N-grams- Stanford NLP - Professor Dan Jurafsky &amp; Chris Manning - YouTube</a></li>
<li><a href="https://www.wikiwand.com/zh/%E9%A9%AC%E5%B0%94%E5%8F%AF%E5%A4%AB%E9%93%BE" target="_blank" rel="external">马尔可夫链 - Wikiwand</a></li>
<li><a href="https://github.com/sunoonlee/DeepLearning101/issues/2" target="_blank" rel="external">sunoonlee 同学的笔记</a></li>
<li><a href="https://github.com/zhatrix/DeepLearning101/blob/master/ch1/project/assignmentch1.ipynb" target="_blank" rel="external">DeepLearning101/zhatrix/DeepLearning101</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://7xjpra.com1.z0.glb.clouddn.com/dl-week0-title.png" alt=""></p>]]>
    
    </summary>
    
      <category term="AI" scheme="http://uegeek.com/tags/AI/"/>
    
      <category term="Deep learning" scheme="http://uegeek.com/tags/Deep-learning/"/>
    
      <category term="Docker" scheme="http://uegeek.com/tags/Docker/"/>
    
      <category term="深度学习" scheme="http://uegeek.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="动手" scheme="http://uegeek.com/categories/%E5%8A%A8%E6%89%8B/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[DeepLearning-1：神经网络和 Docker 入门]]></title>
    <link href="http://uegeek.com/170304-deeplearning-week0.html"/>
    <id>http://uegeek.com/170304-deeplearning-week0.html</id>
    <published>2017-03-04T13:58:23.000Z</published>
    <updated>2017-03-04T14:04:44.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://7xjpra.com1.z0.glb.clouddn.com/dl-week0-title.png" alt=""></p>
<a id="more"></a> 
<h2 id="u4E00_u3001_u795E_u7ECF_u7F51_u7EDC_u7B80_u4ECB"><a href="#u4E00_u3001_u795E_u7ECF_u7F51_u7EDC_u7B80_u4ECB" class="headerlink" title="一、神经网络简介"></a>一、神经网络简介</h2><p>人工神经网络：在输入层和输出层中间加入多个隐层。</p>
<ul>
<li>Top-down approach to AI ：西蒙为代表的符号学派<ul>
<li>形式化方法，将知识表示为符号</li>
<li>运用逻辑进行推理</li>
<li>对自然语言、图像问题基本毫无办法</li>
</ul>
</li>
<li>Bottom-up approach to AI：神经网络，从最底层（神经元）开始构建</li>
</ul>
<p>神经网络的历史</p>
<ul>
<li>40年代：概念雏形（没有学习算法）</li>
<li>50年代：可用的学习算法 - 感知机</li>
<li>1969年：Minsky 泼冷水</li>
<li>70年代：BP 算法，训练多层神经网络</li>
<li>90年代：SVM 支持向量机「打败」神经网络</li>
<li>2006：深层网络理论、实验上有所突破</li>
<li>2012：ImageNet，大幅提升结果（错误率 15.3%）</li>
</ul>
<p>深度学习框架很多，不需要纠结使用哪种框架：</p>
<ul>
<li>Tensorflow：Google 开源主推，是最流行的框架，文档齐全。底层是 C++ ，如果对性能要求不高，用 Python 开发的效率更高</li>
<li>MXNet：亚马逊主推</li>
<li>Caffe：图形领域，自然语言处理稍弱</li>
<li>Torch：Facebook 主推</li>
</ul>
<h2 id="u4E8C_u3001Docker__u73AF_u5883_u5B89_u88C5_u548C_u914D_u7F6E"><a href="#u4E8C_u3001Docker__u73AF_u5883_u5B89_u88C5_u548C_u914D_u7F6E" class="headerlink" title="二、Docker 环境安装和配置"></a>二、Docker 环境安装和配置</h2><p>Docker 是什么？容器化技术的实现，可以理解为一个轻量级的虚拟环境。</p>
<p>之前 00 被 Python 的版本和各种包虐过，所以折腾了 <a href="https://virtualenv.pypa.io/en/stable/" target="_blank" rel="external">Virtualenv</a> 的方法，一个项目新建一个 Python 环境。那么 Docker 跟 Virtualenv 的区别是什么呢？</p>
<blockquote>
<p>Docker completely isolates the TensorFlow installation from pre-existing packages on your machine. The Docker container contains TensorFlow and all its dependencies. </p>
</blockquote>
<p>Docker 有一个 Image 的概念，可以理解为别人已经制作好的环境（类似安卓手机装机软件），把 Python + TensorFlow + Jupyter Notebook 打包好。</p>
<h3 id="Docker__u5B89_u88C5_u548C_u914D_u7F6E_u6B65_u9AA4"><a href="#Docker__u5B89_u88C5_u548C_u914D_u7F6E_u6B65_u9AA4" class="headerlink" title="Docker 安装和配置步骤"></a>Docker 安装和配置步骤</h3><p>第一步：下载 <a href="https://store.docker.com/editions/community/docker-ce-desktop-mac?tab=description" target="_blank" rel="external">Docker Community Edition for Mac</a>安装。</p>
<p>用 <code>docker version</code> 可以查看版本：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kidults-NMB:~ kidult$ docker version&#10;Client:&#10; Version:      17.03.0-ce&#10; API version:  1.26&#10; Go version:   go1.7.5&#10; Git commit:   60ccb22&#10; Built:        Thu Feb 23 10:40:59 2017&#10; OS/Arch:      darwin/amd64&#10;&#10;Server:&#10; Version:      17.03.0-ce&#10; API version:  1.26 (minimum version 1.12)&#10; Go version:   go1.7.5&#10; Git commit:   3a232c8&#10; Built:        Tue Feb 28 07:52:04 2017&#10; OS/Arch:      linux/amd64&#10; Experimental: true</span><br></pre></td></tr></table></figure>
<p>使用 Docker 时，命令行相当于客户端，服务器端在安装完成后需要启动。</p>
<p>第二步：到 <a href="https://hub.docker.com/" target="_blank" rel="external">Docker hub</a> 找到 TensorFlow Image ，以此为模板构建自己的容器。参考 <a href="https://github.com/tensorflow/tensorflow/blob/master/tensorflow/tools/docker/README.md" target="_blank" rel="external">Using TensorFlow via Docker</a>，用 <code>run</code> 命令加载 TensorFlow image：</p>
<p><code>docker run -it -p 8888:8888 tensorflow/tensorflow</code></p>
<p>开始下载后，发现速度非常慢：</p>
<p><img src="http://7xjpra.com1.z0.glb.clouddn.com/download_tensorflow_image.png" alt=""></p>
<p>参考小伙伴的 <a href="http://www.jianshu.com/p/d896ec46db66" target="_blank" rel="external">Docker Hub Mirror加速Docker官方镜像下载</a> 笔记，使用镜像下载。在 Mac 上配置<a href="https://www.daocloud.io/mirror#accelerator-doc" target="_blank" rel="external">加速器</a>很简单，右键点击桌面顶栏的 docker 图标，选择 Preferences ，在 Advanced 标签下的 Registry mirrors 列表中加入镜像地址: <code>http://d43d99f5.m.daocloud.io Copy</code>，点击 Apply &amp; Restart 按钮使设置生效。</p>
<p><img src="http://7xjpra.com1.z0.glb.clouddn.com/docker_mirror.png" alt=""></p>
<p>再次运行<code>docker run -it -p 8888:8888 tensorflow/tensorflow</code>，速度飞了起来~</p>
<p>下载成功后，可以在浏览器看到 Jupyter Notebook 界面：</p>
<p><img src="http://7xjpra.com1.z0.glb.clouddn.com/docker-image-loaded.png" alt=""></p>
<h3 id="Docker__u5E38_u7528_u547D_u4EE4"><a href="#Docker__u5E38_u7528_u547D_u4EE4" class="headerlink" title="Docker 常用命令"></a>Docker 常用命令</h3><ul>
<li>关闭 docker：control+c</li>
<li>查看运行状态：<code>docker ps</code> </li>
<li>把本地目录映射到容器：<code>docker run -it -p 8888:8888 -v 原路径:目标路径 tensorflow/tensorflow</code></li>
<li><p>查看历史容器：<code>docker ps -a</code> </p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kidults-NMB:my_venv kidult$ docker ps -a&#10;CONTAINER ID        IMAGE                   COMMAND             CREATED             STATUS                      PORTS                              NAMES&#10;f4eaa7828ac5        tensorflow/tensorflow   &#34;/run_jupyter.sh&#34;   7 minutes ago       Up About a minute           6006/tcp, 0.0.0.0:8888-&#62;8888/tcp   priceless_mccarthy&#10;b09563e0479b        tensorflow/tensorflow   &#34;/run_jupyter.sh&#34;   52 minutes ago      Exited (0) 7 minutes ago                                       silly_chandrasekhar&#10;d669d764de48        tensorflow/tensorflow   &#34;/run_jupyter.sh&#34;   About an hour ago   Exited (0) 52 minutes ago                                      relaxed_davinci</span><br></pre></td></tr></table></figure>
</li>
<li><p>恢复历史容器：<code>docker start -i id</code> (ID只需要写前几位)</p>
</li>
<li>删除容器：<code>docker rm id</code> </li>
<li>重命名容器：<code>docker rename CONTAINER ID XXX</code>(重命名为 dl)</li>
<li>在容器里安装包：<code>!pip install xxx</code></li>
</ul>
<p>参考 <a href="https://github.com/junjielizero/DeepLearning101/blob/master/ch0/note/README.md" target="_blank" rel="external">junjielizero 同学的笔记</a>，优化了几个步骤：</p>
<ol>
<li><p>创建跟 github 同步的容器：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -p 8888:8888 -v ~/Workspace/DeepLearning101/:/Workspace/DeepLearning101 -w /Workspace/DeepLearning101 tensorflow/tensorflow</span><br></pre></td></tr></table></figure>
</li>
<li><p>给 docker 启动命令起别名</p>
<p> 把课程容器改名为<code>dl</code>，然后新建别名 <code>alias dsdl=&quot;docker start -i dl&quot;</code></p>
</li>
<li><p>在 iTerm2 运行 <code>dsdl</code>，按着 Command 点击链接 localhost:8888 即可打开项目</p>
</li>
</ol>
<h2 id="u4E09_u3001_u8BCD_u9891_u7EDF_u8BA1_u4F5C_u4E1A"><a href="#u4E09_u3001_u8BCD_u9891_u7EDF_u8BA1_u4F5C_u4E1A" class="headerlink" title="三、词频统计作业"></a>三、词频统计作业</h2><blockquote>
<p>统计 <a href="https://github.com/AIMinder/DeepLearning101/blob/master/ch0/code/happiness.txt" target="_blank" rel="external">happiness.txt</a> 的词频</p>
</blockquote>
<p>思路：读取文件 → 用 jieba 分词 → 清除非中文字符 → 用 counter 计数 → 用 sorted 排序</p>
<ol>
<li><p>读取文件</p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">loadfile = open(<span class="string">'happiness.txt'</span>, <span class="string">'r'</span>)</span><br><span class="line">text = loadfile.read().decode(<span class="string">'utf-8'</span>)</span><br><span class="line">loadfile.close()</span><br></pre></td></tr></table></figure>
</li>
<li><p>用 jieba 分词</p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">words = jieba.cut(text)</span><br></pre></td></tr></table></figure>
</li>
<li><p>清除非中文字符</p>
<blockquote>
<p>re.match(pattern, string, flags=0)</p>
<p>If zero or more characters at the beginning of string match the regular expression pattern, return a corresponding MatchObject instance. Return None if the string does not match the pattern.</p>
</blockquote>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> words:</span><br><span class="line">   	<span class="keyword">if</span> re.match(<span class="string">u'([\u4e00-\u9fff]+)'</span>, word):</span><br><span class="line">  		     segments.append(word)</span><br></pre></td></tr></table></figure>
</li>
<li><p>用 Counter 计数，用 sorted 排序</p>
<p> Counter 用法</p>
<blockquote>
<p>collections.Counter([iterable-or-mapping])</p>
<p>A Counter is a dict subclass for counting hashable objects. It is an unordered collection where elements are stored as dictionary keys and their counts are stored as dictionary values.</p>
</blockquote>
<p> sorted 用法</p>
<blockquote>
<p>sorted(iterable[, cmp[, key[, reverse]]])<br> Return a new sorted list from the items in iterable.</p>
<p>cmp specifies a custom comparison function of two arguments which should return a negative, zero or positive number depending on whether the first argument is considered smaller than, equal to, or larger than the second argument: cmp=lambda x,y: cmp(x.lower(), y.lower()). The default value is None.</p>
</blockquote>
<p> lambda 表达式用法</p>
<blockquote>
<p>通常在需要一个函数但是又不想命名一个函数时使用，即匿名函数。比如实现一个可以求list中所有元素和的函数：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">from functools import reduce &#10;l = [1,2,3,5,-9,0,45,-99] &#10;reduce(lambda x,y:x+y,l)</span><br></pre></td></tr></table></figure>
</blockquote>
<p> 在这里，用 Counter 统计字典中词的出现次数，以 lambda 取字典中的 value 值（key 是 x[0]，value 就是 x[1]）用 sorted 方法按降序排序：</p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sorted_list = sorted(Counter(dict).items(), key=<span class="keyword">lambda</span> x:x[<span class="number">1</span>], reverse=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>最后，完整的代码和结果如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jieba <span class="comment"># for spliting</span></span><br><span class="line"><span class="keyword">import</span> re <span class="comment"># for regular expression</span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter <span class="comment"># for stat</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Read file</span></span><br><span class="line">loadfile = open(<span class="string">'happiness.txt'</span>, <span class="string">'r'</span>)</span><br><span class="line">text = loadfile.read().decode(<span class="string">'utf-8'</span>)</span><br><span class="line">loadfile.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Split words into a dict</span></span><br><span class="line">dict = []</span><br><span class="line">words = jieba.cut(text)</span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> words:</span><br><span class="line">    <span class="keyword">if</span> re.match(<span class="string">u'([\u4e00-\u9fff]+)'</span>, word):</span><br><span class="line">        dict.append(word)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Sort the list</span></span><br><span class="line">sorted_list = sorted(Counter(dict).items(), key=<span class="keyword">lambda</span> x:x[<span class="number">1</span>], reverse=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Print result</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> sorted_list[:<span class="number">10</span>]:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">" '%s' : %d "</span> % (i[<span class="number">0</span>], i[<span class="number">1</span>])</span><br></pre></td></tr></table></figure>
<p>结果：</p>
<pre><code>&apos;的&apos; : 22848 
&apos;是&apos; : 4123 
&apos;在&apos; : 3538 
&apos;他&apos; : 2522 
&apos;了&apos; : 2288 
&apos;人&apos; : 2089 
&apos;他们&apos; : 1811 
&apos;和&apos; : 1746 
&apos;有&apos; : 1478 
&apos;我&apos; : 1433 
</code></pre><h3 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h3><ul>
<li><a href="https://github.com/dccrazyboy/pyeco/blob/master/pyeco.rst" target="_blank" rel="external">Python开发生态环境简介</a></li>
<li><a href="https://www.tensorflow.org/install/install_mac" target="_blank" rel="external">Installing TensorFlow on Mac OS X </a></li>
<li><a href="https://hub.docker.com/r/tensorflow/tensorflow/" target="_blank" rel="external">tensorflow/tensorflow - Docker Hub</a></li>
<li><a href="https://github.com/tensorflow/tensorflow/blob/master/tensorflow/tools/docker/README.md" target="_blank" rel="external">Using TensorFlow via Docker</a></li>
<li><a href="http://www.jianshu.com/p/d896ec46db66" target="_blank" rel="external">Docker学习笔记(2)–使用Docker Hub Mirror加速Docker官方镜像下载</a></li>
<li><a href="https://www.daocloud.io/mirror#accelerator-doc" target="_blank" rel="external">配置 Docker 加速器</a></li>
<li><a href="https://computers.tutsplus.com/tutorials/speed-up-your-terminal-workflow-with-command-aliases-and-profile--mac-30515" target="_blank" rel="external">Speed Up Your Terminal Workflow with Command Aliases and .profile</a></li>
<li><a href="https://github.com/fxsjy/jieba" target="_blank" rel="external">fxsjy/jieba: 结巴中文分词</a></li>
<li><a href="https://www.zhihu.com/question/20125256" target="_blank" rel="external">Lambda 表达式有何用处？如何使用？</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://7xjpra.com1.z0.glb.clouddn.com/dl-week0-title.png" alt=""></p>]]>
    
    </summary>
    
      <category term="AI" scheme="http://uegeek.com/tags/AI/"/>
    
      <category term="Deep learning" scheme="http://uegeek.com/tags/Deep-learning/"/>
    
      <category term="Docker" scheme="http://uegeek.com/tags/Docker/"/>
    
      <category term="深度学习" scheme="http://uegeek.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="动手" scheme="http://uegeek.com/categories/%E5%8A%A8%E6%89%8B/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[17°读书会笔记[4]- 为真实的世界设计]]></title>
    <link href="http://uegeek.com/170225-design-for-real-world.html"/>
    <id>http://uegeek.com/170225-design-for-real-world.html</id>
    <published>2017-02-25T13:56:28.000Z</published>
    <updated>2017-03-04T13:57:41.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://7xjpra.com1.z0.glb.clouddn.com/161218readingtitle.png" alt=""></p>
<a id="more"></a> 
<blockquote>
<p>如果所有的医生都抛弃了外科的普通实践，而专注于皮肤病、整形手术和美容，后果会怎样呢？设计职业的行为与此好有一比。</p>
</blockquote>
<p>17° 读书会第 4 本书：<a href="https://book.douban.com/subject/19912141/" target="_blank" rel="external">为真实的世界设计 - Victor Papanek</a></p>
<p><img src="https://img3.doubanio.com/lpic/s25807191.jpg" alt=""></p>
<p>阅读时间：2017-02-16 ~ 2017-02-25 </p>
<h2 id="u8BFB_u524D_u95EE_u9898"><a href="#u8BFB_u524D_u95EE_u9898" class="headerlink" title="读前问题"></a>读前问题</h2><ul>
<li>作者为什么要写这样一本书？</li>
<li>设计观是什么？</li>
<li>什么是设计的社会和道德责任？</li>
<li>设计师应该更多关注什么问题？</li>
<li>想为真实世界设计，怎么做？</li>
</ul>
<h2 id="u8BFB_u540E_u601D_u8003"><a href="#u8BFB_u540E_u601D_u8003" class="headerlink" title="读后思考"></a>读后思考</h2><p>「为真实的世界设计」是帮助我塑造设计观的一本书。什么是设计观？我的理解是起码要回答四个基本问题：</p>
<blockquote>
<p>什么是设计？为什么设计？为谁设计？什么是好设计？</p>
</blockquote>
<p>17°读书会的前三本书都在探讨设计的定义：</p>
<blockquote>
<p>Design is a relationship between form and content. —— Paul Rand</p>
<p>所谓设计，就是将人类生活或生存的意义，通过制作的过程予以解释。—— 原研哉</p>
</blockquote>
<p>而我最喜欢 Papanek 在这本书中的定义：</p>
<blockquote>
<p>设计是为了达成有意义的秩序而进行的有意识而又富于直觉的努力。</p>
<p>有意识意味着理智、思考、研究和分析。设计最根本的工作是改造人类的环境和工具，大而言之，就是改造人类自身。一个设计师能够带给其作品最重要的能力就是辨别、剖析、定义和解决问题的能力。</p>
</blockquote>
<p><img src="https://s-media-cache-ak0.pinimg.com/564x/82/71/d2/8271d299d219d7a8b82810924a256cdc.jpg" alt=""></p>
<p>「有意义的秩序」比 Paul Rand 的「关系」更进一步，阐明了什么是理想的关系；相比原研哉多少有点艺术化的定义，更聚焦于设计的本质。为了认识那些总是在变化而又高度复杂的存在，我们常常试着通过寻找其内在的秩序解决。</p>
<p>除了设计的定义，这本书还讨论了为什么设计、为什么设计、什么是好的设计。书的主旨是，倡导设计师应该为世界上的大多数人设计，而不是为一个相对较小的国内市场设计。要为人的「需求」（needs）而不是「欲求」（wants）设计。作者立场鲜明地批判为了操纵视觉刺激而进行的设计。</p>
<p>虽然这本书写于上世纪 70 年代，但是在今天看来，令作者痛心疾首的问题依然存在甚至愈演愈烈，这本书也值得我们一再回顾。</p>
<h3 id="u4EC0_u4E48_u662F_u8BBE_u8BA1_u7684_u793E_u4F1A_u548C_u9053_u5FB7_u8D23_u4EFB_uFF1F"><a href="#u4EC0_u4E48_u662F_u8BBE_u8BA1_u7684_u793E_u4F1A_u548C_u9053_u5FB7_u8D23_u4EFB_uFF1F" class="headerlink" title="什么是设计的社会和道德责任？"></a>什么是设计的社会和道德责任？</h3><p>通过设计，人类可以塑造产品、环境甚至是人类自身，所以设计师必需了解自己的行为对未来所产生的后果。</p>
<p>大多数工业设计师的哲学都建立在五个 Myth 的基础上：</p>
<ul>
<li>大批量生产</li>
<li>废弃</li>
<li>大众「需要」</li>
<li>设计师没有支配权</li>
<li>质量不再重要</li>
</ul>
<p>然而这些都是未经审视、作茧自缚的习得性现象。</p>
<p>这个时代，我们面对的问题是什么？每天的活动是什么，跟什么互动最多，受什么困扰？如果设计还停留在古典主义或者包豪斯或者 xx，那么当下的问题如何解决？工业设计起源于商品的大批量生产，它过去的理念和方法未必适应于今天。</p>
<p>为真实世界设计，也是为时代设计。</p>
<p>年迈的老人需要什么样的设计？孕妇和胖纸需要怎样的设计？全世界那些觉得被社会疏远而倍感孤独的年轻人需要什么？公路运输又需要什么样的设计呢？治病救人的医疗器械需要什么的设计？从事高级研究项目的人需要什么样精巧的装置？</p>
<p><img src="https://s-media-cache-ak0.pinimg.com/564x/46/de/86/46de86c068eb73bd34ab3e0156dfe7c3.jpg" alt=""></p>
<p>如果我们意识到设计师有足够的能力（通过影响人类所有的工具和环境）在大规模生产的基础上进行谋杀，我们也就会明白设计师身上巨大的道德和社会责任。所有的设计都是某种教育，设计师试图教育他的制造商客户和市场上的人。</p>
<blockquote>
<p>一些新兴国家的设计师并没有像我们那样，把设计才能都用在为富人追求个人满足、为企业追求利润上，我们作为设计师的责任正在于此。</p>
</blockquote>
<h3 id="u8BBE_u8BA1_u5E08_u5E94_u8BE5_u66F4_u591A_u5173_u6CE8_u4EC0_u4E48_u95EE_u9898_uFF1F"><a href="#u8BBE_u8BA1_u5E08_u5E94_u8BE5_u66F4_u591A_u5173_u6CE8_u4EC0_u4E48_u95EE_u9898_uFF1F" class="headerlink" title="设计师应该更多关注什么问题？"></a>设计师应该更多关注什么问题？</h3><p>Papanek 从一个特别宏观的角度分析了人的根本「需求」：</p>
<p><img src="http://7xjpra.com1.z0.glb.clouddn.com/170218-WX20170225-175747@2x.png" alt=""></p>
<p>人类探究自身的终结，意味着人类实现了其存在的所有潜能，意味着他们征服了人生的「局限三角」：一边是人类必须生存于其中的外部环境；其次是人类拥有的素质，或其适应能力，也就是借以存活之物；其三就是死亡的事实。所有的努力和抗争都是要解除这几点对我们的包围。</p>
<p>但是反观我们日常在做的设计，都在做些什么呢？</p>
<p>我们已经生活在「用完即走」的即抛型消费文化中许多年，为了促使人们反复购买，消费品不再以历久弥新、设计精良为目标，反而越来越迎合更短的生命周期，设计出很多会迅速抛弃到垃圾箱里的用品。</p>
<p>想要解决这个问题，需要设计师们在设计过程中反复考虑，物品的价格是否体现了其短命的特征，以及这些物品被丢弃后会发生什么？</p>
<p>从另外一个角度去思考，废弃的一个源头是不是「私有」？如果用「租借」替代「拥有」，废弃将大大减少。（作者在上世纪七十年代就看到了「共享经济」的未来~）</p>
<p>人的注意力都是极其有限的，设计师的注意力也是。设计师的工作一般已经被一种以市场为导向、为利润所驱使的体制规定好了。当我们为已经很富足的商品继续打磨它们宜人的外型、贴心的使用流程，也就少了一份精力去关注那些困扰更多人却没有人考虑、没有人动手去尝试的问题。很多问题虽然看起来很难，但真正的问题不是不可解决，而是没有人关注和开始思考。</p>
<p><img src="http://7xjpra.com1.z0.glb.clouddn.com/170218-WechatIMG136.jpeg" alt=""></p>
<p>当然，并不是所有问题都能通过设计解决。很多问题会因为设计的干预而变得简单一些。对设计师来说，这意味着一种新的角色，他不再是企业掌握的工具，而成为使用者的支持者。</p>
<p>作者提出一些被忽略的设计领域：</p>
<ul>
<li>为第三世界设计</li>
<li>为智障者和残疾人设计教学和训练设备</li>
<li>为药品、外科、牙科和医院设备设计</li>
<li>为实验研究设计</li>
<li>为维持边缘状况下的人类生活而进行系统的设计（南极/海底/小行星）</li>
<li>为打破陈规而设计</li>
</ul>
<p>那么，想为真实世界设计，怎么做？</p>
<p>面包和理想都很重要。</p>
<p>设计师既不能完全被商业组织圈养，也不能幻想着改变世界。但是可以时常反思自己在设计中立场、思考的角度、解决的问题，是在为什么样的人群提供帮助。然后，抽出一定的时间和精力，动手去设计真实世界需要的解决方案。</p>
<blockquote>
<p>1970 年，我倡议开展一场新的斗争。就像雷蒙德·罗维和其他设计师在 20 世纪 20~30 年代拜访潜在客户，向他们展示工业设计师能做什么意义。年轻的设计师可以到发展中国家，到门诊部和医院去跟人们说他能做什么。拿出自己 1/10 的时间或者 1/10 的收入，去解决一些因贫穷所需要解决的问题，去帮助那 75% 的需要它的人，在这段时间里不为钱而设计。</p>
</blockquote>
<p>也许到医院去推销设计师能力不一定现实，但是每周用 1~2 个小时去思考和改进给老年人使用的工具，比如眼镜、厨具、药瓶，是我们可以开始尝试的事情。</p>
<p>你还想到哪些为真实世界设计的倡议呢？欢迎留言~</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://7xjpra.com1.z0.glb.clouddn.com/161218readingtitle.png" alt=""></p>]]>
    
    </summary>
    
      <category term="Design" scheme="http://uegeek.com/tags/Design/"/>
    
      <category term="Reading" scheme="http://uegeek.com/tags/Reading/"/>
    
      <category term="设计师" scheme="http://uegeek.com/tags/%E8%AE%BE%E8%AE%A1%E5%B8%88/"/>
    
      <category term="设计" scheme="http://uegeek.com/categories/%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[17°读书会笔记[3]-设计中的设计]]></title>
    <link href="http://uegeek.com/170127-design-in-design.html"/>
    <id>http://uegeek.com/170127-design-in-design.html</id>
    <published>2017-01-27T13:54:06.000Z</published>
    <updated>2017-03-04T13:55:44.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://7xjpra.com1.z0.glb.clouddn.com/161218readingtitle.png" alt=""></p>
<a id="more"></a> 
<p>17° 读书会第 3 本书：<a href="https://book.douban.com/subject/4230237/" target="_blank" rel="external">设计中的设计 - 原研哉</a></p>
<p><img src="https://img3.doubanio.com/lpic/s2165932.jpg" alt=""></p>
<p>阅读时间：2017-01-15 ~ 2017-01-26</p>
<h3 id="u8BFB_u524D_u95EE_u9898"><a href="#u8BFB_u524D_u95EE_u9898" class="headerlink" title="读前问题"></a>读前问题</h3><ul>
<li>原研哉对设计的理解是什么？跟 Paul Rand 的定义有什么异同？</li>
<li>「信息建筑」的思维方式是什么？</li>
<li>无印良品的设计哲学是什么？设计和生活的关系是什么？</li>
<li>东西方对设计的理解有什么异同？日本的设计理念有什么独特之处？</li>
<li>设计师如何培养感觉能力和洞察力？</li>
</ul>
<hr>
<p><img src="http://s7.sinaimg.cn/middle/80f1b377ta5fd8854b6a6&amp;690" alt=""></p>
<h3 id="u8BBE_u8BA1_u7684_u5143_u95EE_u9898"><a href="#u8BBE_u8BA1_u7684_u5143_u95EE_u9898" class="headerlink" title="设计的元问题"></a>设计的元问题</h3><p>原研哉是日本中生代国际级平面设计大师、日本设计中心的董事、无印良品艺术总监。作为从业二十多年并且具有世界影响力的设计师，原研哉一直在尝试回答「设计到底是什么」这个问题，又或者说：如何设计「设计」？</p>
<p><img src="http://www.mottimes.com/image/character/4120150610181853.jpg" alt=""></p>
<p>要回答「设计是什么」，可以先尝试从设计的起源和发展过程中寻找答案。</p>
<p>设计产生于二十世纪初工业化这个大时代背景，并且很好地融入到商品生产过程中。为了补偿机器生产粗制滥造对传统美感的践踏、对生活品质的侵袭，人们呼唤适应时代的审美和物品。现代设计的概念由此诞生。包豪斯引发的设计运动，在工业化大生产的基础上，以实现功能为目的，努力寻求设计的造型，可以视为现代设计的发端。</p>
<p><img src="http://99percentinvisible.org/app/uploads/2016/08/bauhaus-building-dessau.jpg" alt=""></p>
<p>日本、美国、欧洲各自历史背景不同，经济发展轨迹不同，因此设计在社会中所产生的机能也很不一样。但是二十世纪后半叶，主要动力来源都是经济。设计在产业社会中不可或缺。当技术取得进步，为生产和交流提供出新的可能性时，设计总会担当起探索最佳答案的角色。</p>
<p>谈及艺术与设计的区别，原研哉认为区分它们并没有多大的实际意义。艺术是艺术家在面对社会时的意志表达，其发生的根本立足点是作为个体的个人。而设计基本上没有自我表现的动机，其落脚点更侧重于社会。<strong>解决社会上多数人共同面临的问题，是设计的本质。</strong>在问题解决过程——也是设计过程中产生的那种人类能够共同感受到的价值观或精神，以及由此引发的感动，就是设计最有魅力的地方。</p>
<p>在原研哉的设计世界中，设计跟生活紧密关联。他认为设计绝不仅仅是制造技术，<strong>设计是从生活中发现新问题的行为</strong>。创意并不是要让人惊异它崭新的形式和素材，而应该让人惊异于它居然来自看似平凡的日常生活。不断开发出这些创意才是真正的设计。</p>
<blockquote>
<p>所谓设计，就是将人类生活或生存的意义，通过制作的过程予以解释。</p>
</blockquote>
<p><img src="http://img.sj33.cn/uploads/allimg/200604/20060412013828524.jpg" alt=""></p>
<p>这个定义回归到设计的意义，敦促设计师们去思考更为底层的问题，并且反应在设计的过程和结果之中。</p>
<p>17°的第一本书是 Paul Rand 的「设计是什么」，他对设计展现出一种<strong>「思辨」式的思考</strong>：应该是什么，不应该是什么。而日本的设计大师们更多是在进行<strong>「探询和阐释」</strong>，比如原研哉用设计解释生活的意义，比如黑川雅之用设计「提问和告白」（见「设计修辞法」一书）。Paul Rand 认为设计的定义应该指向行动，设计是「处理关系」，原研哉则劝诫设计师们把设计指向生活意义的阐释，从看似平凡之处深思出新意，动态地去回答「人与生活」的关系的问题。</p>
<p><img src="http://s2.sinaimg.cn/middle/600ffe4dh77a196c867a1&amp;690" alt=""></p>
<p>反思我们的工作，大部分时间并没有真正在做「设计」。我们不愿花时间多想问题到底是什么，处理这个问题的意义何在，只是急匆匆地把常见的样式搬过来搬过去，拼凑出一个自欺自人的样子，然后继续心安理得地戴着「设计师」的帽子自鸣得意。</p>
<h3 id="u7528_u6784_u5EFA_u4FE1_u606F_u5EFA_u7B51_u7684_u601D_u7EF4_u65B9_u5F0F_u505A_u8BBE_u8BA1"><a href="#u7528_u6784_u5EFA_u4FE1_u606F_u5EFA_u7B51_u7684_u601D_u7EF4_u65B9_u5F0F_u505A_u8BBE_u8BA1" class="headerlink" title="用构建信息建筑的思维方式做设计"></a>用构建信息建筑的思维方式做设计</h3><p>在设计实践中，原研哉试图建立一种信息建筑的思维方式，让平面设计不仅能作用于人的视觉，而且能够触动人的所有感官。</p>
<p>设计传达并非仅发生在一个二维平面中，而应该像一个建筑，有不同的层次和功能区划，叠加在一起形成有机的空间，对人的感受和行为形成影响。设计师在设计中要组合各种信息，建筑一个信息集合体。</p>
<p><img src="http://7xjpra.com1.z0.glb.clouddn.com/design_in_design_IA.jpg" alt=""></p>
<blockquote>
<p>所谓印象，就是通过感觉器官接受外部刺激，并把这些刺激和人脑中原有的记忆组合、联系而生成的结果。<strong>设计行为，则是以这种组合而成的印象为前提，并且有意识地干预这一组合过程的行为</strong>。我们把这一过程称为「信息的构筑」—— 有目的、有计划地去干预印象的生成过程。</p>
</blockquote>
<p>日本文化向来对「感觉」异常重视。通过营造纯粹而富有仪式感的环境，释放感官的潜力，敏感地捕捉到纤细甚至稍纵即逝的感觉，从而完成与生命的对话。在文学修辞领域，佐藤信夫提出「修辞立其感」的理念，如何用文字唤起人们的「感觉」。在设计领域，原研哉则提到用综合的感官刺激构筑人们的「印象」。</p>
<h3 id="u54C1_u724C_u7684_u7075_u9B42_u4ECE_u4F55_u800C_u6765_uFF1F"><a href="#u54C1_u724C_u7684_u7075_u9B42_u4ECE_u4F55_u800C_u6765_uFF1F" class="headerlink" title="品牌的灵魂从何而来？"></a>品牌的灵魂从何而来？</h3><p>原研哉是无印良品艺术总监，书中用了一个完整的章节介绍他对无印良品品牌的思考和实践。</p>
<p>无印良品品牌创立于 1980 年，受极简主义审美意识的影响，商品造型简单、朴素且价格适中，给人感觉新鲜而且纯粹。它的商品群就是一个优雅而质朴的生活提案，提出了一种符合都市新生代人群的生活方式。</p>
<p><img src="http://www.gzhphb.com/gpPic/600/0/mmbiz.qpic.cn/mmbiz_jpg/POulfdmHaaKUfKfbHTbSyqA1RpCNp0Ljur2U85qhO6GqUE79vx9z80HtFJBOicnDPF5LQa63w1yJvypKMpN9JXA/0?wx_fmt=jpeg" alt=""></p>
<p>相比无印良品的品牌发展，我更好奇的是，一个品牌的灵魂如何形成？从原研哉对无印良品理念的阐释，我们可以看到，仅仅给出「极简」、「干净凝练」这种感官层面、结果层面的词汇，无法让物品拥有一种集体的灵魂。</p>
<p>品牌感觉需要「生长」，而不是披上一件另外制作的外套。给出这个核心生长点也许就是最难的「设计」。一个有生命力的生长点，应该源自一个更为宏大的问题，是时代和环境对人的发问，这个问题埋藏在很多人的内心却不自知。对于一个生活物品的品牌而言，这个问题可能是「我对生活的向往是什么？」「这个时代需要什么样的生活态度？」「什么样的物品是人和生活环境互动时最好的载体？」</p>
<blockquote>
<p>无印良品的理想，是生产出来的商品一旦被消费者接触到，就能触发出一种新的生活意识，这种生活意识最终启发人们去追求更为完美的生活样式。</p>
</blockquote>
<p>在回答这些问题时，无印良品洞察到，大部分的商品都在引导消费者形成「这个就好」「非它不可」的观念，不断激发人们追寻一些其实并不必要的东西：更多、更物化、更有存在感、更狭隘的忠诚…… 所以无印良品提出要给消费者一种「这样就好」的满足感，看似弱化了自我意识，但也许更接近真正的自由。</p>
<p><img src="https://s-media-cache-ak0.pinimg.com/originals/bb/58/29/bb58294d21dae457d04421bc92096c6f.jpg" alt=""></p>
<p>原研哉对无印良品的概念提案是「虚无」（Emptiness）。但是虚无并不意味着空无一物，而是再提升了一个层次，用虚无的包容，呈现出一个看似空无一物，却能容纳百川的容器。商品不是生活的主角，它更加应该扮演承载人与生活意义的载体这种角色。</p>
<p><img src="http://www.mottimes.com/image/mottimes_images/mottimes_images_1520150610180958.jpeg" alt=""></p>
<h3 id="u5F62_u5F0F_u8FFD_u968F_u54F2_u5B66"><a href="#u5F62_u5F0F_u8FFD_u968F_u54F2_u5B66" class="headerlink" title="形式追随哲学"></a>形式追随哲学</h3><p>看「设计中的设计」，跟看「A Designer’s Art」的感受完全不一样。</p>
<p>西方的设计，问题发端来自社会变革，人与时代的矛盾。设计更偏理性，规律和真理永远是题中之意。</p>
<p>东方的设计师，则用非常纤细的感受，去捕捉那些隐藏生活日常背后的宏大问题。在日本文化中，相比自然，人是渺小的存在。问题发端来自人与环境的矛盾。因此更需要回归人的尺度，去不断思考人和周遭环境的关系，短暂而变幻莫测的人生以及它在生活中种种映射的关系。</p>
<p>也许，从某种程度而言，形式追随的并不是内容，不是功能，而是对核心问题的探索和回答。有什么样的价值观，就会思考什么样的问题，得出什么样的哲学理念，最终反映在人的言行中，凝练在物品和容器的塑造中。</p>
<h3 id="u8BBE_u8BA1_u5E08_u5982_u4F55_u57F9_u517B_u611F_u89C9_u80FD_u529B_u548C_u6D1E_u5BDF_u529B_uFF1F"><a href="#u8BBE_u8BA1_u5E08_u5982_u4F55_u57F9_u517B_u611F_u89C9_u80FD_u529B_u548C_u6D1E_u5BDF_u529B_uFF1F" class="headerlink" title="设计师如何培养感觉能力和洞察力？"></a>设计师如何培养感觉能力和洞察力？</h3><p>在原研哉看来，设计不是一种技能，而是捕捉事物本质的感觉能力和洞察力。</p>
<blockquote>
<p>给一件事物下定义或用文字记述下来并不见得就是对其有所了解。如果能够先将已知的事物<strong>陌生化</strong>，然后再尝试挑战其真实性，才有可能深入了解它。</p>
<p>我们观看世界的视角与感受世界的方法可能有千万种，只要能够下意识地将这些角度和感受方法运用到日常生活中，就是设计。</p>
</blockquote>
<p>设计师的核心能力，首先不是视觉表达能力，而是<strong>发现事物间原本已经存在、但是被视而不见的「新」关系</strong>。</p>
<p><img src="http://www.ida-a.org/ueditor/php/upload/image/20160526/1464234884430317.jpg" alt=""></p>
<p>2000 年，原研哉策划了一个叫做「 Re-design 二十一世纪的日常用品再设计」的展览，收集了三十二名来自日本的设计者，对日常用品比如卫生纸或火柴进行重新设计的提案。原研哉希望通过这个展览，为大家展示设计的魅力，唤起对生活的重新思考。设计师们从生活日常的一个小小物品，回溯到原点，重新审视我们周围的设计，以最平易近人的方式来探索设计的本质。从无到有，当然是创造；但将已知的事物陌生化，更是一种创造。</p>
<p>佐藤雅彦与出入境章</p>
<p><img src="http://www.ndc.co.jp/hara/books/RE-DESIGN20-21.jpg" alt=""></p>
<p>面出薰与火柴</p>
<p><img src="http://www.dearid.com/pss/2012/12/15/b/6173241351877169.jpg" alt=""></p>
<p>深泽直人与茶包</p>
<p><img src="http://rethinked.org/wp-content/uploads/2012/10/Naoto-Fukasawa.jpeg" alt=""></p>
<p>展览中的作品不但从创意上让人拍案叫绝，更令人感动的是，设计师把对平凡物品的细致入微的观察，转换为一次对人的需要的深刻体察，对人和环境、人和物品关系之间的一次重构。</p>
<p>怎样培养这种敏锐的感觉和洞察？书里并没有太多着墨，不过原研哉已经阐述了很多他对设计的理解，我尝试归纳为以下几点：</p>
<h4 id="u505A_u751F_u6D3B_u7684_u89C2_u5BDF_u8005_u548C_u63D0_u95EE_u8005"><a href="#u505A_u751F_u6D3B_u7684_u89C2_u5BDF_u8005_u548C_u63D0_u95EE_u8005" class="headerlink" title="做生活的观察者和提问者"></a>做生活的观察者和提问者</h4><p>人与生活的关系，几乎体现在每一个物品上。每时每刻我们都有数不清的机会去感受、发现和思考。开门时门把手的触感和握感，起居室透过窗帘形成的光影，饭碗捧在手里传递的温度，打扫卫生时抹布够不着角落的费力感觉…… 每当我们意识到应该重新思考人与物品的关系，能够问出一个又一个被当做理所当然的问题，也许就能更清楚了解自己向往一种怎样的生活状态。</p>
<p><img src="https://cdn0.vox-cdn.com/thumbor/ASX_XWjzzXbVWg2bJbIGuV811Rc=/cdn0.vox-cdn.com/uploads/chorus_asset/file/6363053/muji_cleaning_system.0.gif" alt=""></p>
<h4 id="u53D1_u73B0_u90A3_u4E9B_u89C6_u800C_u4E0D_u89C1_u7684_u8FDE_u63A5"><a href="#u53D1_u73B0_u90A3_u4E9B_u89C6_u800C_u4E0D_u89C1_u7684_u8FDE_u63A5" class="headerlink" title="发现那些视而不见的连接"></a>发现那些视而不见的连接</h4><p>宋代禅宗大师青原行思提出参禅的三重境界：</p>
<blockquote>
<p>参禅之初，看山是山，看水是水；禅有悟时，看山不是山，看水不是水；禅中彻悟，看山仍然山，看水仍然是水。</p>
</blockquote>
<p>设计的思考和实践，大概也是这么一个过程吧。在 Re-design 展中，很多日常物品在设计师的手中「互换灵魂」，带给我们新的感动。设计师如果能解析出不同物品的灵魂，并且富有诗意地促成它们的交错、融合，生活该是多有乐趣和惊喜的游乐园。</p>
<p><img src="http://www.muji.com/xmas2009/shared/wall/toys.jpg" alt=""></p>
<h4 id="u4ECE_u4FE1_u606F_u5E73_u9762_u5230_u4FE1_u606F_u5EFA_u7B51"><a href="#u4ECE_u4FE1_u606F_u5E73_u9762_u5230_u4FE1_u606F_u5EFA_u7B51" class="headerlink" title="从信息平面到信息建筑"></a>从信息平面到信息建筑</h4><p>如果设计总是局限在一个狭小平面，设计师的目光也会越来越狭窄。让我们回到「干预印象的生成过程」这一本质，将设计活动的隐喻变为「构筑信息和行为空间」，从人的「五感」出发，思考应该如何构建一个丰富的「建筑空间」，能够充分调动人的感官，实现信息和意义的传达。</p>
<p><img src="http://www.holycool.net/wp-content/uploads/2013/03/MUJI-Bluetooth-Speaker-1024x1024.jpg" alt=""></p>
<h3 id="u6700_u540E"><a href="#u6700_u540E" class="headerlink" title="最后"></a>最后</h3><p>17°读书会第一个月的主题是「重新思考设计」。读完东西方两位设计大师对设计的解读，深感自己对设计理解依然浅薄。</p>
<blockquote>
<p>设计是什么？</p>
</blockquote>
<p>路途遥远，希望大家带着这个问题一路前行。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://7xjpra.com1.z0.glb.clouddn.com/161218readingtitle.png" alt=""></p>]]>
    
    </summary>
    
      <category term="Design" scheme="http://uegeek.com/tags/Design/"/>
    
      <category term="Reading" scheme="http://uegeek.com/tags/Reading/"/>
    
      <category term="设计师" scheme="http://uegeek.com/tags/%E8%AE%BE%E8%AE%A1%E5%B8%88/"/>
    
      <category term="设计" scheme="http://uegeek.com/categories/%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[17°读书会笔记[2]-A Designer's Art]]></title>
    <link href="http://uegeek.com/170119-a-designers-art.html"/>
    <id>http://uegeek.com/170119-a-designers-art.html</id>
    <published>2017-01-19T14:01:42.000Z</published>
    <updated>2017-01-19T14:03:56.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://7xjpra.com1.z0.glb.clouddn.com/161218readingtitle.png" alt=""></p>
<a id="more"></a> 
<p>17° 读书会第 2 本书：<a href="https://book.douban.com/subject/2248907/" target="_blank" rel="external">Paul Rand: A Designer’s Art</a></p>
<p><img src="https://img1.doubanio.com/lpic/s8913259.jpg" alt=""></p>
<p>阅读时间：2017-01-05 ~ 2017-01-12</p>
<h2 id="u8BFB_u524D_u95EE_u9898"><a href="#u8BFB_u524D_u95EE_u9898" class="headerlink" title="读前问题"></a>读前问题</h2><ul>
<li>「设计是什么」提及的话题，有哪些在这本书做了更深入的探讨？</li>
<li>设计和装饰的关系是？和艺术的关系是？</li>
<li>「好看」和「有用」的关系是？它们矛盾吗？</li>
<li>应该如何处理形式和内容的关系？</li>
<li>设计师应该解决什么问题？</li>
<li>设计师应该具备哪些能力？如何锻炼？</li>
</ul>
<h2 id="u8BFB_u540E_u601D_u8003"><a href="#u8BFB_u540E_u601D_u8003" class="headerlink" title="读后思考"></a>读后思考</h2><h3 id="u4E3A_u4EC0_u4E48_u8BBE_u8BA1_u662F_u5904_u7406_u5173_u7CFB_uFF1F"><a href="#u4E3A_u4EC0_u4E48_u8BBE_u8BA1_u662F_u5904_u7406_u5173_u7CFB_uFF1F" class="headerlink" title="为什么设计是处理关系？"></a>为什么设计是处理关系？</h3><p>Paul Rand 在「设计是什么」中，提出他对设计的定义：</p>
<blockquote>
<p>设计是处理关系，好的设计处理内容和形式之间的矛盾。</p>
</blockquote>
<p>为什么他会提出这个定义呢？「A Designer’s Art」更详细的阐述了他的设计理念。</p>
<p><img src="http://www.paul-rand.com/assets/gallery/books/interiors/designersArt09.jpg" alt=""></p>
<p>平面设计师通过词语、图像等创造新想法，主要解决视觉传达的问题。如何解决呢？他们组织原本没有联系的需求、想法、词汇、图像，从而产生出意义。设计师的工作，就是选择相互协调的元素，并且让他们变得有趣。</p>
<p><img src="https://assets.wired.com/photos/w_1534/wp-content/uploads/2016/11/PaulRandADesignersArt-pg142.jpg" alt=""></p>
<p>在平面设计中，元素的同质性很高，且容易区分。可以想象，在设计师的创作过程中，需要不断变换元素组合以产生各式各样的新结果 —— 关系变了，意义也会跟着改变。</p>
<p>我试着从「秩序」的角度理解「关系」。</p>
<p>无序意味着没有线索和结构。有序是一种贡献，通过一己之力找到了不同部分的关系，贡献了连接不同模块的「秩序」。要做到连接，意味着不能只局限在某个模块内，而是要成为连接器。</p>
<p><img src="http://page-spread.com/wp-content/uploads/22_88.jpg" alt=""></p>
<p>设计关乎新观念、新意义的创作和表达（尤其是平面设计），所以设计更多聚焦于概念，而不是制造。相比起一个瓶子是怎么制造出来的，设计师更关注要制造什么样的瓶子。</p>
<p>设计和装饰、和艺术的区别是什么呢？装饰并不一定是设计，它有可能只是简单叠加元素，而没有更深度地整合内容和形式。艺术更注重表达，去除功利性质的表达，是为想法理念找到最佳的形式；而设计更强调要去调和内容和形式之间的冲突，让两者合而为一。</p>
<h3 id="u5F62_u5F0F_u548C_u529F_u80FD"><a href="#u5F62_u5F0F_u548C_u529F_u80FD" class="headerlink" title="形式和功能"></a>形式和功能</h3><blockquote>
<p>Ideals ought to aim at the transformation of reality.  – William James</p>
</blockquote>
<p>在设计中，形式和功能相结合，是一个整体而不是分离的目标。如何既好看又有用，本身就是设计所追求的结果。设计师的能力正体现在此：在给定的空间内游刃有余地操控不同要素。这里说的空间，可能包括广告、书籍、包装、产品、标识、电视广告等等。</p>
<p>如果我们割裂形式和功能、概念和执行，就不可能创造出真正美的物品。</p>
<p><img src="https://assets.paulrand.design/Life/Exhibits%20and%20Events/1953%20Design%20Gallery%20Exhibit/Web/1986%20Design%20Gallery%20Exhibit%2002.jpg" alt=""></p>
<p>从这里延伸出一些我比较感兴趣的问题：</p>
<ul>
<li>当人们追求功能以外的美感时，他们在追求什么？</li>
<li>为什么美感会重要？美学到底在多大程度上有意义？</li>
<li>当有用尚且难达到的时候，应该多大程度上追求和坚持好看？</li>
<li>追求好看是否不经济？好看和好用真的矛盾吗？</li>
<li>当一个物品不再是平面，而是一个复杂产品甚至系统，该怎么做？</li>
<li>是否可以参考建筑设计？为什么我们在建筑上发展出那么多形式和表现？</li>
</ul>
<p>以上的问题，书中并不一定给出答案，但是能启发自己问出好的问题，这也是读书的额外收获吧。</p>
<h3 id="u8BBE_u8BA1_u5E08_u5E94_u8BE5_u89E3_u51B3_u4EC0_u4E48_u95EE_u9898_uFF1F"><a href="#u8BBE_u8BA1_u5E08_u5E94_u8BE5_u89E3_u51B3_u4EC0_u4E48_u95EE_u9898_uFF1F" class="headerlink" title="设计师应该解决什么问题？"></a>设计师应该解决什么问题？</h3><p>设计师并不只是简单地调整元素，而是要体验、感知、分析、组织、符号化、综合。</p>
<p><img src="http://page-spread.com/wp-content/uploads/18_131.jpg" alt=""></p>
<p>设计师不但要观察、反复思考，还要了解所在领域技术的进展，他创造发明出新的方法和技艺，探索材料的可能性。</p>
<p>设计师主要会面对三类材料：</p>
<ul>
<li>规定的： 产品、副本、标语、logo、格式、媒体、生产过程</li>
<li>形式的： 空间、对比、比例、和谐、韵律、重复、线条、重量、形状、颜色、质量、体积、数量、材质</li>
<li>心理的： 视觉感知和视错觉，受众和设计师自身的本能、直觉和情感</li>
</ul>
<p>但是以上材料经常是模糊、缺乏、无趣、不便于视觉解读，于是设计师首先要做的工作是：重新叙述和定义问题。</p>
<p>如果没有做好这一步，设计师可能会产出无趣的设计，更具体的说：</p>
<ul>
<li>用平庸无奇的表现方式，解读和表现陈腔滥调的观念</li>
<li>没有协调好形式和内容</li>
<li>没有正确解释特定空间内的问题</li>
</ul>
<blockquote>
<p>The problem of the artist is to defamiliarize the ordinary. – Paul Rand</p>
</blockquote>
<p><strong>艺术家要剥去陈腐、平庸、无趣的外衣，为创作赋予勃勃生机。</strong></p>
<p>这也是设计师应有的追求。</p>
<h3 id="u8BBE_u8BA1_u7684_u8BED_u8A00_u548C_u53EF_u80FD_u6027"><a href="#u8BBE_u8BA1_u7684_u8BED_u8A00_u548C_u53EF_u80FD_u6027" class="headerlink" title="设计的语言和可能性"></a>设计的语言和可能性</h3><p>在书中，Paul 探讨了多种设计的「语言」：符号，条纹，重复，颜色，拼贴和蒙太奇。</p>
<p><img src="https://runemadsen.com/assets/blog/books/designersart2-512dbfdbb35a37a11bf30f1be828acbd89d00b08b8b7453e8f7840ef4efeaeba.jpg" alt=""></p>
<p>某种程度上，做出好的设计，跟讲出优美的语言有相似之处。我们学习语言的单位——词汇、短语，我们学习语言的规律——语法，然后依据规律把语言单位串联成富含意义的句子、段落和篇章。在平面设计中，我们试验形状、样式、颜色等等，依据视觉的规律把元素拼接成富含意义的组合或者图像。</p>
<p>那么在其他设计领域中，「语言」又是由哪些要素组成呢？在建筑设计中，有城镇、邻里、住宅、花园和房间等模式；在界面交互中，有对话框、输入框、按钮、滚动条等模式。了解基本的「词汇」后，还需要理解如何组织它们——也就是，找到元素和元素之间的最佳「关系」。可能性既产生于新的「词汇」，也产生于新的「语法」，在不同的语境下，还会交错出新的意义。</p>
<p>在这本书中，探讨了一些平面设计的模式，但是在今天看来，总让人感觉有些单薄。也许我们可以从其他设计师、其他设计领域继续探索这个话题：</p>
<p><a href="https://book.douban.com/subject/26854270/" target="_blank" rel="external">好设计的造型元素</a></p>
<p><img src="https://img3.doubanio.com/lpic/s28969855.jpg" alt=""></p>
<p><a href="https://book.douban.com/subject/4257314/" target="_blank" rel="external">形式综合论</a></p>
<p><img src="https://img5.doubanio.com/lpic/s4205156.jpg" alt=""></p>
<p><a href="https://book.douban.com/subject/1157145/" target="_blank" rel="external">建筑模式语言（上下）</a></p>
<p><img src="https://img1.doubanio.com/lpic/s1117847.jpg" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://7xjpra.com1.z0.glb.clouddn.com/161218readingtitle.png" alt=""></p>]]>
    
    </summary>
    
      <category term="Design" scheme="http://uegeek.com/tags/Design/"/>
    
      <category term="Reading" scheme="http://uegeek.com/tags/Reading/"/>
    
      <category term="设计师" scheme="http://uegeek.com/tags/%E8%AE%BE%E8%AE%A1%E5%B8%88/"/>
    
      <category term="设计" scheme="http://uegeek.com/categories/%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[17°读书会笔记[1]-设计是什么]]></title>
    <link href="http://uegeek.com/170105-read-what-is-design.html"/>
    <id>http://uegeek.com/170105-read-what-is-design.html</id>
    <published>2017-01-05T02:47:47.000Z</published>
    <updated>2017-01-05T02:48:26.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://7xjpra.com1.z0.glb.clouddn.com/161218readingtitle.png" alt=""></p>
<a id="more"></a> 
<p><a href="http://www.uegeek.com/161218-designer-reading-list.html" target="_blank" rel="external">17° 读书会</a>第一本书：<a href="https://book.douban.com/subject/4257259/" target="_blank" rel="external">设计是什么 - Michael Kroeger</a></p>
<p><img src="https://img3.doubanio.com/lpic/s4153181.jpg" alt=""></p>
<p>阅读时间：2017-01-01  </p>
<h2 id="u8BFB_u524D_u95EE_u9898"><a href="#u8BFB_u524D_u95EE_u9898" class="headerlink" title="读前问题"></a>读前问题</h2><ul>
<li>Paul Rand 是怎么理解设计的？ <ul>
<li>他为什么会这样理解设计？</li>
<li>这对他的作品和经历可能产生了什么样的影响？</li>
<li>对比自己之前对设计的理解，跟他差在哪里？</li>
</ul>
</li>
<li>他对设计新人提出了哪些建议？为什么？ <ul>
<li>哪些建议对我来说很有启发？</li>
<li>改变了过去什么样的观点？可以怎么应用？</li>
</ul>
</li>
<li>从刻意练习的角度出发，如何从 Paul Rand 身上学习？</li>
</ul>
<h2 id="u8BFB_u540E_u601D_u8003"><a href="#u8BFB_u540E_u601D_u8003" class="headerlink" title="读后思考"></a>读后思考</h2><p>Paul Rand 保罗·兰德（1914-1996），美国最杰出的商标设计师、思想家及设计教育家，他为 IBM、ABC、UPS 所设计的商标无人不识，堪称经典，乔布斯称他为史上最伟大的平面设计师。</p>
<h3 id="u8BBE_u8BA1_u662F_u4EC0_u4E48_uFF1F"><a href="#u8BBE_u8BA1_u662F_u4EC0_u4E48_uFF1F" class="headerlink" title="设计是什么？"></a>设计是什么？</h3><p>Paul Rand 在多次与同行、学生的交谈中，阐述了他对设计的理解。</p>
<blockquote>
<p>Design is a relationship between form and content. </p>
</blockquote>
<p><strong>设计是形式和内容的关系表达。内容就是想法，形式就是你如何处理想法</strong>，你怎么做它。该用颜色？或用黑白？大一点？小一点？三维还是平面？用时髦流行或是严肃的素材？</p>
<p>设计就是关系 （Design is relationships）。设计是一个关系系统。这里的关系涵盖了一个问题的所有面向，包括你和画布间的关系，你和美工刀、橡皮擦或绘图笔的关系，还有设计元素之间的关系。设计也是一种比例系统，指的是尺度大小之间的关系。</p>
<p><img src="http://7xjpra.com1.z0.glb.clouddn.com/587.jpg" alt=""></p>
<p>这就是做设计的起点。你得去建立一种关系，必须以某种方式和某件事情产生关联，好让你从中得到某个线索。每样东西都有关联，这永远是问题所在。<strong>在你把某样东西摆下去的那一刻，你就创造了一种关系。</strong>这类关系没有止境，这正是设计很难臻于完美的原因之一。因为你做的每一项动作，都有无穷无尽的犯错可能。</p>
<p>Paul 对设计的定义体现了一位平面设计师的特质。作为一名平面设计师，内容总是设计的核心对象。平面设计重在处理平面系统内多种要素的关系：属性关系、比例关系、距离关系等等。出现在平面内的任何要素之间，会衍生出交错的关系，如何处理这些关系，是优秀作品的关键。</p>
<p>这种思路，如果迁移到其他设计领域，是否适用？</p>
<p>如果把平面这个载体换成用户界面，会发现平面增多了，在不同场景和时间点上，有不同的「平面」，需要处理更多元素之间的「关系」，而且，还要处理使用者和元素之间的关系 —— 因为元素不再是静止不变的，它们很可能由使用者的行为触发，根据使用者的行为和选择呈现不同的形式。</p>
<p><img src="http://7xjpra.com1.z0.glb.clouddn.com/160101layer.png" alt=""></p>
<p>在这个前提下，设计是关系的定义依然起作用。但是，它更为复杂了，既需要应对随时变化的情境，又需要处理更多维、更多元素之间复杂交错的关系。按照 Paul 的定义，设计师越来越难应对问题的复杂程度，或者说，难以满足交互的特性。</p>
<h3 id="u597D_u7684_u5B9A_u4E49_u4E3A_u4EC0_u4E48_u91CD_u8981"><a href="#u597D_u7684_u5B9A_u4E49_u4E3A_u4EC0_u4E48_u91CD_u8981" class="headerlink" title="好的定义为什么重要"></a>好的定义为什么重要</h3><p>回想以前自己对设计的定义，跟书中提到的「设计是一项计划」类似。Paul 批评这种定义缺乏行动的指向性。<strong>定义必需可以把你带向某处</strong>，它必需能激发某种东西。</p>
<p>得到定义并不难，我们可以使用很多种不同的描述。不过，每件事情都是相对的，某人觉得湿的东西，对其他人来说或许是干的。如果仅仅阐述，或者做一些同义反复的文字游戏，意义何在？<strong>真正有意义的定义，是提供一个新的框架，赋予系统内的要素一种有机、有意义的关系，并且能够触发行动 —— 不仅提供理解，而且知道下一步应该往哪个方向做点什么。</strong></p>
<p>设计不止是一种态度，它应该创造出一些新的秩序。在 Paul 看来，甚至艺术也不仅仅是表达。他很认同 John Dewey 对艺术即体验的理解，我们不应该把艺术从它应该在（或产生）的地方隔离开来，艺术应该在卧室里、厨房里，而不是只在美术馆里。</p>
<p><img src="https://img3.doubanio.com/lpic/s4253402.jpg" alt=""></p>
<p>美学和设计是同样的东西。美学是设计的研究，是关系的研究。</p>
<blockquote>
<p>让自己有所作为，去解释和理解你正在做的事，而不是光读书。</p>
</blockquote>
<p>在 Paul 的基础上，我尝试把「行为」也纳入到设计需要处理的要素当中。更进一步，在更为宏观或者说模糊的设计语境下，我认为设计不仅是关系的表达，而且是一种求解过程。面对越来越复杂的系统，我们之所以要提前做出设计，是因为想找出在当前情境，也就是在各种要素的关系和限制之下，问题的最优解是什么，并且把它呈现出来。</p>
<p>基于以上，这个阶段我对设计的理解是：</p>
<blockquote>
<p>设计表达内容、形式、行为之间的关系，解决它们之间的冲突，是找到和实施当前最优解的过程。</p>
</blockquote>
<p>于是，对我而言，设计是问题的求解过程。</p>
<h3 id="u7ED9_u521D_u5B66_u8005_u7684_u5EFA_u8BAE"><a href="#u7ED9_u521D_u5B66_u8005_u7684_u5EFA_u8BAE" class="headerlink" title="给初学者的建议"></a>给初学者的建议</h3><p>Paul 给设计新人最重要的建议是：思考。</p>
<p>在谈话录中，他提出一个又一个犀利的问题，把回答者步步推向更接近问题核心的地方。</p>
<blockquote>
<p>思考是设计过程中的第一要务。去思考要解决的问题，而不是设计本身。设计是思维的产物。</p>
</blockquote>
<p>Paul 对当时的设计教育表示不满，因为教育者并没有引导学生思考更为本质的问题。学生必须知道他们到底在做什么。</p>
<p><img src="http://7xjpra.com1.z0.glb.clouddn.com/170102.read.paul-rand-conversation-with-students-20-638.jpg" alt=""></p>
<p>提及工具问题，Paul 认为，会用电脑，会操作所有系统和软件，这和你身为设计师，了解自己正在做什么这个问题比起来，根本微不足道。<strong>学设计时，最需要的是清晰的头脑和清晰的思路。</strong></p>
<p>从问题开始，忘了问题，让问题自己浮现或让解决方案自己浮现，然后重新加以评估。这就是设计的过程，或者说，创意的过程。</p>
<p>一旦真正思考到问题的本质，我们就会发现，设计没有过时的问题。</p>
<h3 id="u5982_u4F55_u6301_u7EED_u7EC3_u4E60_uFF0C_u505A_u51FA_u6539_u53D8"><a href="#u5982_u4F55_u6301_u7EED_u7EC3_u4E60_uFF0C_u505A_u51FA_u6539_u53D8" class="headerlink" title="如何持续练习，做出改变"></a>如何持续练习，做出改变</h3><p>Paul 的这些建议，我们可以怎样运用呢？</p>
<p>关于学习和思考</p>
<ul>
<li>学习任何一个领域，先思考本质问题，找到一个可以指向行动的定义</li>
<li>用步步逼近的问题引导自己思考</li>
</ul>
<p>关于做出好的设计</p>
<ul>
<li>一开始就把设计看成系统，不仅包括设计的对象和元素，还包括使用者、载体和设计工具</li>
<li>抽象出系统的要素，仔细思考它们之间的关系，识别冲突和矛盾</li>
<li>要逐渐形成自己对「最优」关系的理解和判断</li>
<li>不要沉迷于工具，先搞清楚自己在做什么，问题是什么</li>
<li>多多实践 Paul 提到的设计过程：提问-酝酿-解答-评估</li>
<li>多多思考那些不会因为时间和空间而改变的问题，因为那才是设计的本质问题</li>
</ul>
<p>最后，用 Paul 的一句警示作为结尾，提醒自己，作为一名设计师应该有的责任和追求：</p>
<blockquote>
<p>重点不是离开，重点是待在里面而且把事情做对。人会想要离开，是因为他们待在里面的时候不知道自己在做什么。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://7xjpra.com1.z0.glb.clouddn.com/161218readingtitle.png" alt=""></p>]]>
    
    </summary>
    
      <category term="Design" scheme="http://uegeek.com/tags/Design/"/>
    
      <category term="Reading" scheme="http://uegeek.com/tags/Reading/"/>
    
      <category term="设计师" scheme="http://uegeek.com/tags/%E8%AE%BE%E8%AE%A1%E5%B8%88/"/>
    
      <category term="设计" scheme="http://uegeek.com/categories/%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[菜鸟数据科学入门02 - IPython 基础]]></title>
    <link href="http://uegeek.com/170103-ipython-basic.html"/>
    <id>http://uegeek.com/170103-ipython-basic.html</id>
    <published>2017-01-03T10:07:48.000Z</published>
    <updated>2017-01-07T09:41:39.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://7xjpra.com1.z0.glb.clouddn.com/170103IPython_basic_title.png" alt=""></p>
<a id="more"></a> 
<h2 id="u4E00_u3001_u4E3A_u4EC0_u4E48_u8981_u7528_IPython_uFF1F"><a href="#u4E00_u3001_u4E3A_u4EC0_u4E48_u8981_u7528_IPython_uFF1F" class="headerlink" title="一、为什么要用 IPython？"></a>一、为什么要用 IPython？</h2><p><a href="http://ipython.org/" target="_blank" rel="external">IPython</a> (Interactive Python 的简写) 是一个强大的交互式 Python Shell，由 Fernando Perez 在 2001 发起。它的目标是提供 “Tools for the entire life cycle of research computing.” 如果说 Python 是数据科学操作的引擎，那么 IPython 就是交互式的控制面板。</p>
<p>IPython 的优点：</p>
<ul>
<li>交互式和批处理功能</li>
<li>提高编写、测试速度，执行结果立即可见，方便调试</li>
<li>同时保存脚本和计算过程，可重复可互动</li>
<li>丰富的数据可视化工具</li>
<li>能在本地计算机上对远程服务器中的数据进行分析</li>
<li>兼容 markdown 语法，满足数据分析、课程教学、博客写作等需求</li>
</ul>
<p>Python Scientific Ecosystem</p>
<p><img src="http://image.slidesharecdn.com/1idanielrodriguez-160614230356/95/connecting-python-to-the-spark-ecosystem-3-638.jpg?cb=1465945555" alt=""></p>
<p>IPython 只是为 NumPy、Scipy、Pandas、Matplotlib 等包提供一个交互式接口。其本身并不提供科学计算的功能。这些工具组合在一起，形成了可以匹敌如 Matlab、Mathmatic 这些复杂工具的科学计算框架。</p>
<h2 id="u4E8C_u3001Shell_or_Notebook_3F"><a href="#u4E8C_u3001Shell_or_Notebook_3F" class="headerlink" title="二、Shell or Notebook?"></a>二、Shell or Notebook?</h2><p>使用 IPython 有两种方式（前提是已经<a href="http://jupyter.readthedocs.io/en/latest/install.html" target="_blank" rel="external">安装好 IPython</a>）。</p>
<h3 id="u5728_u547D_u4EE4_u884C_u4E2D_u4F7F_u7528"><a href="#u5728_u547D_u4EE4_u884C_u4E2D_u4F7F_u7528" class="headerlink" title="在命令行中使用"></a>在命令行中使用</h3><p>在命令行中输入 <code>ipython</code>，进入 IPython 环境：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Python 2.7.10 (default, Jul 30 2016, 19:40:32)&#10;Type &#34;copyright&#34;, &#34;credits&#34; or &#34;license&#34; for more information.&#10;&#10;IPython 5.1.0 -- An enhanced Interactive Python.&#10;?         -&#62; Introduction and overview of IPython&#39;s features.&#10;%quickref -&#62; Quick reference.&#10;help      -&#62; Python&#39;s own help system.&#10;object?   -&#62; Details about &#39;object&#39;, use &#39;object??&#39; for extra details.&#10;&#10;In [1]:</span><br></pre></td></tr></table></figure>
<h3 id="u5728_Jupyter_Notebook__u4E2D_u4F7F_u7528"><a href="#u5728_Jupyter_Notebook__u4E2D_u4F7F_u7528" class="headerlink" title="在 Jupyter Notebook 中使用"></a>在 Jupyter Notebook 中使用</h3><p><a href="http://jupyter.org/" target="_blank" rel="external">Jupyter Notebook</a> 是基于浏览器的 IPython shell 图形界面，非常适合用于开发、协同、分享甚至是发布数据科学研究成果。Notebook 以 JSON 格式保存整个交互式会话，可以兼容 Python 代码，文本标记语言如 Markdown，图片，视频，媒体内容等。 IPython Notebook 在 Python 社区中越来越普遍，特别是在科学研究与教育领域，很多课程/博客/书籍都是用 Notebook 写的。</p>
<p><a href="http://jupyter.org/install.html" target="_blank" rel="external">安装 Jupyter</a> 后，在命令行输入 <code>jupyter notebook</code>，进入 IPython 环境</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[I 15:28:38.305 NotebookApp] Serving notebooks from local directory: /Users/kidult/Workspace/PresentWrok/OpenMind/2016.OM.DS/my_venv&#10;[I 15:28:38.305 NotebookApp] 0 active kernels&#10;[I 15:28:38.305 NotebookApp] The Jupyter Notebook is running at: http://localhost:8888/&#10;[I 15:28:38.305 NotebookApp] Use Control-C to stop this server and shut down all kernels (twice to skip confirmation).</span><br></pre></td></tr></table></figure>
<p>浏览器会打开本地的 Jupyter 控制台，新建或选择 .ipynb 后缀文件打开，就可以看到 Notebook 的页面了：</p>
<p><img src="http://jupyter.org/assets/jupyterpreview.png" alt=""></p>
<h2 id="u4E09_u3001Notebook__u57FA_u672C_u7ED3_u6784_u548C_u64CD_u4F5C"><a href="#u4E09_u3001Notebook__u57FA_u672C_u7ED3_u6784_u548C_u64CD_u4F5C" class="headerlink" title="三、Notebook 基本结构和操作"></a>三、Notebook 基本结构和操作</h2><p>在 Jupyter Notebook 中，基本的操作单元是 cell：</p>
<p><img src="http://7xjpra.com1.z0.glb.clouddn.com/IP.SS.cell.jpg" alt=""></p>
<p>每个 cell 由 <code>In</code>和<code>Out</code>，即输入和输出部分组成。在这里，IPython 实际上生成了名叫 <code>In</code>和<code>Out</code> 的 Python 变量，把操作历史存储起来，以便随时调用。<code>_</code>可调用上一个输出，<code>_X</code>可调用 <code>Out[X]</code> 的输出。</p>
<p>IPython 中的 cell 支持 Markdown 格式，所以很适合用来生成带源码和运行结果的文档。</p>
<p><img src="http://7xjpra.com1.z0.glb.clouddn.com/IP.SS.celltype.jpg" alt=""></p>
<p>Notebook 中常用操作</p>
<p>命令模式 (按 <code>Esc</code> 键进入)</p>
<table>
<thead>
<tr>
<th>键盘</th>
<th>命令</th>
<th>操作</th>
</tr>
</thead>
<tbody>
<tr>
<td>↩</td>
<td>回车</td>
<td>进入编辑模式</td>
</tr>
<tr>
<td>⇧↩</td>
<td>shift+回车</td>
<td>运行 cell，选择下一个 cell</td>
</tr>
<tr>
<td>M</td>
<td>M 键</td>
<td>切换为 Markdown 格式</td>
</tr>
<tr>
<td>A</td>
<td>A 键</td>
<td>在上方插入 cell </td>
</tr>
<tr>
<td>B</td>
<td>B 键</td>
<td>在下方插入 cell </td>
</tr>
<tr>
<td>D,D</td>
<td>按两次 D 键</td>
<td>删除所选 cell</td>
</tr>
<tr>
<td>H</td>
<td>H 键</td>
<td>显示快捷键</td>
</tr>
</tbody>
</table>
<p>编辑模式 (按 <code>Enter</code> 键进入)</p>
<table>
<thead>
<tr>
<th>键盘</th>
<th>命令</th>
<th>操作</th>
</tr>
</thead>
<tbody>
<tr>
<td>⌘]</td>
<td>command + ]</td>
<td>缩进</td>
</tr>
<tr>
<td>⌘[</td>
<td>command + ]</td>
<td>取消缩进</td>
</tr>
<tr>
<td>⌘Z</td>
<td>command + Z</td>
<td>撤销</td>
</tr>
<tr>
<td>⌘⇧Z</td>
<td>command + shift + Z</td>
<td>重做</td>
</tr>
<tr>
<td>⌘↑</td>
<td>command + up 键</td>
<td>跳到 cell 开头</td>
</tr>
<tr>
<td>⌘↓</td>
<td>command + down 键</td>
<td>跳到 cell 结尾</td>
</tr>
</tbody>
</table>
<h2 id="u56DB_u3001_u5B9E_u7528_u529F_u80FD"><a href="#u56DB_u3001_u5B9E_u7528_u529F_u80FD" class="headerlink" title="四、实用功能"></a>四、实用功能</h2><h3 id="Tab_u81EA_u52A8_u8865_u5168"><a href="#Tab_u81EA_u52A8_u8865_u5168" class="headerlink" title="Tab自动补全"></a>Tab自动补全</h3><p>在输入命令时按下 tab 键，可以查看补全选项：</p>
<p><img src="http://7xjpra.com1.z0.glb.clouddn.com/IP.SS.tab.jpg" alt=""></p>
<h3 id="u7528__3F__u67E5_u8BE2_u6587_u6863"><a href="#u7528__3F__u67E5_u8BE2_u6587_u6863" class="headerlink" title="用 ? 查询文档"></a>用 <code>?</code> 查询文档</h3><p>比如，要查询 <code>len</code> 的用法，只需要输入 <code>len?</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">In [2]: len?&#10;&#10;Type:        builtin_function_or_method&#10;String form: &#60;built-in function len&#62;&#10;Namespace:   Python builtin&#10;Docstring:&#10;len(object) -&#62; integer&#10;&#10;Return the number of items of a sequence or mapping.</span><br></pre></td></tr></table></figure>
<p>另外，用 <code>??</code> 可以查看源代码，比如输入<code>square??</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">In [8]: square??&#10;&#10;Type:        function&#10;String form: &#60;function square at 0x103713cb0&#62;&#10;Definition:  square(a)&#10;Source:&#10;def square(a):&#10;    &#34;Return the square of a&#34;&#10;    return a ** 2</span><br></pre></td></tr></table></figure>
<h3 id="u9B54_u6CD5_u547D_u4EE4"><a href="#u9B54_u6CD5_u547D_u4EE4" class="headerlink" title="魔法命令"></a>魔法命令</h3><p>通过<code>%lsmagic</code>即可查看，以下为部分命令：</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>命令说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>%hist</td>
<td>查询输入的历史</td>
</tr>
<tr>
<td>%reset</td>
<td>清空 namespace</td>
</tr>
<tr>
<td>%time</td>
<td>显示 Python语句的执行时间，包括 cpu time 和 wall clock time</td>
</tr>
<tr>
<td>%timeit</td>
<td>显示 Python语句的执行时间，但是这个命令会多次执行相应的语句（可以指定次数）<code>%timeit</code>  </td>
</tr>
<tr>
<td>%bookmark</td>
<td>用于存储常用路径</td>
</tr>
<tr>
<td>%cd</td>
<td>进入目录命令</td>
</tr>
<tr>
<td>%env</td>
<td>显示系统环境变量</td>
</tr>
<tr>
<td>%pushd dir</td>
<td>将当前目录入栈，并进入dir指定的目录</td>
</tr>
</tbody>
</table>
<h3 id="u53C2_u8003_u8D44_u6599"><a href="#u53C2_u8003_u8D44_u6599" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><a href="http://nbviewer.jupyter.org/github/jakevdp/PythonDataScienceHandbook/blob/master/notebooks/Index.ipynb" target="_blank" rel="external">Python Data Science Handbook</a></li>
<li><a href="http://ipython.org/" target="_blank" rel="external">IPython.org</a></li>
<li><a href="https://www.gitbook.com/book/itacey/learning_ipython" target="_blank" rel="external">学习IPython进行交互式编程和数据可视化</a></li>
<li><a href="https://www.zhihu.com/question/51467397" target="_blank" rel="external">使用IPython有哪些好处？ - 知乎</a></li>
<li><a href="http://www.jianshu.com/p/61f8f7a68bbe" target="_blank" rel="external">为什么要使用IPython？ - 简书</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://7xjpra.com1.z0.glb.clouddn.com/170103IPython_basic_title.png" alt=""></p>]]>
    
    </summary>
    
      <category term="Data Science" scheme="http://uegeek.com/tags/Data-Science/"/>
    
      <category term="IPython" scheme="http://uegeek.com/tags/IPython/"/>
    
      <category term="Python" scheme="http://uegeek.com/tags/Python/"/>
    
      <category term="动手" scheme="http://uegeek.com/categories/%E5%8A%A8%E6%89%8B/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[菜鸟数据科学入门01 - 工具包概略]]></title>
    <link href="http://uegeek.com/170101-data-science-toolkit.html"/>
    <id>http://uegeek.com/170101-data-science-toolkit.html</id>
    <published>2017-01-01T02:32:44.000Z</published>
    <updated>2017-01-07T09:40:40.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://7xjpra.com1.z0.glb.clouddn.com/170101data_science_toolkit.jpg" alt=""></p>
<a id="more"></a> 
<blockquote>
<p>数据科学是什么？为什么要学习数据科学？</p>
</blockquote>
<p>来不及解释了，先上车  -。-</p>
<p>开车之前，为接下来的系列文章做准备，先来罗列一下 Python 科学计算生态中常见的工具包。</p>
<p><img src="http://image.slidesharecdn.com/1idanielrodriguez-160614230356/95/connecting-python-to-the-spark-ecosystem-3-638.jpg?cb=1465945555" alt=""></p>
<h3 id="IPython"><a href="#IPython" class="headerlink" title="IPython"></a>IPython</h3><p>IPython 为 <a href="http://www.numpy.org/" target="_blank" rel="external">NumPy</a>、<a href="https://www.scipy.org/" target="_blank" rel="external">SciPy</a>、<a href="http://pandas.pydata.org/" target="_blank" rel="external">Pandas</a>、<a href="http://matplotlib.org/" target="_blank" rel="external">Matplotlib</a> 等包提供一个交互式接口，它本身并不提供科学计算的功能。这些工具组合在一起，形成了可以匹敌如 Matlab、Mathmatic 这些复杂工具的科学计算框架。</p>
<p>不同的工具包，在数据分析的不同阶段各显神通：    </p>
<p><img src="http://7xjpra.com1.z0.glb.clouddn.com/python-in-analysis.jpeg" alt=""></p>
<h3 id="NumPy"><a href="#NumPy" class="headerlink" title="NumPy"></a><a href="http://www.numpy.org/" target="_blank" rel="external">NumPy</a></h3><p>NumPy 主要提供基础的数组数据结构和矩阵运算。</p>
<ul>
<li>快速高效的多维数组对象</li>
<li>可执行向量化计算</li>
<li>提供线性代数等矩阵</li>
<li>可集成 C 代码</li>
</ul>
<h3 id="SciPy"><a href="#SciPy" class="headerlink" title="SciPy"></a><a href="https://www.scipy.org/" target="_blank" rel="external">SciPy</a></h3><p>基于 NumPy 提供了大量的科学计算算法（信号处理、最优化求解等等），解决标准问题。</p>
<ul>
<li>数值积分和微分方程求解</li>
<li>扩展的矩阵计算功能</li>
<li>最优化工具</li>
<li>概率分布计算和统计函数</li>
<li>信号处理函数</li>
</ul>
<h3 id="Pandas"><a href="#Pandas" class="headerlink" title="Pandas"></a><a href="http://pandas.pydata.org/" target="_blank" rel="external">Pandas</a></h3><p>提供 data frames 数据结构，便于处理真实数据集。</p>
<ul>
<li>易用、高效的数据操作函数库</li>
<li>执行 join 以及其他 SQL 类似的功能来重塑数据</li>
<li>提供包括 dataframe 在内的数据结构</li>
<li>支持各种格式（包括数据库）输入输出</li>
<li>支持时间序列</li>
</ul>
<h3 id="Matplotlib"><a href="#Matplotlib" class="headerlink" title="Matplotlib"></a><a href="http://matplotlib.org/" target="_blank" rel="external">Matplotlib</a></h3><p>擅长数据绘图，绘制交互式可视化图像。</p>
<ul>
<li>提供一套和 matlab 相似的命令 API</li>
<li>十分适合交互式绘图</li>
<li>可以作为绘图控件嵌入 GUI</li>
</ul>
<h3 id="u5176_u4ED6_u5E38_u7528_u5DE5_u5177_u5305"><a href="#u5176_u4ED6_u5E38_u7528_u5DE5_u5177_u5305" class="headerlink" title="其他常用工具包"></a>其他常用工具包</h3><ul>
<li><a href="http://seaborn.pydata.org/" target="_blank" rel="external">Seaborn</a>：统计绘图</li>
<li><a href="http://statsmodels.sourceforge.net/" target="_blank" rel="external">StatsModels</a>：统计模型</li>
<li><a href="http://scikit-learn.org/" target="_blank" rel="external">scikit-learn</a>：机器学习<ul>
<li>建立在 NumPy，SciPy 基础上</li>
<li>通过统一接口来使用，可以迅速在数据集上实现流行的算法</li>
<li>包含许多用于标准机器学习任务的工具，如：聚类、分类和回归等</li>
</ul>
</li>
<li>Requests：网页数据抓取</li>
<li>Beautiful Soup：解析网页数据</li>
<li>Flask：轻量级的 web 框架</li>
<li>sqlite3：轻量级数据库接口</li>
<li>Pyspark： Spark 的 Python 接口</li>
<li>nltk：自然语言处理</li>
<li>networkx：社交网络分析</li>
<li>theano：深度学习</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://7xjpra.com1.z0.glb.clouddn.com/170101data_science_toolkit.jpg" alt=""></p>]]>
    
    </summary>
    
      <category term="Data Science" scheme="http://uegeek.com/tags/Data-Science/"/>
    
      <category term="Design" scheme="http://uegeek.com/tags/Design/"/>
    
      <category term="Python" scheme="http://uegeek.com/tags/Python/"/>
    
      <category term="Visualization" scheme="http://uegeek.com/tags/Visualization/"/>
    
      <category term="可视化" scheme="http://uegeek.com/tags/%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
      <category term="动手" scheme="http://uegeek.com/categories/%E5%8A%A8%E6%89%8B/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hack myself @ 2016]]></title>
    <link href="http://uegeek.com/2016summary.html"/>
    <id>http://uegeek.com/2016summary.html</id>
    <published>2016-12-31T02:50:04.000Z</published>
    <updated>2016-12-31T02:57:21.000Z</updated>
    <content type="html"><![CDATA[<p><img src="https://d13yacurqjgara.cloudfront.net/users/175166/screenshots/2432119/2016dribbb.jpg" alt=""></p>
<a id="more"></a> 
<p>又到了年底交卷的时候。</p>
<p>今年基本上就干了两件事：创业+创客</p>
<h3 id="u521B_u4E1A"><a href="#u521B_u4E1A" class="headerlink" title="创业"></a>创业</h3><div class="video-container"><iframe src="//www.youtube.com/embed/_R3jyuXf3Zk" frameborder="0" allowfullscreen></iframe></div>
<p>媒体和创业者们可能过分地标签化和戏剧化创业这件事了，其实对每个人来说，是完全不同的经历。</p>
<p>在预期之内的是，有太多的第一次。跟安稳打工的节奏相比，确实有不少新收获：</p>
<ul>
<li>开始理解商业，理解做生意的本质是价值生产+资源配置</li>
<li>知道一个公司基本的运作方式，更全面地接触到产品运营、生产和销售各个环节</li>
<li>强化了行业的视角和内外部资源整合的意识</li>
<li>明白从 0 到 1 需要思考和做的事情跟以前不一样</li>
<li>音视频剪辑、公众号运营、IAP 踩坑、行政后勤等等技能 get√</li>
</ul>
<p>虽然，这些收获并不意味着成功。每天都需要做很多判断和决策，然而最难的是分辨出（甚至是能否意识到）到底什么最重要，毕竟创业的本质是用极少的资源，搭建出可以自行运转的系统。</p>
<p>在预期之外的是，创业提供了一个特别好的审视自己的机会：</p>
<ul>
<li>到底更看重什么，只是嘴上说说的都不叫价值观，身体力行的才算</li>
<li>擅长什么，不擅长什么，在逃避什么，需要补什么</li>
<li>跟别人合作的方式是什么，存在什么问题</li>
<li>思考的习惯是什么，应该如何改进</li>
</ul>
<h3 id="u521B_u5BA2"><a href="#u521B_u5BA2" class="headerlink" title="创客"></a>创客</h3><div class="video-container"><iframe src="//www.youtube.com/embed/PgKtiaQ3u-M" frameborder="0" allowfullscreen></iframe></div>
<p><a href="https://youtu.be/PgKtiaQ3u-M" target="_blank" rel="external">Mini SoundBot - Youtube</a></p>
<p>参加 MIT Fab Academy 的血泪史就不多说了，已经用一系列文章记录下来。</p>
<p>完成课程后最明显的变化，是每当看到一般的实体商品，基本上都有大致的思路知道该怎么把它做出来。</p>
<h3 id="u5176_u4ED6_u75D5_u8FF9"><a href="#u5176_u4ED6_u75D5_u8FF9" class="headerlink" title="其他痕迹"></a>其他痕迹</h3><ul>
<li>原公众号改名为「HackYourself」，提升产出质量，一年原创文章 43 篇</li>
<li>新开公众号「你丫全栈」，完成产品经理的用研手册系列，一个月拿到原创</li>
<li>改进学习方法和工具，积累 160 张卡片</li>
<li>读书 50 本，维持正常水平</li>
</ul>
<h3 id="u4E3B_u9898_u4E0E_u95EE_u9898"><a href="#u4E3B_u9898_u4E0E_u95EE_u9898" class="headerlink" title="主题与问题"></a>主题与问题</h3><p>最近常常回想起 2011 年，人生中最煎熬的一年。</p>
<p>以前总觉得这一年过得很灰暗：入行不到三年，在三个城市孤独奔波，在三个岗位之间摇摆不定，良师益友各奔东西，前所未有地无法认同自己，身体也变得很差。</p>
<p>而最近突然发现，其实那是被厚待的一年：慢慢找到喜欢做的事情，遇到了这十年（也许是五十年）最牵挂的人。也许就是因为还没有做好准备，老天才安排一次特别的经历，提醒我去正视问题，重新开始。</p>
<p>于是 2012 年的主题是灾后重建。往后每年都有主题，2013 年是设计，2014 年是团队，2015 年是跨界。</p>
<p>每一年，都有一些收获。去年开始尝试留下更多的作品。而今年则开始提出问题，让问题牵引注意力，激发思考。</p>
<p>跟能量一样，注意力也是趋向涣散的。寻找了很久，终于找到把注意力从无序变得有序的线索 —— 问题，或者有趣或者重要或者折磨人的问题。</p>
<h3 id="u65B0_u5E74_u300C_u8BA1_u5212_u300D"><a href="#u65B0_u5E74_u300C_u8BA1_u5212_u300D" class="headerlink" title="新年「计划」"></a>新年「计划」</h3><p>详细的新年计划是注定要落空的，时间管理总是自欺欺人的，目标管理精力管理关系管理也都是治标不治本。它们通通都犯了一个错误：妄图在下游治理污染。</p>
<p>真正的污染源，在上游。它就是注意力。</p>
<blockquote>
<p>不加选择的知识冲动就像不分对象的性冲动一样，都是下流的标识。—— 尼采</p>
</blockquote>
<p>管好注意力，才是开源节流的正道。如何管好注意力？靠意志力没有用，靠工具也很难，基本上，用「管理」、「制止」、「解决问题」的思路，都不太行得通。得用「生长」的思路，给注意力一条藤蔓，让它自己缠绕和自我增强。这条藤蔓，就是 —— 问题。</p>
<p>在复杂性占据主导地位的市场中，计划经济注定要失败。在信息过载的时代，系统而精确的学习计划注定要失败。</p>
<p>告别新年计划，我只留给自己两个年度关键词，两个年度「问题」，并且在接下来的 365 天，不断重复问自己是否正在积极寻找解答。</p>
<p>2017 年，00 的两个关键词是：心理学和极客。</p>
<p>明年今日，携作品见。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="https://d13yacurqjgara.cloudfront.net/users/175166/screenshots/2432119/2016dribbb.jpg" alt=""></p>]]>
    
    </summary>
    
      <category term="2016" scheme="http://uegeek.com/tags/2016/"/>
    
      <category term="总结" scheme="http://uegeek.com/tags/%E6%80%BB%E7%BB%93/"/>
    
      <category term="叽歪" scheme="http://uegeek.com/categories/%E5%8F%BD%E6%AD%AA/"/>
    
  </entry>
  
</feed>
